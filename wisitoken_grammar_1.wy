;;; WisiToken grammar for WisiToken grammar, for Emacs wisitoken-grammar mode.
;;
;;  WisiToken uses the same grammar for parsing .wy files, but with
;;  different actions.
;;  (ediff "wisitoken_grammar_1.wy" "../org.wisitoken/wisitoken_grammar.wy")
;;
;;  The supported syntax is similar to several flavors of Extended
;;  Backus-Naur form, as defined by
;;  https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form
;;
;;  In particular, we support grammars for popular languages:
;;
;;  - the Python grammar file given at
;;    https://docs.python.org/3.8/reference/grammar.html
;;    except that we require terminal semicolons
;;
;;  - the Java grammar file given at
;;    https://github.com/antlr/grammars-v4/tree/master/java
;;
;;  - the Ada grammar given in the Ada Language Reference Manual Annex
;;    P; see https://ada-auth.org/arm.html
;;
;;  This file uses only plain BNF syntax, to simplify working on the
;;  EBNF syntax.

%code copyright_license %{
;;  Copyright (C) 2017 - 2022 Free Software Foundation, Inc.
;;
;;  Author: Stephen Leake <stephe-leake@stephe-leake.org>
;;
;;  This file is part of GNU Emacs.
;;
;;  GNU Emacs is free software: you can redistribute it and/or modify
;;  it under the terms of the GNU General Public License as published by
;;  the Free Software Foundation, either version 3 of the License, or
;;  (at your option) any later version.
;;
;;  GNU Emacs is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;  GNU General Public License for more details.
;;
;;  You should have received a copy of the GNU General Public License
;;  along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.
}%

%meta_syntax EBNF

;; LR1 for better error correction
%generate LR1 Ada_Emacs re2c Process
%start compilation_unit_list

%language_runtime "Wisi.WisiToken_Grammar"

;; _not_ %case_insensitive; that makes ada.wy "%keyword IF" collide
;; with this IF.
;;
;; 'reduce' and 'shift' are case insenstive, because error messages
;; contain them in uppercase, and we allow people to either type them
;; in lower case or just copy them from the error message.

%keyword ACCEPT_I "accept_it"
%keyword CODE "code"
%keyword CONFLICT "conflict"
%keyword CONFLICT_RESOLUTION "conflict_resolution"
%keyword END "end"
%keyword ELSIF "elsif"
%keyword IF "if"
%keyword IN "in"
%keyword KEYWORD "keyword"
%keyword NON_GRAMMAR "non_grammar"
%keyword ON "on"
%keyword REDUCE_I 'reduce'
%keyword SHIFT_I 'shift'
%keyword TOKEN "token"

%token <delimited-text> RAW_CODE "%{" "}%"
%token <delimited-text> REGEXP "%[" "]%"
%token <delimited-text> ACTION "%(" ")%"

%token <punctuation> BAR "|"
%token <punctuation> COLON ":"
%token <punctuation> COLON_COLON_EQUAL "::="
%token <punctuation> EQUAL "="
%token <punctuation> GREATER ">"
%token <punctuation> LEFT_BRACE "{"
%token <punctuation> LEFT_BRACKET "["
%token <punctuation> LEFT_PAREN "("
%token <punctuation> LESS "<"
%token <punctuation> MINUS "-" ;; for {}-
%token <punctuation> PERCENT "%"
%token <punctuation> PLUS "+" ;; for ()+
%token <punctuation> QUESTION "?" ;; for ()? same as []
%token <punctuation> RIGHT_BRACE "}"
%token <punctuation> RIGHT_BRACKET "]"
%token <punctuation> RIGHT_PAREN ")"
%token <punctuation> SEMICOLON ";"
%token <punctuation> STAR "*" ;; for ()* same as {}

%token <number> NUMERIC_LITERAL %[ [0-9-][0-9_]* ]% "1234567890"
%token <symbol> IDENTIFIER %[ [a-zA-Z\x80-\U0010FFFF][-0-9a-zA-Z_\x80-\U0010FFFF]* ]% "bogus"

;; In re2c regexps, '...' indicates a case-insensitive match, "..." a
;; case-sensitive match.
;;
;; In nonterminals, '...' indicates a literal, which we translate to a
;; token; case-sensitive is then determined by the 'case_insensitive'
;; declaration.
;;
;; 0x22 = "
;; 0x27 = '
%token <string-double-one-line> STRING_LITERAL_1 %[ (["][\x20-\x21\x23-\U0010FFFF]*["])+ ]% '""'
%token <string-single-one-line> STRING_LITERAL_2 %[ (['][\x20-\x26\x28-\U0010FFFF]*['])+ ]% "''"

%non_grammar <non-reporting> WHITESPACE %[ [ \t] ]%
%non_grammar <new-line> NEW_LINE %[ [\x0a]|[\x0d][\x0a] ]%
%non_grammar <comment-new-line> COMMENT ";;"

%elisp_face font-lock-constant-face
%elisp_face font-lock-function-name-face
%elisp_face font-lock-keyword-face
%elisp_face font-lock-string-face
%elisp_face font-lock-type-face
%elisp_face nil

%elisp_action face wisi-check-parens Check_Parens

%mckenzie_cost_default 2 2 2 2
%mckenzie_cost_insert SEMICOLON 1
%mckenzie_enqueue_limit 10_000
%mckenzie_zombie_limit 3
%mckenzie_check_limit 4

%conflict SHIFT IDENTIFIER_BAR_list | REDUCE rhs_list on token BAR
%conflict SHIFT declaration_item | REDUCE declaration on token IDENTIFIER

;;;; grammar rules, no particular order

regexp_string
  : REGEXP
  | STRING_LITERAL_1
  | STRING_LITERAL_2
  ;

conflict_item
  : SHIFT_I IDENTIFIER
  | REDUCE_I IDENTIFIER
  | ACCEPT_I IDENTIFIER
  | IDENTIFIER
  ;

conflict_item_list
  : conflict_item {BAR conflict_item}
  ;

token_keyword_non_grammar
  : KEYWORD
  | NON_GRAMMAR LESS IDENTIFIER GREATER
    %((wisi-face-apply-action [3 nil font-lock-type-face]))%
  | TOKEN LESS IDENTIFIER GREATER
    %((wisi-face-apply-action [3 nil font-lock-type-face]))%
  ;

declaration
  : PERCENT token_keyword_non_grammar IDENTIFIER [regexp_string [regexp_string]]
    %((wisi-statement-action [1 statement-start])
      (wisi-name-action 3)
      (wisi-face-apply-action
       [1 nil font-lock-constant-face
          2 nil font-lock-keyword-face
          3 nil font-lock-function-name-face])
      (wisi-indent-action [nil nil nil (wisi-hanging 4 2) (wisi-hanging 4 2)]))%
  | PERCENT CODE identifier_list RAW_CODE
    %((wisi-face-apply-action [1 nil font-lock-constant-face 2 nil font-lock-keyword-face]) )%
  | PERCENT CONFLICT conflict_item_list ON TOKEN IDENTIFIER
    %((wisi-face-apply-action [1 nil font-lock-constant-face 2 nil font-lock-keyword-face]) )%
  | PERCENT CONFLICT_RESOLUTION conflict_item_list ON TOKEN COLON IDENTIFIER
    %((wisi-face-apply-action [1 nil font-lock-constant-face 2 nil font-lock-keyword-face]) )%

  ;; %start, %mckenzie*, etc.
  | PERCENT IDENTIFIER [declaration_item_list]
    %((wisi-face-apply-action [1 nil font-lock-constant-face 2 nil font-lock-keyword-face])
      (wisi-indent-action [nil nil (wisi-hanging 4 2)]))%

  | PERCENT IF IDENTIFIER EQUAL IDENTIFIER
    %((wisi-face-apply-action [1 nil font-lock-constant-face 2 nil font-lock-keyword-face]) )%
  | PERCENT IF IDENTIFIER IN IDENTIFIER_BAR_list
    %((wisi-face-apply-action [1 nil font-lock-constant-face 2 nil font-lock-keyword-face]) )%
  | PERCENT ELSIF IDENTIFIER EQUAL IDENTIFIER
    %((wisi-face-apply-action [1 nil font-lock-constant-face 2 nil font-lock-keyword-face]) )%
  | PERCENT ELSIF IDENTIFIER IN IDENTIFIER_BAR_list
    %((wisi-face-apply-action [1 nil font-lock-constant-face
                                 2 nil font-lock-keyword-face
                                 4 nil font-lock-keyword-face]))%
  | PERCENT END IF
    %((wisi-face-apply-action [1 nil font-lock-constant-face
                                 2 nil font-lock-keyword-face
                                 3 nil font-lock-keyword-face]) )%
  ;

identifier_list
  : IDENTIFIER
  | identifier_list IDENTIFIER
  ;

IDENTIFIER_BAR_list
  : IDENTIFIER
  | IDENTIFIER_BAR_list BAR IDENTIFIER
  ;

declaration_item
  : IDENTIFIER
  | NUMERIC_LITERAL
  | regexp_string
  ;

declaration_item_list
  : declaration_item
  | declaration_item_list declaration_item
  ;

nonterm_colon : COLON | COLON_COLON_EQUAL ; ;; split out for action

;; We require terminal semicolons, and force at least one non-empty
;; rhs, to improve error correction. Consider: exp : term : foo ; We
;; are editing 'exp : foo ;' to insert a 'term' intermediary. If
;; rhs_list can be empty and we don't require a terminal semicolon,
;; this parses as "nonterminal nonterminal", with an empty rhs_list in
;; "exp", and no error. Then when we insert "; term :" to complete the
;; edit, that empty rhs_list is not reparsed, so we are left with an
;; error. test/incremental_01.wy. This also forces any empty rhs to be
;; last, which is not required by the LR generator, but is required by
;; packrat.
nonterminal
  : IDENTIFIER nonterm_colon rhs_list ['|'] SEMICOLON
    %((wisi-statement-action [1 statement-start 5 statement-end])
      (wisi-motion-action [1 [3 rhs] 5])
      (wisi-name-action 1)
      (wisi-face-apply-action [1 nil font-lock-function-name-face])
      (wisi-indent-action [[nil 2] 2 (wisi-block 2) 2 2]))%
  ;

rhs_list
  : rhs
    %((wisi-statement-action [1 motion])
      (wisi-indent-action [[2 nil]]))%
  | rhs_list BAR rhs
    %((wisi-statement-action [3 motion])
      (wisi-indent-action [nil nil 2]))%
  | rhs_list PERCENT IF IDENTIFIER EQUAL IDENTIFIER
    %((wisi-face-apply-action [2 nil font-lock-constant-face 3 nil font-lock-keyword-face]))%
  | rhs_list PERCENT IF IDENTIFIER IN IDENTIFIER_BAR_list
    %((wisi-face-apply-action [2 nil font-lock-constant-face 3 nil font-lock-keyword-face]))%
  | rhs_list PERCENT ELSIF IDENTIFIER EQUAL IDENTIFIER
    %((wisi-face-apply-action [2 nil font-lock-constant-face 3 nil font-lock-keyword-face]))%
  | rhs_list PERCENT ELSIF IDENTIFIER IN IDENTIFIER_BAR_list
    %((wisi-face-apply-action [2 nil font-lock-constant-face 3 nil font-lock-keyword-face]))%
  | rhs_list PERCENT END IF
    %((wisi-face-apply-action [2 nil font-lock-constant-face
                                 3 nil font-lock-keyword-face
                                 4 nil font-lock-keyword-face]))%
  ;

rhs
  : rhs_item_list
    %((wisi-indent-action [[(wisi-hanging nil 2) nil]]))%
  | rhs_item_list ACTION
    %((wisi-check-parens [2])
      (wisi-indent-action [(wisi-hanging nil 2) nil]))%
  | rhs_item_list ACTION ACTION
    %((wisi-check-parens [2 3])
      (wisi-indent-action [(wisi-hanging nil 2) nil nil]))%
  ;

rhs_attribute
  : LESS IDENTIFIER EQUAL IDENTIFIER GREATER
  ;

rhs_element
  : rhs_item
  | IDENTIFIER EQUAL rhs_item
  ;

rhs_item_list
  : rhs_element
  | rhs_item_list rhs_element
  ;

rhs_item
  : IDENTIFIER
  | STRING_LITERAL_2   ;; value of token
    %((wisi-face-apply-action [1 nil font-lock-constant-face]))%
  | rhs_attribute ;; ANTLR attribute
  | rhs_optional_item
  | rhs_multiple_item
  | rhs_group_item
  ;

rhs_group_item
  : LEFT_PAREN rhs_alternative_list RIGHT_PAREN
  ;

rhs_optional_item
  : LEFT_BRACKET rhs_alternative_list RIGHT_BRACKET
  | LEFT_PAREN rhs_alternative_list RIGHT_PAREN QUESTION
  | IDENTIFIER QUESTION
  | STRING_LITERAL_2 QUESTION
    %((wisi-face-apply-action [1 nil font-lock-constant-face]))%
  ;

rhs_multiple_item
  : LEFT_BRACE rhs_alternative_list RIGHT_BRACE
  | LEFT_BRACE rhs_alternative_list RIGHT_BRACE MINUS
  | LEFT_PAREN rhs_alternative_list RIGHT_PAREN PLUS
  | LEFT_PAREN rhs_alternative_list RIGHT_PAREN STAR
  | IDENTIFIER PLUS
  | IDENTIFIER STAR
  ;

rhs_alternative_list
  : rhs_item_list
  | rhs_alternative_list BAR rhs_item_list
  ;

;; We don't enforce a complete order, nor require all parts, so
;; partial files can still be parsed successfully.
compilation_unit
  : declaration
  | nonterminal
  ;

;; Compute indent for trailing comments.
compilation_unit_list
  : compilation_unit
    %((wisi-indent-action [[0 0]]))%
  | compilation_unit_list compilation_unit
    %((wisi-indent-action [0 [0 0]]))%
  ;

;; end of file
