;; generated by WisiToken Wisi from ada_grammar.wy
;; with command line: wisi-generate.exe -v 1 --output_language Ada_Emacs --lexer Elisp --interface process
;; ada_grammar.wy
;;
;;  Copyright (C) 2013 - 2015 Free Software Foundation, Inc.

;;  This program is free software; you can redistribute it and/or
;;  modify it under the terms of the GNU General Public License as
;;  published by the Free Software Foundation; either version 3, or (at
;;  your option) any later version.
;;
;;  This software is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;  General Public License for more details.
;;
;;  You should have received a copy of the GNU General Public License
;;  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

(require 'semantic/lex)
(require 'wisi-process-parse)

(defconst ada_grammar-elisp-keyword-table-raw
  '(
   ("abs" . ABS)
   ("accept" . ACCEPT)
   ("abort" . ABORT)
   ("abstract" . ABSTRACT)
   ("access" . ACCESS)
   ("aliased" . ALIASED)
   ("all" . ALL)
   ("and" . AND)
   ("array" . ARRAY)
   ("at" . AT)
   ("begin" . BEGIN)
   ("body" . BODY)
   ("case" . CASE)
   ("constant" . CONSTANT)
   ("declare" . DECLARE)
   ("delay" . DELAY)
   ("delta" . DELTA)
   ("digits" . DIGITS)
   ("do" . DO)
   ("else" . ELSE)
   ("elsif" . ELSIF)
   ("end" . END)
   ("entry" . ENTRY)
   ("exception" . EXCEPTION)
   ("exit" . EXIT)
   ("for" . FOR)
   ("function" . FUNCTION)
   ("generic" . GENERIC)
   ("goto" . GOTO)
   ("if" . IF)
   ("in" . IN)
   ("interface" . INTERFACE)
   ("is" . IS)
   ("(" . LEFT_PAREN)
   ("limited" . LIMITED)
   ("loop" . LOOP)
   ("mod" . MOD)
   ("new" . NEW)
   ("not" . NOT)
   ("null" . NULL)
   ("of" . OF)
   ("or" . OR)
   ("others" . OTHERS)
   ("out" . OUT)
   ("overriding" . OVERRIDING)
   ("package" . PACKAGE)
   ("pragma" . PRAGMA)
   ("private" . PRIVATE)
   ("procedure" . PROCEDURE)
   ("protected" . PROTECTED)
   ("raise" . RAISE)
   ("range" . RANGE)
   ("record" . RECORD)
   ("rem" . REM)
   ("renames" . RENAMES)
   ("requeue" . REQUEUE)
   ("return" . RETURN)
   ("reverse" . REVERSE)
   (")" . RIGHT_PAREN)
   ("separate" . SEPARATE)
   ("select" . SELECT)
   ("some" . SOME)
   ("subtype" . SUBTYPE)
   ("synchronized" . SYNCHRONIZED)
   ("tagged" . TAGGED)
   ("task" . TASK)
   ("terminate" . TERMINATE)
   ("then" . THEN)
   ("type" . TYPE)
   ("until" . UNTIL)
   ("use" . USE)
   ("when" . WHEN)
   ("while" . WHILE)
   ("with" . WITH)
   ("xor" . XOR)
   ))
(defconst ada_grammar-elisp-token-table-raw
  '(
   ("punctuation"
    (AMPERSAND . "&")
    (BAR . "|")
    (BOX . "<>")
    (COLON . ":")
    (COLON_EQUAL . ":=")
    (COMMA . ",")
    (DOT . ".")
    (DOT_DOT . "..")
    (EQUAL . "=")
    (EQUAL_GREATER . "=>")
    (GREATER . ">")
    (GREATER_EQUAL . ">=")
    (GREATER_GREATER . ">>")
    (LESS . "<")
    (LESS_EQUAL . "<=")
    (LESS_LESS . "<<")
    (MINUS . "-")
    (PLUS . "+")
    (SEMICOLON . ";")
    (SLASH . "/")
    (SLASH_EQUAL . "/=")
    (STAR . "*")
    (STAR_STAR . "**")
    (TICK_1 . "'")
    )
   ("number"
    (NUMERIC_LITERAL ada-wisi-number-p)
    )
   ("symbol"
    (IDENTIFIER . "")
    )
   ("string-double"
    (STRING_LITERAL . "")
    )
   ("string-single"
    (CHARACTER_LITERAL . "")
    )
   ))
(defconst ada_grammar-process-token-table
  (wisi-process-compile-tokens
   [WHITESPACE
    COMMENT
    ABS
    ACCEPT
    ABORT
    ABSTRACT
    ACCESS
    ALIASED
    ALL
    AND
    ARRAY
    AT
    BEGIN
    BODY
    CASE
    CONSTANT
    DECLARE
    DELAY
    DELTA
    DIGITS
    DO
    ELSE
    ELSIF
    END
    ENTRY
    EXCEPTION
    EXIT
    FOR
    FUNCTION
    GENERIC
    GOTO
    IF
    IN
    INTERFACE
    IS
    LEFT_PAREN
    LIMITED
    LOOP
    MOD
    NEW
    NOT
    NULL
    OF
    OR
    OTHERS
    OUT
    OVERRIDING
    PACKAGE
    PRAGMA
    PRIVATE
    PROCEDURE
    PROTECTED
    RAISE
    RANGE
    RECORD
    REM
    RENAMES
    REQUEUE
    RETURN
    REVERSE
    RIGHT_PAREN
    SEPARATE
    SELECT
    SOME
    SUBTYPE
    SYNCHRONIZED
    TAGGED
    TASK
    TERMINATE
    THEN
    TYPE
    UNTIL
    USE
    WHEN
    WHILE
    WITH
    XOR
    AMPERSAND
    BAR
    BOX
    COLON
    COLON_EQUAL
    COMMA
    DOT
    DOT_DOT
    EQUAL
    EQUAL_GREATER
    GREATER
    GREATER_EQUAL
    GREATER_GREATER
    LESS
    LESS_EQUAL
    LESS_LESS
    MINUS
    PLUS
    SEMICOLON
    SLASH
    SLASH_EQUAL
    STAR
    STAR_STAR
    TICK_1
    NUMERIC_LITERAL
    IDENTIFIER
    STRING_LITERAL
    CHARACTER_LITERAL
    Wisi_EOI
    wisitoken_accept
    abstract_limited_synchronized_opt
    abstract_limited_opt
    abstract_tagged_limited_opt
    abstract_subprogram_declaration
    accept_statement
    access_definition
    actual_parameter_part
    actual_parameter_part_opt
    aggregate
    aliased_opt
    and_interface_list_opt
    array_type_definition
    aspect_clause
    aspect_specification_opt
    assignment_statement
    association_opt
    association_list
    asynchronous_select
    at_clause
    attribute_reference
    attribute_designator
    binary_adding_operator
    block_statement
    body_g
    body_stub
    case_expression
    case_expression_alternative
    case_expression_alternative_list
    case_statement
    case_statement_alternative
    case_statement_alternative_list
    choice_expression
    choice_relation_and_list
    choice_relation_or_list
    choice_relation_xor_list
    choice_relation_and_then_list
    choice_relation_or_else_list
    choice_relation
    compilation_unit
    compilation_unit_list
    component_clause
    component_clause_list
    component_declaration
    component_definition
    component_item
    component_list
    component_list_opt
    compound_statement
    conditional_entry_call
    conditional_quantified_expression
    constant_opt
    constraint
    constraint_opt
    context_item
    declaration
    declarations
    declarative_part_opt
    delay_alternative
    delay_statement
    derived_type_definition
    direct_name
    direct_name_opt
    discrete_choice
    discrete_choice_list
    discrete_subtype_definition
    discrete_subtype_definition_list
    discriminant_part_opt
    discriminant_specification_opt
    discriminant_specification_list
    elsif_expression_item
    elsif_expression_list
    elsif_statement_item
    elsif_statement_list
    entry_body
    entry_body_formal_part
    entry_call_alternative
    entry_declaration
    enumeration_literal
    enumeration_literal_list
    enumeration_representation_clause
    enumeration_type_definition
    exception_choice
    exception_choice_list
    exception_declaration
    exception_handler
    exception_handler_list
    exception_handler_list_opt
    exit_statement
    expression
    expression_opt
    expression_function_declaration
    extended_return_object_declaration
    extended_return_object_declaration_opt
    extended_return_statement
    factor
    formal_object_declaration
    formal_part
    formal_subprogram_declaration
    formal_type_declaration
    formal_type_definition
    formal_derived_type_definition
    formal_package_declaration
    formal_package_actual_part
    full_type_declaration
    function_specification
    general_access_modifier_opt
    generic_declaration
    generic_formal_part
    generic_formal_parameter_declarations
    generic_formal_parameter_declaration
    generic_instantiation
    generic_package_declaration
    generic_renaming_declaration
    generic_subprogram_declaration
    goto_label
    handled_sequence_of_statements
    identifier_list
    identifier_opt
    if_expression
    if_statement
    incomplete_type_declaration
    index_constraint
    index_subtype_definition
    index_subtype_definition_list
    interface_list
    interface_type_definition
    iteration_scheme
    iterator_specification
    iterator_specification_opt
    label
    library_item
    library_unit_declaration
    library_unit_renaming_declaration
    loop_statement
    membership_choice_list
    membership_choice
    mod_clause_opt
    mode_opt
    multiplying_operator
    name_list
    name
    name_opt
    null_exclusion_opt
    null_exclusion_opt_name_type
    null_procedure_declaration
    object_declaration
    object_renaming_declaration
    overriding_indicator_opt
    package_body
    package_body_stub
    package_declaration
    package_renaming_declaration
    package_specification
    parameter_and_result_profile
    parameter_profile_opt
    parameter_specification
    parameter_specification_list
    paren_expression
    pragma_g
    primary
    private_extension_declaration
    private_type_declaration
    procedure_call_statement
    procedure_specification
    proper_body
    protected_body
    protected_body_stub
    protected_definition
    protected_operation_item
    protected_operation_item_list
    protected_operation_item_list_opt
    protected_opt
    protected_type_declaration
    qualified_expression
    quantified_expression
    quantifier
    raise_expression
    raise_statement
    range_g
    range_list
    real_range_specification_opt
    record_definition
    record_representation_clause
    relation_and_list
    relation_and_then_list
    relation_or_list
    relation_or_else_list
    relation_xor_list
    relation
    relational_operator
    renaming_declaration
    requeue_statement
    result_profile
    return_subtype_indication
    selected_component
    selective_accept
    select_alternative
    select_alternative_list
    select_alternative_list_opt
    select_statement
    sequence_of_statements
    sequence_of_statements_opt
    simple_expression
    simple_return_statement
    simple_statement
    single_protected_declaration
    single_task_declaration
    statement
    subprogram_body
    subprogram_body_stub
    subprogram_declaration
    subprogram_default
    subprogram_renaming_declaration
    subprogram_specification
    subtype_declaration
    subtype_indication
    subunit
    task_body
    task_body_stub
    task_definition
    task_type_declaration
    term
    term_list
    tick
    timed_entry_call
    triggering_alternative
    type_declaration
    type_definition
    variant_part
    variant_list
    variant
    unary_adding_operator
    use_clause
    with_clause
    ]))

(defconst ada_grammar-process-action-table
  (wisi-process-compile-actions
   '(nil
     nil
     nil
     nil
     (("abstract_subprogram_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 2 statement-override 6 statement-end])
       (wisi-indent-action [0 0 ada-indent-broken ada-indent-broken 0 0])))
      )
     (("accept_statement:0"
       (progn
       (wisi-statement-action [1 statement-start 5 motion 9 statement-end])
       (wisi-containing-action 1 4)
       (wisi-containing-action 1 6)
       (wisi-motion-action [1 5 [6 EXCEPTION WHEN] 9])
       (wisi-face-apply-action [2 nil font-lock-function-name-face 8 nil font-lock-function-name-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken 0 [ada-indent ada-indent] 0 0 0])))
      ("accept_statement:1"
       (progn
       (wisi-statement-action [1 statement-start 5 statement-end])
       (wisi-containing-action 1 4)
       (wisi-face-apply-action [2 nil font-lock-function-name-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      )
     (("access_definition:0"
       (progn
       (wisi-face-apply-action [4 font-lock-function-name-face font-lock-type-face])
       (wisi-indent-action [ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken])))
      ("access_definition:1"
       (wisi-indent-action [ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken
       (wisi-anchored% 4 ada-indent-broken)]))
      ("access_definition:2"
       (wisi-indent-action [ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken
       (wisi-anchored%- 4 ada-indent-broken)]))
      )
     (("actual_parameter_part:0"
       (wisi-indent-action [0 (wisi-anchored 1 1) (wisi-anchored 1 0)]))
      ("actual_parameter_part:1"
       (wisi-indent-action [0 (wisi-anchored 1 1) (wisi-anchored 1 0)]))
      )
     nil
     (("aggregate:0"
       (wisi-indent-action [0 (wisi-anchored 1 1) (wisi-anchored 1 0)]))
      ("aggregate:1"
       (wisi-indent-action [0 (wisi-anchored 1 1) (wisi-anchored 1 1) (wisi-anchored 1 1) (wisi-anchored 1 0)]))
      ("aggregate:2"
       (wisi-indent-action [0 (wisi-anchored 1 1) (wisi-anchored 1 0)]))
      ("aggregate:3"
       (wisi-indent-action [0 (wisi-anchored 1 1) (wisi-anchored 1 1) 0 0 (wisi-anchored 1 0)]))
      nil
      )
     nil
     nil
     (("array_type_definition:0"
       (wisi-indent-action [ada-indent-broken ada-indent-broken (wisi-anchored 2 1) (wisi-anchored 2 0) ada-indent-broken
       (wisi-anchored% 5 ada-indent-broken)]))
      ("array_type_definition:1"
       (wisi-indent-action [ada-indent-broken ada-indent-broken (wisi-anchored 2 1) (wisi-anchored 2 0) ada-indent-broken
       (wisi-anchored% 5 ada-indent-broken)]))
      )
     (("aspect_clause:0"
       (wisi-statement-action [1 statement-start 5 statement-end]))
      nil
      nil
      nil
      )
     (nil
      ("aspect_specification_opt:1"
       (wisi-indent-action [0 ada-indent-broken]))
      )
     (("assignment_statement:0"
       (progn
       (wisi-statement-action [1 statement-start 4 statement-end])
       (wisi-containing-action 1 3)
       (wisi-indent-action [0 ada-indent-broken (wisi-anchored%- 2 ada-indent-broken) 0])))
      )
     (nil
      ("association_opt:1"
       (wisi-indent-action [0 ada-indent-broken (wisi-anchored% 2 ada-indent-broken)]))
      nil
      ("association_opt:3"
       (wisi-indent-action [(wisi-hanging 0 ada-indent-broken)
       ada-indent-broken
       (wisi-hanging%- (wisi-anchored% 2 ada-indent-broken)
       (wisi-anchored% 2 (* 2 ada-indent-broken)))]))
      ("association_opt:4"
       (wisi-indent-action [(wisi-hanging 0 ada-indent-broken) ada-indent-broken 0]))
      ("association_opt:5"
       (wisi-indent-action [(wisi-hanging 0 ada-indent-broken)]))
      )
     nil
     (("asynchronous_select:0"
       (progn
       (wisi-statement-action [1 statement-start 3 motion 8 statement-end])
       (wisi-containing-action 1 2)
       (wisi-containing-action 1 5)
       (wisi-indent-action [0 [ada-indent ada-indent] 0 ada-indent-broken [ada-indent ada-indent] 0 0 0])))
      )
     (("at_clause:0"
       (wisi-statement-action [1 statement-start 6 statement-end]))
      )
     nil
     nil
     nil
     (("block_statement:0"
       (progn
       (wisi-statement-action [1 statement-start 3 motion 7 statement-end])
       (wisi-containing-action 1 2)
       (wisi-containing-action 1 4)
       (wisi-motion-action [1 3 [4 EXCEPTION WHEN] 7])
       (wisi-indent-action [0 [ada-indent ada-indent] 0 [ada-indent ada-indent] 0 0 0])))
      ("block_statement:1"
       (progn
       (wisi-statement-action [1 statement-start 5 statement-end])
       (wisi-containing-action 1 2)
       (wisi-motion-action [1 [2 EXCEPTION WHEN] 5])
       (wisi-indent-action [0 [ada-indent ada-indent] 0 0 0])))
      )
     nil
     nil
     (("case_expression:0"
       (wisi-indent-action [0 ada-indent-broken 0 ada-indent-when]))
      )
     (("case_expression_alternative:0"
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken
       (wisi-hanging (wisi-anchored% 1 ada-indent)
       (wisi-anchored% 1 (+ ada-indent ada-indent-broken)))]))
      )
     (nil
      ("case_expression_alternative_list:1"
       (wisi-indent-action [0 [0 ada-indent-when] 0]))
      )
     (("case_statement:0"
       (progn
       (wisi-statement-action [1 statement-start 3 motion 7 statement-end])
       (wisi-containing-action 1 4)
       (wisi-motion-action [1 [4 WHEN] 7])
       (wisi-indent-action [0 ada-indent-broken 0 ada-indent-when 0 0 0])))
      )
     (("case_statement_alternative:0"
       (progn
       (wisi-statement-action [1 motion])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken [ada-indent ada-indent]])))
      )
     nil
     nil
     nil
     nil
     nil
     nil
     nil
     nil
     nil
     nil
     (("component_clause:0"
       (progn
       (wisi-statement-action [1 statement-start 8 statement-end])
       (wisi-indent-action [0 0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      )
     nil
     (("component_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 7 statement-end])
       (wisi-containing-action 1 3)
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken (wisi-anchored% 4 ada-indent-broken)
       ada-indent-broken 0])))
      ("component_declaration:1"
       (progn
       (wisi-statement-action [1 statement-start 5 statement-end])
       (wisi-containing-action 1 3)
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      )
     nil
     nil
     (nil
      nil
      nil
      nil
      ("component_list:4"
       (wisi-statement-action [1 statement-start 2 statement-end]))
      )
     nil
     nil
     (("conditional_entry_call:0"
       (progn
       (wisi-statement-action [1 statement-start 3 motion 7 statement-end])
       (wisi-containing-action 1 2)
       (wisi-containing-action 1 4)
       (wisi-indent-action [0 [ada-indent ada-indent] 0 [ada-indent ada-indent] 0 0 0])))
      )
     nil
     nil
     nil
     nil
     nil
     (nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      ("declaration:9"
       (progn
       (wisi-statement-action [1 statement-start 6 statement-end])
       (wisi-containing-action 1 5)
       (wisi-indent-action [(wisi-hanging 0 ada-indent-broken) ada-indent-broken ada-indent-broken ada-indent-broken
       (wisi-anchored% 4 ada-indent-broken) 0])))
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      )
     nil
     nil
     nil
     (("delay_statement:0"
       (progn
       (wisi-statement-action [1 statement-start 4 statement-end])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken 0])))
      ("delay_statement:1"
       (progn
       (wisi-statement-action [1 statement-start 3 statement-end])
       (wisi-indent-action [0 ada-indent-broken 0])))
      )
     (("derived_type_definition:0"
       (progn
       (wisi-face-apply-action [3 font-lock-function-name-face font-lock-type-face])
       (wisi-indent-action [ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken
       [ada-indent-broken ada-indent-record-rel-type] 0])))
      ("derived_type_definition:1"
       (progn
       (wisi-face-apply-action [3 font-lock-function-name-face font-lock-type-face])
       (wisi-indent-action [ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken])))
      )
     nil
     nil
     nil
     nil
     nil
     nil
     (nil
      nil
      ("discriminant_part_opt:2"
       (wisi-indent-action [0 (wisi-anchored 1 1) (wisi-anchored 1 0)]))
      )
     nil
     nil
     (("elsif_expression_item:0"
       (progn
       (wisi-statement-action [1 motion 3 motion])
       (wisi-indent-action [0 ada-indent-broken 0 ada-indent])))
      )
     nil
     (("elsif_statement_item:0"
       (progn
       (wisi-statement-action [1 motion 3 motion])
       (wisi-indent-action [0 ada-indent-broken 0 [ada-indent ada-indent]])))
      )
     nil
     (("entry_body:0"
       (progn
       (wisi-statement-action [1 statement-start 4 motion 6 motion 8 motion 12 statement-end])
       (wisi-containing-action 1 3)
       (wisi-containing-action 1 7)
       (wisi-containing-action 1 9)
       (wisi-motion-action [1 4 6 8 12])
       (wisi-face-apply-action [2 nil font-lock-function-name-face 11 nil font-lock-function-name-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken (wisi-anchored% 4 ada-indent-broken)
       0 [ada-indent ada-indent] 0 [ada-indent ada-indent] 0 0 0])))
      )
     (("entry_body_formal_part:0"
       (wisi-indent-action [0 (wisi-anchored 1 1) (wisi-anchored 1 1) (wisi-anchored 1 1) (wisi-anchored 1 1)
       (wisi-anchored 1 0) ada-indent-broken]))
      nil
      )
     nil
     (("entry_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 2 motion 8 statement-end])
       (wisi-containing-action 2 7)
       (wisi-face-apply-action [3 nil font-lock-function-name-face])
       (wisi-indent-action [0 0 ada-indent-broken ada-indent-broken (wisi-anchored 4 1) (wisi-anchored 4 0)
       ada-indent-broken 0 0])))
      ("entry_declaration:1"
       (progn
       (wisi-statement-action [1 statement-start 2 motion 6 statement-end])
       (wisi-containing-action 2 4)
       (wisi-face-apply-action [3 nil font-lock-function-name-face])
       (wisi-indent-action [0 0 ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      )
     nil
     nil
     (("enumeration_representation_clause:0"
       (progn
       (wisi-statement-action [1 statement-start 5 statement-end])
       (wisi-face-apply-action [2 font-lock-function-name-face font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      )
     (("enumeration_type_definition:0"
       (wisi-indent-action [ada-indent-broken (wisi-anchored 1 1) (wisi-anchored 1 0)]))
      )
     nil
     nil
     (("exception_declaration:0"
       (wisi-statement-action [1 statement-start 4 statement-end]))
      )
     (("exception_handler:0"
       (progn
       (wisi-statement-action [1 motion])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken
       [ada-indent ada-indent]])))
      ("exception_handler:1"
       (progn
       (wisi-statement-action [1 motion])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken [ada-indent ada-indent]])))
      )
     nil
     nil
     (("exit_statement:0"
       (progn
       (wisi-statement-action [1 statement-start 5 statement-end])
       (wisi-indent-action [0 0 0 ada-indent-broken 0])))
      ("exit_statement:1"
       (wisi-statement-action [1 statement-start 3 statement-end]))
      )
     nil
     nil
     (("expression_function_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 2 statement-override 6 statement-end])
       (wisi-indent-action [0 0 ada-indent-broken ada-indent-broken 0 0])))
      )
     (("extended_return_object_declaration:0"
       (wisi-indent-action [0 0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken
       (wisi-anchored% 6 ada-indent-broken)]))
      ("extended_return_object_declaration:1"
       (wisi-indent-action [0 0 ada-indent-broken ada-indent-broken ada-indent-broken]))
      )
     nil
     (("extended_return_statement:0"
       (progn
       (wisi-statement-action [1 statement-start 3 motion 7 statement-end])
       (wisi-containing-action 1 4)
       (wisi-motion-action [1 3 7])
       (wisi-indent-action [0 ada-indent-broken 0 [ada-indent ada-indent] 0 0 0])))
      ("extended_return_statement:1"
       (progn
       (wisi-statement-action [1 statement-start 3 statement-end])))
      )
     nil
     (("formal_object_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 9 statement-end])
       (wisi-face-apply-action [5 font-lock-function-name-face font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken
       (wisi-anchored% 6 ada-indent-broken) ada-indent-broken 0])))
      ("formal_object_declaration:1"
       (progn
       (wisi-statement-action [1 statement-start 7 statement-end])
       (wisi-face-apply-action [5 font-lock-function-name-face font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      ("formal_object_declaration:2"
       (progn
       (wisi-statement-action [1 statement-start 8 statement-end])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken
       (wisi-anchored% 5 ada-indent-broken) ada-indent-broken 0])))
      ("formal_object_declaration:3"
       (progn
       (wisi-statement-action [1 statement-start 6 statement-end])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      )
     (("formal_part:0"
       (progn
       (wisi-statement-action [1 misc])
       (wisi-indent-action [0 (wisi-anchored 1 1) (wisi-anchored 1 0)])))
      )
     (("formal_subprogram_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 6 statement-end])
       (wisi-indent-action [0 0 ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      ("formal_subprogram_declaration:1"
       (progn
       (wisi-statement-action [1 statement-start 4 statement-end])
       (wisi-indent-action [0 0 ada-indent-broken 0])))
      ("formal_subprogram_declaration:2"
       (progn
       (wisi-statement-action [1 statement-start 7 statement-end])
       (wisi-indent-action [0 0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      ("formal_subprogram_declaration:3"
       (progn
       (wisi-statement-action [1 statement-start 6 statement-end])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      )
     (("formal_type_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 7 statement-end])
       (wisi-containing-action 1 5)
       (wisi-face-apply-action [2 nil font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      ("formal_type_declaration:1"
       (progn
       (wisi-statement-action [1 statement-start 7 statement-end])
       (wisi-face-apply-action [2 nil font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      ("formal_type_declaration:2"
       (progn
       (wisi-statement-action [1 statement-start 5 statement-end])
       (wisi-face-apply-action [2 nil font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      )
     nil
     (("formal_derived_type_definition:0"
       (wisi-face-apply-action [3 font-lock-function-name-face font-lock-type-face]))
      ("formal_derived_type_definition:1"
       (wisi-face-apply-action [3 font-lock-function-name-face font-lock-type-face]))
      )
     (("formal_package_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 9 statement-end])
       (wisi-face-apply-action [3 font-lock-function-name-face font-lock-function-name-face
       6 font-lock-function-name-face font-lock-function-name-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      )
     nil
     (("full_type_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 2 name 7 statement-end])
       (wisi-containing-action 1 5)
       (wisi-face-apply-action [2 nil font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken [ada-indent-broken ada-indent-broken] 0 0 0])))
      nil
      nil
      )
     (("function_specification:0"
       (progn
       (wisi-statement-action [1 statement-start 2 name])
       (wisi-containing-action 1 3)
       (wisi-face-apply-action [2 font-lock-function-name-face font-lock-function-name-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken])))
      )
     nil
     nil
     (("generic_formal_part:0"
       (progn
       (wisi-statement-action [1 statement-start])
       (wisi-indent-action [0 ada-indent])))
      ("generic_formal_part:1"
       (wisi-statement-action [1 statement-start]))
      )
     nil
     nil
     (("generic_instantiation:0"
       (progn
       (wisi-statement-action [1 statement-start 7 statement-end])
       (wisi-face-apply-action [2 font-lock-function-name-face font-lock-function-name-face
       5 font-lock-function-name-face font-lock-function-name-face])
       (wisi-indent-action [0 ada-indent-broken 0 ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      ("generic_instantiation:1"
       (progn
       (wisi-statement-action [1 statement-start 2 motion 8 statement-end])
       (wisi-face-apply-action [3 font-lock-function-name-face font-lock-function-name-face
       6 font-lock-function-name-face font-lock-function-name-face])
       (wisi-indent-action [0 0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      ("generic_instantiation:2"
       (progn
       (wisi-statement-action [1 statement-start 2 motion 8 statement-end])
       (wisi-face-apply-action [3 font-lock-function-name-face font-lock-function-name-face
       6 font-lock-function-name-face font-lock-function-name-face])
       (wisi-indent-action [0 0 ada-indent-broken 0 ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      )
     (("generic_package_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 2 motion 3 statement-end])
       (wisi-motion-action [1 2 3])
       (wisi-indent-action [[0 ada-indent] 0 0])))
      )
     (("generic_renaming_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 7 statement-end])
       (wisi-face-apply-action [3 font-lock-function-name-face font-lock-function-name-face
       5 font-lock-function-name-face font-lock-function-name-face])
       (wisi-indent-action [0 0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      ("generic_renaming_declaration:1"
       (progn
       (wisi-statement-action [1 statement-start  7 statement-end])
       (wisi-face-apply-action [3 font-lock-function-name-face font-lock-function-name-face
       5 font-lock-function-name-face font-lock-function-name-face])
       (wisi-indent-action [0 0 ada-indent-broken (ada-indent-renames 3) ada-indent-broken ada-indent-broken 0])))
      ("generic_renaming_declaration:2"
       (progn
       (wisi-statement-action [1 statement-start 7 statement-end])
       (wisi-face-apply-action [3 font-lock-function-name-face font-lock-function-name-face
       5 font-lock-function-name-face font-lock-function-name-face])
       (wisi-indent-action [0 0 ada-indent-broken (ada-indent-renames 3) ada-indent-broken ada-indent-broken 0])))
      )
     (("generic_subprogram_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 2 motion 4 statement-end])
       (wisi-motion-action [1 2 4])))
      )
     (("goto_label:0"
       (wisi-face-apply-action [2 nil font-lock-constant-face]))
      )
     (("handled_sequence_of_statements:0"
       (progn
       (wisi-statement-action [2 motion])
       (wisi-indent-action [[0 0] (- ada-indent) (- ada-indent-when ada-indent)])))
      nil
      )
     (nil
      ("identifier_list:1"
       (wisi-indent-action [0 0 ada-indent-broken]))
      )
     nil
     (("if_expression:0"
       (progn
       (wisi-statement-action [1 statement-start 3 motion 6 motion])
       (wisi-containing-action 1 2)
       (wisi-motion-action [1 3 [5 ELSIF THEN] 6])
       (wisi-indent-action [0 ada-indent-broken 0 ada-indent 0 0 ada-indent])))
      ("if_expression:1"
       (progn
       (wisi-statement-action [1 statement-start 3 motion])
       (wisi-containing-action 1 2)
       (wisi-motion-action [1 3 [5 ELSIF THEN]])
       (wisi-indent-action [0 ada-indent-broken 0 ada-indent 0])))
      ("if_expression:2"
       (progn
       (wisi-statement-action [1 statement-start 3 motion 5 motion])
       (wisi-containing-action 1 2)
       (wisi-motion-action [1 3 5])
       (wisi-indent-action [0 ada-indent-broken 0 ada-indent 0 ada-indent])))
      ("if_expression:3"
       (progn
       (wisi-statement-action [1 statement-start 3 motion])
       (wisi-containing-action 1 2)
       (wisi-motion-action [1 3])
       (wisi-indent-action [0 ada-indent-broken 0 ada-indent])))
      )
     (("if_statement:0"
       (progn
       (wisi-statement-action [1 statement-start 3 motion 6 motion 10 statement-end])
       (wisi-containing-action 1 2)
       (wisi-containing-action 1 4)
       (wisi-containing-action 1 5)
       (wisi-containing-action 1 7)
       (wisi-motion-action [1 3 [5 ELSIF THEN] 6 10])
       (wisi-indent-action [0 (wisi-hanging% ada-indent-broken (* 2 ada-indent-broken)) 0 [ada-indent ada-indent] 0 0
       [ada-indent ada-indent] 0 0 0])))
      ("if_statement:1"
       (progn
       (wisi-statement-action [1 statement-start 3 motion 8 statement-end])
       (wisi-containing-action 1 2)
       (wisi-containing-action 1 4)
       (wisi-containing-action 1 5)
       (wisi-motion-action [1 3 [5 ELSIF THEN] 8])
       (wisi-indent-action [0 (wisi-hanging% ada-indent-broken (* 2 ada-indent-broken)) 0
       [ada-indent ada-indent] 0 0 0 0])))
      ("if_statement:2"
       (progn
       (wisi-statement-action [1 statement-start 3 motion 5 motion 9 statement-end])
       (wisi-containing-action 1 2)
       (wisi-containing-action 1 4)
       (wisi-containing-action 1 6)
       (wisi-motion-action [1 3 5 9])
       (wisi-indent-action [0 (wisi-hanging% ada-indent-broken (* 2 ada-indent-broken)) 0 [ada-indent ada-indent] 0
       [ada-indent ada-indent] 0 0 0])))
      ("if_statement:3"
       (progn
       (wisi-statement-action [1 statement-start 3 motion 7 statement-end])
       (wisi-containing-action 1 2)
       (wisi-containing-action 1 4)
       (wisi-motion-action [1 3 7])
       (wisi-indent-action [0 (wisi-hanging% ada-indent-broken (* 2 ada-indent-broken)) 0
       [ada-indent ada-indent] 0 0 0])))
      )
     (("incomplete_type_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 6 statement-end])
       (wisi-face-apply-action [2 nil font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      ("incomplete_type_declaration:1"
       (progn
       (wisi-statement-action [1 statement-start 3 statement-end])
       (wisi-face-apply-action [2 nil font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken 0])))
      )
     (("index_constraint:0"
       (wisi-indent-action [0 (wisi-anchored 1 1) (wisi-anchored 1 0)]))
      )
     nil
     nil
     (("interface_list:0"
       (wisi-face-apply-action [1 font-lock-function-name-face font-lock-type-face]))
      ("interface_list:1"
       (wisi-face-apply-action [3 font-lock-function-name-face font-lock-type-face]))
      )
     nil
     (("iteration_scheme:0"
       (wisi-indent-action [0 [ada-indent-broken ada-indent-broken]]))
      ("iteration_scheme:1"
       (wisi-indent-action [0 [ada-indent-broken ada-indent-broken]]))
      )
     (("iterator_specification:0"
       (wisi-face-remove-action [4]))
      ("iterator_specification:1"
       (wisi-face-remove-action [3]))
      nil
      nil
      nil
      nil
      )
     nil
     (("label:0"
       (wisi-indent-action [[ada-indent-label 0]]))
      ("label:1"
       (progn
       (wisi-statement-action [1 misc])
       (wisi-indent-action [ada-indent-label 0])))
      )
     nil
     nil
     nil
     (("loop_statement:0"
       (progn
       (wisi-statement-action [1 statement-start 2 motion 7 statement-end])
       (wisi-containing-action 1 3)
       (wisi-motion-action [1 2 7])
       (wisi-indent-action [0 0 [ada-indent ada-indent] 0 0 0 0])))
      ("loop_statement:1"
       (progn
       (wisi-statement-action [1 statement-start 6 statement-end])
       (wisi-containing-action 1 2)
       (wisi-indent-action [0 [ada-indent ada-indent] 0 0 0 0])))
      )
     nil
     nil
     nil
     nil
     nil
     nil
     (("name:0"
       (wisi-face-mark-action [1]))
      nil
      ("name:2"
       (wisi-indent-action [0
       (wisi-anchored% 1 ada-indent-broken)
       (wisi-hanging (wisi-anchored 2 1)
       (wisi-anchored 2 (1+ ada-indent-broken)))
       (wisi-anchored 2 0)]))
      nil
      nil
      ("name:5"
       (progn
       (wisi-statement-action [1 misc])
       (wisi-containing-action 1 2)
       (wisi-indent-action [0 (if ada-indent-hanging-rel-exp
       (wisi-anchored 1 ada-indent-broken)
       (wisi-anchored% 1 ada-indent-broken))])))
      nil
      nil
      )
     nil
     nil
     (("null_exclusion_opt_name_type:0"
       (wisi-face-apply-action [1 nil font-lock-type-face]))
      ("null_exclusion_opt_name_type:1"
       (wisi-face-apply-action [1 font-lock-function-name-face font-lock-type-face]))
      ("null_exclusion_opt_name_type:2"
       (wisi-face-apply-action [3 nil font-lock-type-face]))
      ("null_exclusion_opt_name_type:3"
       (wisi-face-apply-action [3 font-lock-function-name-face font-lock-type-face]))
      )
     (("null_procedure_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 2 statement-override 6 statement-end])
       (wisi-indent-action [0 0 ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      )
     (("object_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 9 statement-end])
       (wisi-containing-action 1 7)
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken
       (wisi-anchored%- 6 ada-indent-broken) ada-indent-broken 0])))
      ("object_declaration:1"
       (progn
       (wisi-statement-action [1 statement-start 7 statement-end])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      ("object_declaration:2"
       (progn
       (wisi-statement-action [1 statement-start 9 statement-end])
       (wisi-containing-action 1 5)
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken
       (wisi-anchored% 6 ada-indent-broken) ada-indent-broken 0])))
      ("object_declaration:3"
       (progn
       (wisi-statement-action [1 statement-start 7 statement-end])
       (wisi-containing-action 1 5)
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      ("object_declaration:4"
       (progn
       (wisi-statement-action [1 statement-start 9 statement-end])
       (wisi-containing-action 1 5)
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken 0 ada-indent-broken
       (wisi-anchored% 6 ada-indent-broken) ada-indent-broken 0])))
      ("object_declaration:5"
       (progn
       (wisi-statement-action [1 statement-start 7 statement-end])
       (wisi-containing-action 1 5)
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken 0 ada-indent-broken 0])))
      nil
      nil
      )
     (("object_renaming_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 8 statement-end])
       (wisi-face-apply-action [4 font-lock-function-name-face font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      ("object_renaming_declaration:1"
       (progn
       (wisi-statement-action [1 statement-start 7 statement-end])
       (wisi-containing-action 1 3)
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      ("object_renaming_declaration:2"
       (progn
       (wisi-statement-action [1 statement-start 7 statement-end])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      )
     (("overriding_indicator_opt:0"
       (wisi-statement-action [1 statement-start 2 statement-override]))
      ("overriding_indicator_opt:1"
       (wisi-statement-action [1 statement-start]))
      nil
      )
     (("package_body:0"
       (progn
       (wisi-statement-action [1 statement-start 3 name 5 motion 7 motion 11 statement-end])
       (wisi-containing-action 1 6)
       (wisi-containing-action 1 8)
       (wisi-motion-action [1 5 7 [8 EXCEPTION WHEN] 11])
       (wisi-face-apply-action [3 font-lock-function-name-face font-lock-function-name-face
       10 font-lock-function-name-face font-lock-function-name-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken 0 0 [ada-indent ada-indent]
       0 [ada-indent ada-indent] 0 ada-indent-broken 0])))
      ("package_body:1"
       (progn
       (wisi-statement-action [1 statement-start 3 name 5 motion 9 statement-end])
       (wisi-containing-action 1 6)
       (wisi-motion-action [1 5 9])
       (wisi-face-apply-action [3 font-lock-function-name-face font-lock-function-name-face
       8 font-lock-function-name-face font-lock-function-name-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken 0 [ada-indent ada-indent] 0 0 0])))
      )
     (("package_body_stub:0"
       (progn
       (wisi-statement-action [1 statement-start 7 statement-end])
       (wisi-face-apply-action [3 font-lock-function-name-face font-lock-function-name-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken 0 ada-indent-broken ada-indent-broken 0])))
      )
     (("package_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 2 statement-end])
       (wisi-motion-action [[1 PRIVATE] 2])))
      )
     (("package_renaming_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 6 statement-end])
       (wisi-face-apply-action [2 font-lock-function-name-face font-lock-function-name-face
       4 font-lock-function-name-face font-lock-function-name-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      )
     (("package_specification:0"
       (progn
       (wisi-statement-action [1 statement-start 2 name 4 motion 6 motion])
       (wisi-containing-action 1 4)
       (wisi-containing-action 4 5)
       (wisi-containing-action 1 7)
       (wisi-motion-action [1 4 6])
       (wisi-face-apply-action [2 font-lock-function-name-face font-lock-function-name-face
       9 font-lock-function-name-face font-lock-function-name-face])
       (wisi-indent-action [0 ada-indent-broken 0 0 [ada-indent ada-indent] 0 [ada-indent ada-indent] 0 0])))
      ("package_specification:1"
       (progn
       (wisi-statement-action [1 statement-start 2 name 4 motion])
       (wisi-containing-action 1 4)
       (wisi-containing-action 4 5)
       (wisi-motion-action [1 4])
       (wisi-face-apply-action [2 font-lock-function-name-face font-lock-function-name-face
       7 font-lock-function-name-face font-lock-function-name-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken 0 [ada-indent ada-indent] 0 0])))
      )
     (("parameter_and_result_profile:0"
       (wisi-indent-action [0 (ada-indent-return 1 0)]))
      nil
      )
     nil
     (nil
      ("parameter_specification:1"
       (progn
       (wisi-face-apply-action [6 font-lock-function-name-face font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken
       ada-indent-broken ada-indent-broken (wisi-anchored% 7 ada-indent-broken)])))
      ("parameter_specification:2"
       (progn
       (wisi-face-apply-action [6 font-lock-function-name-face font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken
       ada-indent-broken])))
      ("parameter_specification:3"
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken
       (wisi-anchored% 5 ada-indent-broken)]))
      ("parameter_specification:4"
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken]))
      )
     (nil
      ("parameter_specification_list:1"
       (wisi-statement-action [2 motion]))
      )
     (("paren_expression:0"
       (wisi-indent-action [0
       (wisi-hanging (wisi-anchored 1 1)
       (wisi-anchored 1 (1+ ada-indent-broken)))
       (wisi-anchored 1 0)]))
      ("paren_expression:1"
       (wisi-indent-action [0 (wisi-anchored 1 1) (wisi-anchored 1 0)]))
      ("paren_expression:2"
       (wisi-indent-action [0 (wisi-anchored 1 1) (wisi-anchored 1 0)]))
      )
     (("pragma_g:0"
       (progn
       (wisi-statement-action [1 statement-start 6 statement-end])
       (wisi-face-apply-action [2 nil font-lock-function-name-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken (wisi-anchored 3 1) (wisi-anchored 3 0) 0])))
      ("pragma_g:1"
       (progn
       (wisi-statement-action [1 statement-start 6 statement-end])
       (wisi-face-apply-action [2 nil font-lock-function-name-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken (wisi-anchored 3 1) (wisi-anchored 3 0) 0])))
      ("pragma_g:2"
       (progn
       (wisi-statement-action [1 statement-start 3 statement-end])
       (wisi-face-apply-action [2 nil font-lock-function-name-face])
       (wisi-indent-action [0 ada-indent-broken 0])))
      )
     (("primary:0"
       (wisi-face-apply-action [1 nil font-lock-constant-face]))
      nil
      ("primary:2"
       (wisi-indent-action [(ada-indent-aggregate)]))
      nil
      ("primary:4"
       (wisi-face-apply-action [2 font-lock-function-name-face font-lock-type-face]))
      )
     (("private_extension_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 12 statement-end])
       (wisi-face-apply-action [2 nil font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken
       ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken 0 0])))
      )
     (("private_type_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 8 statement-end])
       (wisi-face-apply-action [2 nil font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken 0 ada-indent-broken ada-indent-broken 0 0])))
      )
     (("procedure_call_statement:0"
       (progn
       (wisi-statement-action [1 statement-start 2 statement-end])
       (wisi-indent-action [(wisi-hanging 0 ada-indent-broken) 0])))
      )
     (("procedure_specification:0"
       (progn
       (wisi-statement-action [1 statement-start 2 name])
       (wisi-containing-action 1 3)
       (wisi-face-apply-action [2 font-lock-function-name-face font-lock-function-name-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken])))
      )
     nil
     (("protected_body:0"
       (progn
       (wisi-statement-action [1 statement-start 3 name 5 motion 9 statement-end])
       (wisi-containing-action 1 6)
       (wisi-motion-action [1 5 9])
       (wisi-face-apply-action [3 nil font-lock-type-face 8 nil font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken 0 0 ada-indent 0 0 0])))
      )
     (("protected_body_stub:0"
       (progn
       (wisi-statement-action [1 statement-start 7 statement-end])
       (wisi-face-apply-action [3 nil font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken 0])))
      )
     (("protected_definition:0"
       (progn
       (wisi-statement-action [2 motion])
       (wisi-face-apply-action [5 nil font-lock-type-face])
       (wisi-indent-action [[ada-indent ada-indent] 0 [ada-indent ada-indent] 0 0])))
      ("protected_definition:1"
       (progn
       (wisi-face-apply-action [3 nil font-lock-type-face])
       (wisi-indent-action [[ada-indent ada-indent] 0 0])))
      )
     nil
     nil
     nil
     nil
     (("protected_type_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 3 name 6 motion 9 motion 11 statement-end])
       (wisi-containing-action 1 10)
       (wisi-motion-action [1 6 [10 PRIVATE] 11])
       (wisi-face-apply-action [3 nil font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken 0 0
       ada-indent-broken ada-indent-broken ada-indent-broken 0 0])))
      ("protected_type_declaration:1"
       (progn
       (wisi-statement-action [1 statement-start 3 name 6 motion 8 statement-end])
       (wisi-containing-action 1 7)
       (wisi-motion-action [1 6 [7 PRIVATE] 8])
       (wisi-face-apply-action [3 nil font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken 0 [0 ada-indent] 0 0])))
      )
     (("qualified_expression:0"
       (progn
       (wisi-face-apply-action [1 font-lock-function-name-face font-lock-type-face])
       (wisi-indent-action [0 0 (if ada-indent-hanging-rel-exp
       (wisi-anchored 1 ada-indent-broken)
       (wisi-anchored% 1 ada-indent-broken))])))
      )
     (("quantified_expression:0"
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken (wisi-anchored% 4 ada-indent-broken)]))
      )
     nil
     (nil
      ("raise_expression:1"
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken (wisi-anchored% 3 ada-indent-broken)]))
      )
     (("raise_statement:0"
       (wisi-statement-action [1 statement-start 2 statement-end]))
      ("raise_statement:1"
       (progn
       (wisi-statement-action [1 statement-start 4 motion 5 statement-end])
       (wisi-containing-action 1 4)
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken (wisi-anchored% 3 ada-indent-broken) 0])))
      ("raise_statement:2"
       (progn
       (wisi-statement-action [1 statement-start 3 statement-end])
       (wisi-indent-action [0 ada-indent-broken 0])))
      )
     (("range_g:0"
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken (wisi-anchored 4 1) (wisi-anchored 4 0)]))
      nil
      nil
      )
     nil
     nil
     (("record_definition:0"
       (wisi-indent-action [(ada-indent-record 'TYPE 1 0)
       [(ada-indent-record 'TYPE 1 ada-indent) (ada-indent-record 'TYPE 1 ada-indent)]
       (ada-indent-record 'TYPE 1 0)
       0]))
      ("record_definition:1"
       (wisi-indent-action [ada-indent-broken ada-indent-broken]))
      )
     (("record_representation_clause:0"
       (progn
       (wisi-statement-action [1 statement-start 5 statement-end])
       (wisi-face-apply-action [2 font-lock-function-name-face font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken
       (ada-indent-record 1 4 0)
       (ada-indent-record 1 4 ada-indent)
       (ada-indent-record 1 4 ada-indent)
       (ada-indent-record 1 4 0)
       0 0])))
      )
     nil
     nil
     nil
     nil
     nil
     nil
     nil
     nil
     (("requeue_statement:0"
       (wisi-statement-action [1 statement-start 5 statement-end]))
      ("requeue_statement:1"
       (wisi-statement-action [1 statement-start 3 statement-end]))
      )
     (("result_profile:0"
       (progn
       (wisi-face-apply-action [3 font-lock-function-name-face font-lock-type-face])
       (wisi-indent-action* 1
       [0
       (wisi-anchored* 1 ada-indent-broken)
       (wisi-anchored* 1 ada-indent-broken)])))
      ("result_profile:1"
       (wisi-indent-action* 1 [0 (wisi-anchored*- 1 ada-indent-broken)]))
      )
     nil
     (("selected_component:0"
       (wisi-face-extend-action 1 3))
      nil
      nil
      nil
      )
     (("selective_accept:0"
       (progn
       (wisi-statement-action [1 statement-start 3 motion 7 statement-end])
       (wisi-containing-action 1 2)
       (wisi-containing-action 1 4)
       (wisi-motion-action [1 [2 OR WHEN] 3 7])
       (wisi-indent-action [[0 ada-indent] [0 ada-indent] 0 [ada-indent ada-indent] 0 0 0])))
      ("selective_accept:1"
       (progn
       (wisi-statement-action [1 statement-start 5 statement-end])
       (wisi-motion-action [1 [2 OR WHEN] 5])
       (wisi-indent-action [[0 ada-indent] [0 ada-indent] 0 0 0])))
      )
     (("select_alternative:0"
       (progn
       (wisi-statement-action [1 motion])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent ada-indent])))
      nil
      ("select_alternative:2"
       (progn
       (wisi-statement-action [1 motion])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent])))
      nil
      ("select_alternative:4"
       (progn
       (wisi-statement-action [1 motion 4 statement-start 5 statement-end])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent 0])))
      ("select_alternative:5"
       (wisi-statement-action [1 statement-start 2 statement-end]))
      )
     (("select_alternative_list:0"
       (wisi-indent-action [ada-indent]))
      ("select_alternative_list:1"
       (progn
       (wisi-statement-action [2 motion])
       (wisi-indent-action [0 0 ada-indent])))
      )
     nil
     nil
     nil
     nil
     nil
     (("simple_return_statement:0"
       (wisi-statement-action [1 statement-start 2 statement-end]))
      ("simple_return_statement:1"
       (progn
       (wisi-statement-action [1 statement-start 3 statement-end])
       (wisi-indent-action [0 ada-indent-broken 0])))
      )
     (("simple_statement:0"
       (wisi-statement-action [1 statement-start 2 statement-end]))
      nil
      nil
      ("simple_statement:3"
       (progn
       (wisi-statement-action [1 statement-start 3 statement-end])
       (wisi-face-apply-action [2 nil font-lock-constant-face])))
      nil
      nil
      nil
      nil
      ("simple_statement:8"
       (wisi-statement-action [1 statement-start 3 statement-end]))
      nil
      nil
      )
     (("single_protected_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 2 name 4 motion 7 motion 9 statement-end])
       (wisi-containing-action 1 8)
       (wisi-motion-action [1 4 7 [8 PRIVATE] 9])
       (wisi-face-apply-action [2 nil font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken 0 0 ada-indent-broken ada-indent-broken ada-indent-broken 0 0])))
      ("single_protected_declaration:1"
       (progn
       (wisi-statement-action [1 statement-start 2 name 4 motion 6 statement-end])
       (wisi-containing-action 1 5)
       (wisi-motion-action [1 4 [5 PRIVATE] 6])
       (wisi-face-apply-action [2 nil font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken 0 [0 ada-indent] 0 0])))
      )
     (("single_task_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 4 motion 7 motion 11 statement-end])
       (wisi-containing-action 1 8)
       (wisi-motion-action [1 4 [8 PRIVATE] 11])
       (wisi-face-apply-action [2 nil font-lock-type-face 9 nil font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken 0 0 ada-indent-broken ada-indent-broken ada-indent-broken 0 0 0 0])))
      ("single_task_declaration:1"
       (progn
       (wisi-statement-action [1 statement-start 4 motion 8 statement-end])
       (wisi-containing-action 1 5)
       (wisi-motion-action [1 4 [5 PRIVATE] 8])
       (wisi-face-apply-action [2 nil font-lock-type-face 6 nil font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken 0 [0 ada-indent] 0 0 0 0])))
      ("single_task_declaration:2"
       (progn
       (wisi-statement-action [1 statement-start 4 statement-end])
       (wisi-face-apply-action [2 nil font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken 0 0])))
      )
     nil
     (("subprogram_body:0"
       (progn
       (wisi-statement-action [1 statement-start 2 statement-override 4 motion 6 motion 10 statement-end])
       (wisi-containing-action 2 4)
       (wisi-containing-action 4 5)
       (wisi-containing-action 2 7)
       (wisi-motion-action [1 [2 FUNCTION PROCEDURE] 4 6 10])
       (wisi-face-apply-action [9 font-lock-function-name-face font-lock-function-name-face])
       (wisi-indent-action [0 [0 ada-indent] 0 0 [ada-indent ada-indent]
       0 [ada-indent ada-indent] 0 ada-indent-broken 0])))
      )
     (("subprogram_body_stub:0"
       (progn
       (wisi-statement-action [1 statement-start 2 statement-override 6 statement-end])
       (wisi-indent-action [0 0 0 ada-indent-broken ada-indent-broken 0])))
      )
     (("subprogram_declaration:0"
       (wisi-statement-action [1 statement-start 2 statement-override 4 statement-end]))
      )
     (("subprogram_default:0"
       (wisi-face-apply-action [1 font-lock-function-name-face font-lock-function-name-face]))
      nil
      nil
      )
     (("subprogram_renaming_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 2 statement-override 6 statement-end])
       (wisi-face-apply-action [4 font-lock-function-name-face font-lock-function-name-face])
       (wisi-indent-action [0 0 (ada-indent-renames 2) ada-indent-broken ada-indent-broken 0])))
      )
     nil
     (("subtype_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 6 statement-end])
       (wisi-face-apply-action [2 nil font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken 0 0])))
      )
     (("subtype_indication:0"
       (wisi-face-apply-action [3 font-lock-function-name-face font-lock-type-face]))
      ("subtype_indication:1"
       (wisi-face-apply-action [3 font-lock-function-name-face font-lock-type-face]))
      ("subtype_indication:2"
       (wisi-face-apply-action [1 font-lock-function-name-face font-lock-type-face]))
      ("subtype_indication:3"
       (wisi-face-apply-action [1 font-lock-function-name-face font-lock-type-face]))
      )
     (("subunit:0"
       (progn
       (wisi-statement-action [1 statement-start 5 motion])
       (wisi-indent-action [0 ada-indent-broken (wisi-anchored 2 1) (wisi-anchored 2 0) 0])))
      )
     (("task_body:0"
       (progn
       (wisi-statement-action [1 statement-start 3 name 5 motion 7 motion 11 statement-end])
       (wisi-containing-action 1 6)
       (wisi-containing-action 1 8)
       (wisi-motion-action [1 5 7 11])
       (wisi-face-apply-action [3 nil font-lock-type-face 10 nil font-lock-type-face])
       (wisi-indent-action [0 0 ada-indent-broken 0 0 [ada-indent ada-indent]
       0 [ada-indent ada-indent] 0 0 0])))
      )
     (("task_body_stub:0"
       (progn
       (wisi-statement-action [1 statement-start 7 statement-end])
       (wisi-face-apply-action [3 nil font-lock-type-face])
       (wisi-indent-action [0 0 ada-indent-broken 0 ada-indent-broken ada-indent-broken 0])))
      )
     (("task_definition:0"
       (progn
       (wisi-statement-action [2 motion])
       (wisi-containing-action 2 3)
       (wisi-indent-action [[ada-indent ada-indent] 0 [ada-indent ada-indent]])))
      ("task_definition:1"
       (wisi-indent-action [[ada-indent ada-indent]]))
      )
     (("task_type_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 3 name 6 motion 9 motion 13 statement-end])
       (wisi-containing-action 1 10)
       (wisi-motion-action [1 6 9 [10 PRIVATE] 13])
       (wisi-face-apply-action [3 nil font-lock-type-face 12 nil font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken 0 0
       ada-indent-broken ada-indent-broken ada-indent-broken 0 0 0 0])))
      ("task_type_declaration:1"
       (progn
       (wisi-statement-action [1 statement-start 3 name 6 motion 10 statement-end])
       (wisi-containing-action 1 7)
       (wisi-face-apply-action [3 nil font-lock-type-face 9 nil font-lock-type-face])
       (wisi-motion-action [1 6 [7 PRIVATE] 10])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken 0 [0 ada-indent] 0 0 0 0])))
      ("task_type_declaration:2"
       (progn
       (wisi-statement-action [1 statement-start 3 name 6 statement-end])
       (wisi-face-apply-action [3 nil font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-broken 0 0])))
      )
     nil
     nil
     nil
     (("timed_entry_call:0"
       (progn
       (wisi-statement-action [1 statement-start 3 motion 6 statement-end])
       (wisi-containing-action 1 2)
       (wisi-containing-action 1 4)
       (wisi-indent-action [0 [ada-indent ada-indent] 0 [ada-indent ada-indent] 0 0 0])))
      )
     nil
     nil
     (nil
      ("type_definition:1"
       (wisi-indent-action [ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken]))
      ("type_definition:2"
       (wisi-indent-action [ada-indent-broken ada-indent-broken]))
      ("type_definition:3"
       (wisi-indent-action [ada-indent-broken ada-indent-broken ada-indent-broken]))
      ("type_definition:4"
       (wisi-indent-action [ada-indent-broken ada-indent-broken ada-indent-broken]))
      ("type_definition:5"
       (wisi-indent-action [ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken ada-indent-broken]))
      nil
      ("type_definition:7"
       (wisi-indent-action [ada-indent-broken 0]))
      nil
      nil
      nil
      )
     (("variant_part:0"
       (progn
       (wisi-statement-action [1 statement-start 7 statement-end])
       (wisi-indent-action [0 ada-indent-broken 0 ada-indent-when 0 0 0])))
      )
     nil
     (("variant:0"
       (progn
       (wisi-statement-action [1 motion])
       (wisi-indent-action [0 (wisi-hanging 0 ada-indent-broken) ada-indent [ada-indent ada-indent]])))
      )
     nil
     (("use_clause:0"
       (progn
       (wisi-statement-action [1 statement-start 3 statement-end])
       (wisi-face-apply-list-action [2 font-lock-function-name-face font-lock-function-name-face])
       (wisi-indent-action [0 ada-indent-use 0])))
      ("use_clause:1"
       (progn
       (wisi-statement-action [1 statement-start 5 statement-end])
       (wisi-face-apply-list-action [4 font-lock-function-name-face font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-use 0])))
      ("use_clause:2"
       (progn
       (wisi-statement-action [1 statement-start 4 statement-end])
       (wisi-face-apply-list-action [3 font-lock-function-name-face font-lock-type-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-use 0])))
      )
     (("with_clause:0"
       (progn
       (wisi-statement-action [1 statement-start 5 statement-end])
       (wisi-face-apply-list-action [4 font-lock-function-name-face font-lock-function-name-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-broken ada-indent-with 0])))
      ("with_clause:1"
       (progn
       (wisi-statement-action [1 statement-start 4 statement-end])
       (wisi-face-apply-list-action [3 font-lock-function-name-face font-lock-function-name-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-with 0])))
      ("with_clause:2"
       (progn
       (wisi-statement-action [1 statement-start 4 statement-end])
       (wisi-face-apply-list-action [3 font-lock-function-name-face font-lock-function-name-face])
       (wisi-indent-action [0 ada-indent-broken ada-indent-with 0])))
      ("with_clause:3"
       (progn
       (wisi-statement-action [1 statement-start 3 statement-end])
       (wisi-face-apply-list-action [2 font-lock-function-name-face font-lock-function-name-face])
       (wisi-indent-action [0 ada-indent-with 0])))
      )
     )))

(provide 'ada_grammar-process)
