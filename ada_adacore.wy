;;; WisiToken grammar for Ada
;;
;; Author: Stephen Leake <stephe-leake@stephe-leake.org>
;; Maintainer: Stephen Leake <stephe-leake@stephe-leake.org>
;; Created: Sept 2012
;; Keywords: syntax
;;
;; Translated from AdaCore libadalang grammar.py, lexer.py version 22.2
;; https://raw.githubusercontent.com/AdaCore/libadalang/22.2/ada/grammar.py
;; https://raw.githubusercontent.com/AdaCore/libadalang/22.2/ada/lexer.py

%generate LR1 Ada_Emacs text_rep re2c Process
;; %generate Packrat_Gen Ada_Emacs re2c Process
%generate Packrat_Proc Ada_Emacs re2c Process

%case_insensitive
%start compilation

;;; from lexer.py rules

%keyword Abort "abort"
%keyword Else "else"
%keyword New "new"
%keyword Return "return"
%keyword Abs "abs"
%keyword Elsif_g "elsif"
%keyword Not "not"
%keyword Reverse "reverse"
%keyword End_g "end"
%keyword Null "null"
%keyword Accept "accept"
%keyword Entry "entry"
%keyword Select "select"
%keyword Exception "exception"
%keyword Of "of"
%keyword Separate "separate"
%keyword Exit "exit"
%keyword Or "or"
%keyword All "all"
%keyword Others "others"
%keyword Subtype "subtype"
%keyword And "and"
%keyword For "for"
%keyword Out "out"
%keyword Array "array"
%keyword Function "function"
%keyword At "at"
%keyword Generic "generic"
%keyword Package "package"
%keyword Task "task"
%keyword Begin "begin"
%keyword Goto "goto"
%keyword Pragma "pragma"
%keyword Terminate "terminate"
%keyword Body "body"
%keyword Private "private"
%keyword Then "then"
%keyword If_g "if"
%keyword Procedure "procedure"
%keyword Type "type"
%keyword Case "case"
%keyword In_g "in"
%keyword Constant "constant"
%keyword Is "is"
%keyword Raise "raise"
%keyword Use "use"
%keyword Declare "declare"
%keyword Delay "delay"
%keyword Limited "limited"
%keyword Record "record"
%keyword When "when"
%keyword Loop "loop"
%keyword Rem "rem"
%keyword While "while"
%keyword Renames "renames"
%keyword With "with"
%keyword Do "do"
%keyword Xor "xor"

%token <left-paren> ParOpen      "("
%token <right-paren> ParClose    ")"
%token <left-paren> BrackOpen    "["
%token <right-paren> BrackClose  "]"

%token <punctuation> Semicolon   ";"
%token <punctuation> Colon       ":"
%token <punctuation> Comma       ","
%token <punctuation> Doubledot   ".."
%token <punctuation> Assign      ":="
%token <punctuation> Dot         "."
%token <punctuation> Diamond     "<>"
%token <punctuation> Lte         "<="
%token <punctuation> Gte         ">="
%token <punctuation> Arrow       "=>"
%token <punctuation> Equal       "="
%token <punctuation> Lt          "<"
%token <punctuation> Gt          ">"
%token <punctuation> Plus        "+"
%token <punctuation> Minus       "-"
%token <punctuation> Power       "**"
%token <punctuation> Mult        "*"
%token <punctuation> Amp         "&"
%token <punctuation> Notequal    "/="
%token <punctuation> Divide      "/"
%token <punctuation> Tick        "'"
%token <punctuation> Pipe        "|"
%token <punctuation> Pipe        "!"
%token <punctuation> LabelStart  "<<"
%token <punctuation> LabelEnd    ">>"
%token <punctuation> Target      "@"

%token <regexp> NUMERIC_LITERAL
    %[ ([0-9])|([0-9_]+([.][0-9]+)?([eE[0-9_-]+)?)|([0-9]+"#"[0-9a-fA-F._-]+"#") ]%
  "1234567890"

%token <symbol> IDENTIFIER
    %[ ([$a-zA-Z\x80-\U0010FFFF]|GNAT_Char_Coding)([0-9a-zA-Z_\x80-\U0010FFFF]|GNAT_Char_Coding)* ]%
  "A_Bogus_Identifier"

;; \x22 is "
%token <string-double-one-line> STRING
    %[ (["]([\x20-\x21\x23-\U0010FFFF]|GNAT_Char_Coding)*["])+ ]% '""'
%escape_delimiter_doubled STRING_LITERAL

%token <string-single-one-line> CHARACTER_LITERAL %[ "'"([\x20-\U0010FFFF]|GNAT_Char_Coding)"'" ]% "' '"


%token <regexp> TICK_2
    %[ "'" / "('"([\x20-\U0010FFFF]|GNAT_Char_Coding)"'" ]%
  "'"
tick : Tick | TICK_2 ;

;; from grammar.py
parent_list : static_name {'and' static_name} ;

protected_type_decl : 'protected' 'type' defining_id [discriminant_part] aspect_spec 'is'
      ['new' parent_list 'with'] protected_def ';' ;

protected_op : subp_decl | entry_decl | aspect_clause | pragma ;

protected_el : protected_op | component_decl ;

protected_def : {protected_op} ['private' {protected_el}] 'end' [identifier] ;

protected_decl : 'protected' defining_id aspect_spec 'is' ['new' parent_list 'with'] protected_def ';' ;

task_item : entry_decl | aspect_clause | pragma ;

task_def : 'is' ['new' parent_list 'with'] {task_item} ['private' {task_item}] 'end' [identifier] ;

task_type_decl : 'task' 'type' defining_id [discriminant_part] aspect_spec [task_def] ';' ;

subtype_decl : 'subtype' defining_id 'is' subtype_indication aspect_spec ';' ;

interface_type_def : ['limited' | 'task' | 'protected' | 'synchronized'] 'interface' ['and' parent_list] ;

unconstrained_index : subtype_indication 'range' Diamond ;

array_type_def : '(' (unconstrained_index {',' unconstrained_index} | constraint_list) ')' 'of' component_def ;

discrete_subtype_definition : discrete_range | subtype_indication ;

constraint_list : discrete_subtype_definition {',' discrete_subtype_definition} ;

signed_int_type_def : range_spec ;

mod_int_type_def : 'mod' sexpr_or_box ;

derived_type_def : 'abstract' 'limited' 'synchronized' 'new' subtype_indication ['and' parent_list]
      ['with' record_def] 'with' 'private' ;

discriminant_assoc : [identifier {'|' identifier} '=>'] expr ;

discriminant_constraint : '(' discriminant_assoc {',' discriminant_assoc} ')' ;

index_constraint : '(' constraint_list ')' ;

digits_constraint : 'digits' simple_expr [range_spec] ;

delta_constraint : 'delta' simple_expr [range_spec] ;

range_constraint : 'range' discrete_range | name ;

constraint : digits_constraint | delta_constraint | range_constraint | discriminant_constraint index_constraint ;

discriminant_spec : defining_id {',' defining_id} ':' type_expr [':=' expr] ;

discr_spec_list : discriminant_spec {';' discriminant_spec} ;

discriminant_part
  : '(' discr_spec_list ')'
  | '(' '<>' ')'
  ;

enum_literal_decl : defining_id | char_literal ;

formal_discrete_type_def : '(' '<>' ')' ;

record_def
  : 'record' component_list 'end' 'record'
  | 'null' 'record'
  ;

range_spec : 'range' discrete_range | name | box_expr ;

real_type_def : floating_point_def | decimal_fixed_point_def | ordinary_fixed_point_def ;

sexpr_or_box : simple_expr | box_expr ;

ordinary_fixed_point_def : 'delta' sexpr_or_box [range_spec] ;

decimal_fixed_point_def : 'delta' sexpr_or_box 'digits' sexpr_or_box [range_spec] ;

floating_point_def : 'digits' sexpr_or_box [range_spec] ;

record_type_def : 'abstract' 'tagged' 'limited' record_def ;

access_def
  : 'not' 'null' 'access' 'protected' subp_spec
  | 'not' 'null' 'access' 'all' 'constant' subtype_indication
  ;

enum_type_def : '(' enum_literal_decl {',' enum_literal_decl} ')' ;

type_def
: record_type_def
  | real_type_def
  | derived_type_def
  | signed_int_type_def
  | mod_int_type_def
  | array_type_def
  | interface_type_def
  | access_def
  | formal_discrete_type_def
  | enum_type_def
  ;

variant : 'when' choice_list '=>' component_list ;

anonymous_type_decl : array_type_def | access_def ;

type_decl
  : 'type' defining_id [discriminant_part] 'is' (type_def | ['abstract'] ['tagged'] ['limited'] 'private')
      aspect_spec ';'
  | 'type' defining_id [discriminant_part] 'is' ['abstract'] 'tagged' ';'
  | 'type' defining_id [discriminant_part] ';'
  ;

variant_part : 'case' identifier 'is' (variant)+ 'end' 'case' ';' ;

component_def : ['aliased'] ['constant'] type_expr ;

component_item
  : 'null' ';'
  | component_decl
  | aspect_clause
  | pragma
  ;

component_decl : defining_id (',' defining_id)* ':' component_def [':=' expr] aspect_spec ';' ;

component_list : component_item* [variant_part] ;

generic_decl
  : generic_formal_part subp_spec aspect_spec ';'
  | generic_formal_part 'package' defining_name aspect_spec 'is' basic_decls
      ['private' basic_decls] 'end' [identifier] ';'
  ;

generic_formal_part : 'generic' (generic_formal_decl | use_clause)* ;

generic_formal_decl
  : pragma
  | object_decl
  | type_decl
  | formal_subp_decl
  | 'with' generic_instantiation
  ;

formal_subp_decl
  : 'with' subp_spec 'is' 'abstract' [box_expr | name | null_literal] aspect_spec ';'
  | 'with' subp_spec ['is' (box_expr | name | null_literal)] aspect_spec ';'
  ;

renaming_clause : 'renames' name ;

generic_renaming_decl
  : 'generic' 'package' defining_name 'renames' static_name aspect_spec ';'
  | 'generic' ('procedure' | 'function') defining_name 'renames' static_name aspect_spec ';'
  ;

generic_instantiation
  : 'package' defining_name 'is' 'new' static_name ['(' param_assoc (',' param_assoc)* ')'] aspect_spec ';'
  | overriding_indicator ('procedure' | 'function') defining_name 'is' 'new' static_name
      ['(' param_assoc (',' param_assoc)* ')'] aspect_spec ';'
  ;

exception_decl : defining_id_list ':' 'exception' [renaming_clause] aspect_spec ';' ;

basic_decls : {basic_decl} ;

package_renaming_decl : 'package' defining_name renaming_clause aspect_spec ';' ;

basic_decl
  : null_subp_decl
  | abstract_subp_decl
  | expr_fn
  | subp_renaming_decl
  | body_stub
  | generic_instantiation
  | body
  | simple_subp_decl
  | type_decl
  | task_type_decl
  | protected_type_decl
  | subtype_decl
  | object_decl
  | package_decl
  | aspect_clause
  | use_clause
  | exception_decl
  | package_renaming_decl
  | generic_renaming_decl
  | generic_decl
  | pragma
  ;

object_decl
  : sub_object_decl
  | single_task_decl
  | protected_decl
  | number_dec
  ;

sub_object_decl : defining_id_list ':' ['aliased'] ['constant'] [mode] type_expr [':=' expr] [renaming_clause]
      aspect_spec ';' ;

ext_ret_stmt_object_decl : defining_id_list  ':' ['aliased'] ['constant'] [mode] type_expr [':=' expr]
      [renaming_clause] [aspect_spec] ;

defining_id_list : defining_id {',' defining_id} ;

number_decl : defining_id_list ':' 'constant' ':=' simple_expr ';' ;

contract_case_assoc : (expr | others_designator) '=>' expr ;

contract_cases_expr : '(' contract_case_assoc {',' contract_case_assoc} ')' ;

abstract_state_decl
  : defining_name aspect_spec
  | '(' abstract_state_decl ')'
  ;

multi_abstract_state_decl
  : abstract_state_decl
  | '(' abstract_state_decl {',' abstract_state_decl} ')'
  ;

aspect_assoc
  : IDENTIFIER ['=>' (null_literal | multi_abstract_state_decl)]
  | name ['=>' (expr | contract_cases_expr)]
  ;

aspect_spec : ['with' aspect_assoc {',' aspect_assoc}] ;

single_task_decl : 'task' defining_id aspect_spec [task_def] ';' ;

overriding_indicator
  : 'overriding'
  | 'not' 'overriding'
  | ;; empty
  ;

entry_decl : overriding_indicator 'entry' defining_id
            ['(' constrained_subtype_indication | discrete_range | subtype_indication ')']
            [param_specs] aspect_spec ';' ;

component_clause : identifier 'at' simple_expr range_spec ';' ;

aspect_clause
  : 'for' static_name 'use' regular_aggregate ';'
  | 'for' static_name 'use' 'record'
      ['at' 'mod' simple_expr ';']
      {component_clause | pragma}
      'end' 'record' ';'

  | 'for' direct_name 'use' 'at' expr ';'
  | 'for' name 'use' expr ';'
  ;

param_spec : defining_id {',' defining_id} ':' ['aliased'] [mode] [type_expr] [':=' expr] aspect_spec ;

param_specs : '(' param_spec {';' param_spec} ')' ;

subp_spec
        : ('procedure' | 'function')
        | [defining_name]
        | [param_specs]
        | 'return' type_expr
    ;

expr_fn : [overriding] subp_spec 'is' (paren_expr | aggregate) ;

null_subp_decl : [overriding] subp_spec 'is' 'null' ;

subp_renaming_decl : [overriding] subp_spec renaming_clause ;

simple_subp_decl : [overriding] subp_spec ;

subp_decl
  : null_subp_decl
  | abstract_subp_decl
  | expr_fn
  | subp_renaming_decl
  | simple_subp_decl
  ;

with_clause : ['limited'] ['private'] 'with' static_name {',' static_name} ;

context_item : with_clause | use_clause | pragma ;

use_clause : use_package_clause | use_type_clause ;

use_package_clause : 'use' static_name {',' static_name} ;

use_type_clause : 'use' ['all'] 'type' name {',' name} ;

subtype_indication             : ['not' 'null'] subtype_name [constraint] ;
discrete_subtype_indication    : ['not' 'null'] subtype_name range_constraint ;
constrained_subtype_indication : ['not' 'null'] subtype_name constraint ;

type_expr : anonymous_type | subtype_indication ;

mode
    : 'in' 'out'
    | 'in'
    | 'out'
    | ;; empty
    ;

pragma_argument : [(identifier Tick identifier | identifier) '=>'] expr ;

pragma : 'pragma' identifier
      [ '(' (pragma_argument contract_case_assoc) {',' (pragma_argument contract_case_assoc)} ')' ] ;

subunit : 'separate' '(' static_name ')' (subp_body | package_body | task_body | protected_body) ;

library_unit_body : subp_body | package_body ;

library_unit_renaming_decl : package_renaming_decl | generic_renaming_decl ;

library_item
  : [ 'private' ]
      ( null_subp_decl
      | abstract_subp_decl
      | expr_fn
      | subp_renaming_decl
      | generic_instantiation
      | library_unit_body
      | simple_subp_decl
      | library_unit_renaming_decl
      | generic_decl
      | package_decl
      )
  ;

compilation_unit : {context_item} (subunit | library_item) {pragma} ;

compilation
  : (pragma)+
  | compilation_unit
  | {compilation_unit}
  ;

decl_part : basic_decls ;

entry_body : 'entry' defining_id ['(' 'for' defining_id 'in' discrete_subtype_definition ')']
      [param_specs] aspect_spec 'when' expr 'is' recov_decl_part 'begin' handled_stmts 'end' [static_name] ;

protected_body : 'protected' 'body' defining_name aspect_spec 'is' decl_part 'end' [static_name] ;

protected_body_stub : 'protected' 'body' defining_name 'is' 'separate' aspect_spec ;

task_body : 'task' 'body' defining_name aspect_spec 'is' recov_decl_part 'begin' handled_stmts 'end' [static_name] ;

task_body_stub : 'task' 'body' defining_name 'is' 'separate' aspect_spec ;

package_body_stub : 'package' 'body' defining_name 'is' 'separate' aspect_spec ;

package_body : 'package' 'body' defining_name aspect_spec 'is' decl_part ['begin' handled_stmts]
      'end' [static_name] ';' ;

terminate_alternative : 'terminate' ;

select_stmt : 'select' ['when' expr '=>'] stmts {'or' ['when' expr '=>'] stmts} ['else' stmts] ['then' 'abort' stmts]
      'end' 'select' ';' ;

accept_stmt
  : 'accept' identifier ['(' expr ')'] [param_specs] ';'
  | 'accept' identifier ['(' expr ')'] [param_specs] 'do' handled_stmts 'end' [identifier] ';' ;

case_alt : 'when' choice_list '=>' stmts ;

case_stmt : 'case' expr 'is' (case_alt)+ 'end' 'case' ';' ;

ext_return_stmt : 'return' ext_ret_stmt_object_decl ['do' handled_stmts 'end' 'return'] ';' ;

iblock_stmt
  : 'begin' handled_stmts 'end' [identifier] ';'
  | 'declare'  recov_decl_part 'begin' handled_stmts 'end' [identifier] ';'
  ;

block_stmt
  : iblock_stmt
  | defining_id ':' iblock_stmt
  ;

iloop_stmt
  : 'for' for_loop_param_spec 'loop' stmts 'end' 'loop' [identifier] ';'
  | 'while' expr 'loop' stmts 'end' 'loop' [identifier] ';'
  | 'loop' stmts 'end' 'loop' [identifier] ';'
  ;

loop_stmt
  : iloop_stmt
  | defining_id ':' iloop_stmt
  ;

compound_stmt : if_stmt | block_stmt | loop_stmt | ext_return_stmt | case_stmt | accept_stmt | select_stmt ;

if_stmt : 'if' expr 'then' stmts {'elsif' expr 'then' stmts} ['else' stmts] 'end' 'if' ';' ;

raise_stmt
  : 'raise' name ['with' expr] ';'
  | 'raise' ';'
  ;

delay_stmt : 'delay' 'until' expr ';' ;

abort_stmt : 'abort' name {',' name} ';' ;

body : subp_body | package_body | task_body | protected_body | entry_body ;

body_stub : subp_body_stub | package_body_stub | task_body_stub | protected_body_stub ;

subp_body_stub : overriding_indicator subp_spec 'is' 'separate' aspect_spec ';' ;

recov_decl_part : decl_part ;

subp_body : overriding_indicator subp_spec aspect_spec 'is' recov_decl_part 'begin' handled_stmts
      'end' [static_name] ';' ;

handled_stmts: stmts ['exception' (exception_handler | pragma)+ ] ;

exception_handler : 'when' [defining_id ':'] (name | others_designator) {'|' (name | others_designator)} '=>' stmts ;

stmts : {stmt | label} ;

label : '<<' defining_id '>>' ;

stmt : compound_stmt | simple_stmt ;

call_stmt : name ';'  ;

simple_stmt : null_stmt | assignment_stmt | goto_stmt | exit_stmt | return_stmt | requeue_stmt | call_stmt |
    abort_stmt | delay_stmt | raise_stmt | terminate_alternative | pragma ;

null_stmt : Null ';' ;

assignment_stmt : name ':=' expr ';' ;

exit_stmt : 'exit' [static_name] ['when' expr] ';' ;

return_stmt : 'return' [expr] ';' ;

requeue_stmt : 'requeue' name ['with' 'abort'] ';' ;

identifier : Identifier ;
char_literal : Char ;
string_literal : String ;

defining_id : identifier ;

dec_literal : Decimal ;
int_literal : Integer ;
num_literal : dec_literal | int_literal ;

null_literal : Null;

allocator : 'new' ['(' name ')'] qualified_name | subtype_indication ;

for_loop_param_spec : defining_id [':' subtype_indication] ('in' | 'of') ['reverse']
      (discrete_range | discrete_subtype_indication | name) ;

quantified_expr : 'for' ('all' | 'some') for_loop_param_spec '=>' (expr | discrete_range) ;

case_expr : 'case' expr 'is' case_expr_alt (',' case_expr_alt)* ;

case_expr_alt : 'when' choice_list '=>' expr ;

raise_expr
  : 'raise' name ['with' expr]
  | 'raise'
  ;

if_expr : 'if' expr 'then' expr ('elsif' expr 'then' expr)* ['else' expr] ;

;; end of file
