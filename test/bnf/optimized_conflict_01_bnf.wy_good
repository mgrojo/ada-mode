;;; generated from optimized_conflict_01.wy -*- buffer-read-only:t -*-
;;;
;; Illustrates a grammar conflict involving an optimized list.
;;
;; This grammar is simplified from Ada. The Ada compiler rejects the
;; construct in the input file; constraints are not allowed in
;; allocators. But the Emacs parser does not know that, so it has to
;; deal with the conflicts.
;;
;; Compare to optimized_conflict_02.wy, which is the same grammar, but
;; without error correction, so it has no generated optimized_lists;
;; all the conflicts there are from the grammar. The grammar conflicts
;; says this input can be parsed in at least three ways:
;;
;; Integer range z .. new name range y .. a + b * x
;;
;; 1) Integer range z .. allocator + b * x
;; 1) Integer range z .. allocator * x
;; 2) Integer range z .. new name range y .. simple_expression
;;
;; In the absence of extra conflict resolution information, the parser
;; must do all of the possible interpretations, resulting in an
;; ambiguous parse.
;;
;; related grammars:
;; optimized_conflict_01.wy : most complicated; optimized_lists, add and multiply, conflict in grammar
;; optimized_conflict_02.wy : 01 but no optimized_lists
;; optimized_conflict_03.wy : no optimized_lists, no multiply, conflict in grammar
;; optimized_conflict_04.wy : 01 but fix conflict in grammar

%meta_syntax BNF

%keyword NEW "new"
%keyword RANGE "range"
%generate LALR Ada re2c

%start subtype_indication

%token <punctuation> AMPERSAND "&"
%token <punctuation> DOT_DOT ".."
%token <punctuation> MINUS "-"
%token <punctuation> PLUS "+"
%token <punctuation> SLASH "/"
%token <punctuation> STAR "*"

%non_grammar <non-reporting> WHITESPACE %[ [ \t] ]%

%non_grammar <new-line> NEW_LINE

%non_grammar <comment-new-line> COMMENT "--"

%token <symbol> IDENTIFIER %[ [a-zA-Z]+ ]%

;; Specify the shortest possible check_limit, to minimize the
;; difference between parsing with this grammar and
;; optimized_conflict_02.wy.
%mckenzie_cost_default 4 3 2 2
%mckenzie_check_limit 1

%conflict SHIFT binary_adding_operator | REDUCE subtype_indication on token AMPERSAND (30)
%conflict SHIFT binary_adding_operator | REDUCE subtype_indication on token MINUS (30)
%conflict SHIFT binary_adding_operator | REDUCE subtype_indication on token PLUS (30)

%conflict SHIFT multiplying_operator | REDUCE simple_expression on token SLASH (32)
%conflict SHIFT multiplying_operator | REDUCE simple_expression on token STAR (32)

subtype_indication
  : IDENTIFIER RANGE simple_expression DOT_DOT simple_expression
  ;

simple_expression
  : term
  | simple_expression binary_adding_operator term
  | simple_expression binary_adding_operator simple_expression
  ;

term
  : primary
  | term multiplying_operator primary
  | term multiplying_operator term
  ;

primary
  : IDENTIFIER
  | allocator
  ;

binary_adding_operator
  : PLUS
  | MINUS
  | AMPERSAND
  ;

multiplying_operator
  : STAR
  | SLASH
  ;

allocator
  : NEW subtype_indication
  ;

;; end of file
