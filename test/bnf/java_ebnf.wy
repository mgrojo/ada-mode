;; Examples of EBNF syntax used in the Java grammar file
;; https://github.com/antlr/grammars-v4/tree/master/java
;;
;; Note that the only *.*_good file is java_ebnf_bnf.wy_good, and that
;; this file does not declare all used tokens; we are only testing the
;; translation from EBNF to BNF.

%meta_syntax EBNF

%start compilationUnit
%generate None

%token <punctuation> ADD_ASSIGN         '+='
%token <punctuation> AND_ASSIGN         '&='
%token <punctuation> ASSIGN             '='
%token <punctuation> COMMA              ','
%token <punctuation> DEC                '--'
%token <punctuation> DIV_ASSIGN         '/='
%token <punctuation> DOT                '.'
%token <punctuation> INC                '++'
%token <punctuation> LBRACE             '{'
%token <punctuation> LBRACK             '['
%token <punctuation> LSHIFT_ASSIGN      '<<='
%token <punctuation> MOD_ASSIGN         '%='
%token <punctuation> MUL_ASSIGN         '*='
%token <punctuation> OR_ASSIGN          '|='
%token <punctuation> RBRACE             '}'
%token <punctuation> RBRACK             ']'
%token <punctuation> RSHIFT_ASSIGN      '>>='
%token <punctuation> SEMI               ';'
%token <punctuation> SUB_ASSIGN         '-='
%token <punctuation> URSHIFT_ASSIGN     '>>>='
%token <punctuation> XOR_ASSIGN         '^='

;; IDENTIFIER QUESTION | IDENTIFIER STAR
compilationUnit
    : packageDeclaration? importDeclaration* typeDeclaration* EOF
    ;

statement
    : blockLabel=block
    | TRY block (catchClause+ finallyBlock? | finallyBlock)
    | SWITCH parExpression '{' switchBlockStatementGroup* switchLabel* '}'
    ;

;; rhs_group_item QUESTION | STRING_LITERAL_2 QUESTION
enumDeclaration
    : ENUM IDENTIFIER (IMPLEMENTS typeList)? '{' enumConstants? ','? enumBodyDeclarations? '}'
    ;

;; Duplicate '(IMPLEMENTS typeList)?'
classDeclaration
    : CLASS IDENTIFIER typeParameters?
      (EXTENDS typeType)?
      (IMPLEMENTS typeList)?
      classBody
    ;

;; labeled rhs_optional_item
forControl
    : enhancedForControl
    | forInit? ';' expression? ';' forUpdate=expressionList?
    ;

;; labeled STRING_LITERAL_2, non-trivial rhs_alternative_list, labeled rhs_group_item, rhs_attribute
expression
    : primary
    | expression bop='.'
      ( THIS
      | NEW nonWildcardTypeArguments? innerCreator
      | SUPER superSuffix
      | explicitGenericInvocation
      )
    | expression postfix=('++' | '--')

    ;; attribute with more than one item following
    | <assoc=right> expression
      bop=('=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '>>=' | '>>>=' | '<<=' | '%=')
      expression

    ;; attribute with one item following
    | <assoc=right> expression
    ;

;; non-trivial group item
arrayCreatorRest
    : '[' (']' ('[' ']')* arrayInitializer | expression ']' ('[' expression ']')* ('[' ']')*)
    ;

;; another non-trivial group item, and lots of copies
interfaceMethodDeclaration
    : interfaceMethodModifier* (typeTypeOrVoid | typeParameters annotation* typeTypeOrVoid)
      IDENTIFIER formalParameters ('[' ']')* (THROWS qualifiedNameList)? methodBody
    ;

;; trailing optional with multiple tokens
typeParameter
    : annotation* IDENTIFIER (EXTENDS typeBound)?
    ;

;; end of file
