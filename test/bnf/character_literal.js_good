// generated from character_literal.wy -*- buffer-read-only:t js-indent-level:3 -*-

const reserved = regex => token(prec(2, new RegExp(regex)));
const caseInsensitive = word => word.split('') .map(letter => `[${letter}${letter.toUpperCase()}]`) .join('');
const reservedInsensitive = word => alias(reserved(caseInsensitive(word)), word) ;

const GNAT_Char_Coding = '\\["[0-9A-Fa-f]+"\\]';
module.exports = grammar({
   name: 'Character_Literal',

   rules: {
      compilation_unit: $ => $.statement_list,

// 
// --  Copyright (C) 2013, 2015, 2017 - 2023 Stephen Leake.  All Rights Reserved.
// --
// --  This program is free software; you can redistribute it and/or
// --  modify it under the terms of the GNU General Public License as
// --  published by the Free Software Foundation; either version 3, or (at
// --  your option) any later version.
// --
// --  This software is distributed in the hope that it will be useful,
// --  but WITHOUT ANY WARRANTY; without even the implied warranty of
// --  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// --  General Public License for more details.
// --
// --  You should have received a copy of the GNU General Public License
// --  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
      FOO: $ => reservedInsensitive("foo"),

      COMMA: $ => ",",

      SEMICOLON: $ => ";",

      LEFT_PAREN: $ => "(",

      RIGHT_PAREN: $ => ")",

      TICK_1: $ => "'",

      CHARACTER_LITERAL: $ => new RegExp("'(.|" + GNAT_Char_Coding + ")'", "u"),

      STRING_LITERAL: $ => new RegExp('"(.|""|"' + GNAT_Char_Coding + ')*"', "u"),

      IDENTIFIER: $ => new RegExp('([0-9a-zA-Z_\u{80}-\u{10FFFF}]|' + GNAT_Char_Coding + ')([0-9a-zA-Z_\u{80}-\u{10FFFF}]|' + GNAT_Char_Coding + ')*', 'u'),

      word: $ => $.IDENTIFIER,

      COMMENT: $ => token(seq("--", /.*/)),

      statement_list: $ => choice(seq($.statement_list, $.statement), $.statement),

      statement: $ => choice(seq($.IDENTIFIER, $.tick, $.LEFT_PAREN, $.CHARACTER_LITERAL, $.COMMA, $.CHARACTER_LITERAL, $.RIGHT_PAREN, $.SEMICOLON), seq($.IDENTIFIER, $.tick, $.LEFT_PAREN, $.CHARACTER_LITERAL, $.RIGHT_PAREN, $.SEMICOLON), seq($.IDENTIFIER, $.tick, $.IDENTIFIER, $.SEMICOLON), seq($.STRING_LITERAL, $.SEMICOLON), seq($.FOO, $.SEMICOLON)),

      tick: $ => $.TICK_1,

  },
  extras: $ => [
      $.COMMENT,
      /\s|\\\r?\n/,
  ],
}
);
