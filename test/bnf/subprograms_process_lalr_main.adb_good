--  generated parser support file. -*- buffer-read-only:t  -*-
--  command line: wisitoken-bnf-generate.exe  --generate LALR Ada_Emacs re2c PROCESS ../test/bnf/subprograms.wy
--

--  Copyright (C) 2013, 2017 - 2021 Stephen Leake.  All Rights Reserved.

--  This program is free software; you can redistribute it and/or
--  modify it under the terms of the GNU General Public License as
--  published by the Free Software Foundation; either version 3, or (at
--  your option) any later version.
--
--  This software is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

with Subprograms_Process_Actions; use Subprograms_Process_Actions;
with SAL;
with WisiToken.Lexer.re2c;
with subprograms_re2c_c;
package body Subprograms_Process_LALR_Main is

   function Is_Block_Delimited (ID : in WisiToken.Token_ID) return Boolean
   is begin
      case To_Token_Enum (ID) is
      when
         COMMENT_1_ID |
         COMMENT_2_ID => return True;
      when others => return False;
      end case;
   end Is_Block_Delimited;

   function Same_Block_Delimiters (ID : in WisiToken.Token_ID) return Boolean
   is begin
      case To_Token_Enum (ID) is
      when COMMENT_1_ID => return False;
      when COMMENT_2_ID => return False;
      when others => return False;
      end case;
   end Same_Block_Delimiters;

   function Start_Delimiter_Length (ID : in WisiToken.Token_ID) return Integer
   is begin
      case To_Token_Enum (ID) is
      when COMMENT_1_ID => return 6;
      when COMMENT_2_ID => return 6;
      when others => raise SAL.Programmer_Error; return 0;
      end case;
   end Start_Delimiter_Length;

   function End_Delimiter_Length (ID : in WisiToken.Token_ID) return Integer
   is begin
      case To_Token_Enum (ID) is
      when
         COMMENT_1_ID |
         COMMENT_2_ID => return 1;
      when others => raise SAL.Programmer_Error; return 0;
      end case;
   end End_Delimiter_Length;

   function Find_End_Delimiter
     (Source      : in WisiToken.Lexer.Source;
      ID          : in WisiToken.Token_ID;
      Token_Start : in WisiToken.Buffer_Pos)
     return WisiToken.Buffer_Pos
   is begin
      return
        (case To_Token_Enum (ID) is
         when COMMENT_1_ID => WisiToken.Lexer.Find_New_Line (Source, Token_Start),
         when COMMENT_2_ID => WisiToken.Lexer.Find_New_Line (Source, Token_Start),
         when others => raise SAL.Programmer_Error);
   end Find_End_Delimiter;

   function Find_Scan_End
     (Source   : in WisiToken.Lexer.Source;
      ID       : in WisiToken.Token_ID;
      Region   : in WisiToken.Buffer_Region;
      Inserted : in Boolean;
      Start    : in Boolean)
     return WisiToken.Buffer_Pos
   is
      use WisiToken;
   begin
      return
        (case To_Token_Enum (ID) is
         when COMMENT_1_ID =>
         (if Inserted then (if Start then Lexer.Find_New_Line (Source, Region.Last) else Region.Last)
          elsif Start then Region.Last
          else Lexer.Find_New_Line (Source, Region.Last)),
         when COMMENT_2_ID =>
         (if Inserted then (if Start then Lexer.Find_New_Line (Source, Region.Last) else Region.Last)
          elsif Start then Region.Last
          else Lexer.Find_New_Line (Source, Region.Last)),
         when others => raise SAL.Programmer_Error);
   end Find_Scan_End;

   function Contains_End_Delimiter
     (Source : in WisiToken.Lexer.Source;
      ID     : in WisiToken.Token_ID;
      Region : in WisiToken.Buffer_Region)
     return WisiToken.Base_Buffer_Pos
   is
      use WisiToken;
   begin
      return
        (case To_Token_Enum (ID) is
         when COMMENT_1_ID => Lexer.Find_New_Line (Source, Region),
         when COMMENT_2_ID => Lexer.Find_New_Line (Source, Region),
         when others => raise SAL.Programmer_Error);
   end Contains_End_Delimiter;

   function Line_Begin_Char_Pos
    (Source : in WisiToken.Lexer.Source;
     Token  : in WisiToken.Lexer.Token;
     Line   : in WisiToken.Line_Number_Type)
   return WisiToken.Buffer_Pos
   is
      pragma Unreferenced (Source, Line);
      use all type WisiToken.Base_Buffer_Pos;
   begin
      case To_Token_Enum (Token.ID) is
      when NEW_LINE_ID => return Token.Char_Region.Last + 1;
      when COMMENT_1_ID => return Token.Char_Region.Last + 1;
      when COMMENT_2_ID => return Token.Char_Region.Last + 1;
      when others => raise SAL.Programmer_Error;
      end case;
   end Line_Begin_Char_Pos;

   function Terminated_By_New_Line (ID : in WisiToken.Token_ID) return Boolean
   is begin
      case To_Token_Enum (ID) is
      when NEW_LINE_ID => return True;
      when COMMENT_1_ID => return True;
      when COMMENT_2_ID => return True;
      when others => return False;
      end case;
   end Terminated_By_New_Line;

   package Lexer is new WisiToken.Lexer.re2c
     (subprograms_re2c_c.New_Lexer,
      subprograms_re2c_c.Free_Lexer,
      subprograms_re2c_c.Reset_Lexer,
      subprograms_re2c_c.Set_Verbosity,
      subprograms_re2c_c.Set_Position,
      subprograms_re2c_c.Next_Token,
      Is_Block_Delimited,
      Same_Block_Delimiters,
      Start_Delimiter_Length,
      End_Delimiter_Length,
      Find_End_Delimiter,
      Contains_End_Delimiter,
      Find_Scan_End,
      Line_Begin_Char_Pos,
      Terminated_By_New_Line);

   function Create_Parse_Table
     return WisiToken.Parse.LR.Parse_Table_Ptr
   is
      use WisiToken.Parse.LR;
      McKenzie_Param : constant McKenzie_Param_Type :=
        (First_Terminal    => 4,
         Last_Terminal     => 21,
         First_Nonterminal => 22,
         Last_Nonterminal  => 34,
         Insert =>
           (4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4),
         Delete =>
           (4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4),
         Push_Back =>
           (4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4),
         Undo_Reduce =>
           (4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4),
         Minimal_Complete_Cost_Delta => -1,
         Fast_Forward =>  0,
         Matching_Begin =>  0,
         Ignore_Check_Fail  => 4,
         Check_Limit => 3,
         Zombie_Limit => 3,
         Check_Delta_Limit => 200,
         Enqueue_Limit => 10000);

      Table : constant Parse_Table_Ptr := new Parse_Table
        (State_First       => 0,
         State_Last        => 71,
         First_Terminal    => 4,
         Last_Terminal     => 21,
         First_Nonterminal => 22,
         Last_Nonterminal  => 34);
   begin
      declare
         procedure Subr_1
         is begin
            Table.States (0).Action_List.Set_Capacity (4);
            Add_Action (Table.States (0), 8, (30, 0), 1);
            Add_Action (Table.States (0), 11, (30, 8), 2);
            Add_Action (Table.States (0), 13, (32, 0), 3);
            Add_Action (Table.States (0), 21, Reduce, (24, 1),  0);
            Table.States (0).Goto_List.Set_Capacity (5);
            Add_Goto (Table.States (0), 24, 4);
            Add_Goto (Table.States (0), 25, 5);
            Add_Goto (Table.States (0), 30, 6);
            Add_Goto (Table.States (0), 32, 7);
            Add_Goto (Table.States (0), 33, 8);
            Table.States (1).Action_List.Set_Capacity (4);
            Add_Action (Table.States (1), 4, (23, 4), 9);
            Add_Action (Table.States (1), 14, (29, 0), 10);
            Add_Action (Table.States (1), 19, (30, 7), 11);
            Add_Action (Table.States (1), 20, (23, 0), 12);
            Table.States (1).Goto_List.Set_Capacity (3);
            Add_Goto (Table.States (1), 23, 13);
            Add_Goto (Table.States (1), 27, 14);
            Add_Goto (Table.States (1), 29, 15);
            Table.States (1).Kernel := To_Vector ((((30, 0),  8,  12, (32767, 0),  0), ((30, 1),  8,  4, (32767, 0),
            0), ((30, 2),  8,  10, (32767, 0),  0), ((30, 3),  8,  2, (32767, 0),  0), ((30, 4),  8,  11, (32767, 0),
            0), ((30, 5),  8,  3, (32767, 0),  0), ((30, 6),  8,  9, (32767, 0),  0), ((30, 7),  8,  1, (32767, 0),
            0), ((30, 9),  8,  12, (32767, 0),  0), ((30, 10),  8,  4, (32767, 0),  0)));
            Table.States (1).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (30, 7),  19, 11)));
            Table.States (2).Action_List.Set_Capacity (1);
            Add_Action (Table.States (2), 20, (27, 1), 16);
            Table.States (2).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (2), 27, 17);
            Table.States (2).Kernel := To_Vector ((0 => ((30, 8),  11,  6, (32767, 0),  0)));
            Table.States (2).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (27, 1),  20, 16)));
            Table.States (3).Action_List.Set_Capacity (1);
            Add_Action (Table.States (3), 20, (27, 1), 16);
            Table.States (3).Goto_List.Set_Capacity (3);
            Add_Goto (Table.States (3), 27, 18);
            Add_Goto (Table.States (3), 28, 19);
            Add_Goto (Table.States (3), 34, 20);
            Table.States (3).Kernel := To_Vector ((0 => ((32, 0),  13,  2, (32767, 0),  0)));
            Table.States (3).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (27, 1),  20, 16)));
            Table.States (4).Action_List.Set_Capacity (1);
            Add_Action (Table.States (4), 21, Accept_It, (22, 0),  1);
            Table.States (5).Action_List.Set_Capacity (4);
            Add_Action (Table.States (5), (8, 11, 13, 21), (33, 0),  1);
            Table.States (5).Kernel := To_Vector ((0 => ((33, 0),  25,  0, (33, 0),  1)));
            Table.States (5).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (33, 0),  1)));
            Table.States (6).Action_List.Set_Capacity (4);
            Add_Action (Table.States (6), (8, 11, 13, 21), (25, 0),  1);
            Table.States (6).Kernel := To_Vector ((0 => ((25, 0),  30,  0, (25, 0),  1)));
            Table.States (6).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (25, 0),  1)));
            Table.States (7).Action_List.Set_Capacity (4);
            Add_Action (Table.States (7), (8, 11, 13, 21), (25, 1),  1);
            Table.States (7).Kernel := To_Vector ((0 => ((25, 1),  32,  0, (25, 1),  1)));
            Table.States (7).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (25, 1),  1)));
            Table.States (8).Action_List.Set_Capacity (4);
            Add_Action (Table.States (8), 8, (30, 0), 1);
            Add_Action (Table.States (8), 11, (30, 8), 2);
            Add_Action (Table.States (8), 13, (32, 0), 3);
            Add_Action (Table.States (8), 21, Reduce, (24, 0),  1);
            Table.States (8).Goto_List.Set_Capacity (4);
            Add_Goto (Table.States (8), 25, 21);
            Add_Goto (Table.States (8), 30, 6);
            Add_Goto (Table.States (8), 32, 7);
            Add_Goto (Table.States (8), 33, 22);
            Table.States (8).Kernel := To_Vector ((((24, 0),  33,  0, (24, 0),  1), ((33, 1),  33,  2, (32767, 0),  0),
            ((33, 2),  33,  2, (32767, 0),  0)));
            Table.States (8).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (24, 0),  1)));
            Table.States (9).Action_List.Set_Capacity (1);
            Add_Action (Table.States (9), 7, (26, 0), 23);
            Table.States (9).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (9), 26, 24);
            Table.States (9).Kernel := To_Vector ((((23, 4),  4,  11, (32767, 0),  0), ((23, 5),  4,  10, (32767, 0),
            0), ((23, 6),  4,  8, (32767, 0),  0), ((23, 7),  4,  7, (32767, 0),  0)));
            Table.States (9).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (26, 0),  7, 23)));
            Table.States (10).Action_List.Set_Capacity (2);
            Add_Action (Table.States (10), 15, (29, 1), 25);
            Add_Action (Table.States (10), 20, (29, 0), 26);
            Table.States (10).Kernel := To_Vector ((((29, 0),  14,  2, (32767, 0),  0), ((29, 1),  14,  1, (32767, 0),
            0)));
            Table.States (10).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (29, 1),  15, 25)));
            Table.States (11).Action_List.Set_Capacity (4);
            Add_Action (Table.States (11), (8, 11, 13, 21), (30, 7),  2);
            Table.States (11).Kernel := To_Vector ((0 => ((30, 7),  19,  0, (30, 7),  2)));
            Table.States (11).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (30, 7),  2)));
            Table.States (12).Action_List.Set_Capacity (6);
            Add_Action (Table.States (12), 4, Reduce, (27, 1),  1);
            Add_Action (Table.States (12), 14, Reduce, (27, 1),  1);
            Add_Action (Table.States (12), 16, (23, 0), 27);
            Add_Action (Table.States (12), 18, Reduce, (27, 1),  1);
            Add_Action (Table.States (12), 19, Reduce, (27, 1),  1);
            Add_Action (Table.States (12), 20, Reduce, (27, 1),  1);
            Table.States (12).Kernel := To_Vector ((((23, 0),  20,  13, (32767, 0),  0), ((23, 1),  20,  12, (32767,
            0),  0), ((23, 2),  20,  10, (32767, 0),  0), ((23, 3),  20,  9, (32767, 0),  0), ((27, 1),  20,  0, (27,
            1),  1)));
            Table.States (12).Minimal_Complete_Actions := To_Vector (((Shift, (23, 0),  16, 27), (Reduce, (27, 1),
            1)));
            Table.States (13).Action_List.Set_Capacity (1);
            Add_Action (Table.States (13), 19, (30, 6), 28);
            Table.States (13).Kernel := To_Vector ((0 => ((30, 6),  23,  1, (32767, 0),  0)));
            Table.States (13).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (30, 6),  19, 28)));
            Table.States (14).Action_List.Set_Capacity (5);
            Add_Action (Table.States (14), 4, (23, 4), 9);
            Add_Action (Table.States (14), 14, (29, 0), 10);
            Add_Action (Table.States (14), 18, (27, 0), 29);
            Add_Action (Table.States (14), 19, (30, 3), 30);
            Add_Action (Table.States (14), 20, (23, 0), 31);
            Table.States (14).Goto_List.Set_Capacity (2);
            Add_Goto (Table.States (14), 23, 32);
            Add_Goto (Table.States (14), 29, 33);
            Table.States (14).Kernel := To_Vector ((((27, 0),  27,  2, (32767, 0),  0), ((30, 0),  27,  11, (32767, 0),
             0), ((30, 1),  27,  3, (32767, 0),  0), ((30, 2),  27,  9, (32767, 0),  0), ((30, 3),  27,  1, (32767, 0),
             0), ((30, 9),  27,  11, (32767, 0),  0), ((30, 10),  27,  3, (32767, 0),  0)));
            Table.States (14).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (30, 3),  19, 30)));
            Table.States (15).Action_List.Set_Capacity (3);
            Add_Action (Table.States (15), 4, (23, 4), 9);
            Add_Action (Table.States (15), 19, (30, 5), 34);
            Add_Action (Table.States (15), 20, (23, 0), 31);
            Table.States (15).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (15), 23, 35);
            Table.States (15).Kernel := To_Vector ((((30, 4),  29,  9, (32767, 0),  0), ((30, 5),  29,  1, (32767, 0),
            0)));
            Table.States (15).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (30, 5),  19, 34)));
            Table.States (16).Action_List.Set_Capacity (6);
            Add_Action (Table.States (16), (5, 10, 14, 17, 18, 19), (27, 1),  1);
            Table.States (16).Kernel := To_Vector ((0 => ((27, 1),  20,  0, (27, 1),  1)));
            Table.States (16).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (27, 1),  1)));
            Table.States (17).Action_List.Set_Capacity (2);
            Add_Action (Table.States (17), 14, (29, 0), 10);
            Add_Action (Table.States (17), 18, (27, 0), 29);
            Table.States (17).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (17), 29, 36);
            Table.States (17).Kernel := To_Vector ((((27, 0),  27,  2, (32767, 0),  0), ((30, 8),  27,  5, (32767, 0),
            0)));
            Table.States (17).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (29, 0),  14, 10)));
            Table.States (18).Action_List.Set_Capacity (3);
            Add_Action (Table.States (18), 17, Reduce, (28, 0),  1);
            Add_Action (Table.States (18), 18, (27, 0), 29);
            Add_Action (Table.States (18), 19, Reduce, (28, 0),  1);
            Table.States (18).Kernel := To_Vector ((((27, 0),  27,  2, (32767, 0),  0), ((28, 0),  27,  0, (28, 0),
            1)));
            Table.States (18).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (28, 0),  1)));
            Table.States (19).Action_List.Set_Capacity (2);
            Add_Action (Table.States (19), 17, (28, 1), 37);
            Add_Action (Table.States (19), 19, Reduce, (34, 0),  1);
            Table.States (19).Kernel := To_Vector ((((28, 1),  28,  2, (32767, 0),  0), ((34, 0),  28,  0, (34, 0),
            1)));
            Table.States (19).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (34, 0),  1)));
            Table.States (20).Action_List.Set_Capacity (1);
            Add_Action (Table.States (20), 19, (32, 0), 38);
            Table.States (20).Kernel := To_Vector ((0 => ((32, 0),  34,  1, (32767, 0),  0)));
            Table.States (20).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (32, 0),  19, 38)));
            Table.States (21).Action_List.Set_Capacity (4);
            Add_Action (Table.States (21), 8, Reduce, (33, 0),  1);
            Add_Conflict (Table.States (21), 8, (33, 1),  2);
            Add_Action (Table.States (21), 11, Reduce, (33, 0),  1);
            Add_Conflict (Table.States (21), 11, (33, 1),  2);
            Add_Action (Table.States (21), 13, Reduce, (33, 0),  1);
            Add_Conflict (Table.States (21), 13, (33, 1),  2);
            Add_Action (Table.States (21), 21, Reduce, (33, 0),  1);
            Add_Conflict (Table.States (21), 21, (33, 1),  2);
            Table.States (21).Kernel := To_Vector ((((33, 0),  25,  0, (33, 0),  1), ((33, 1),  25,  0, (33, 1),  2)));
            Table.States (21).Minimal_Complete_Actions := To_Vector (((Reduce, (33, 0),  1), (Reduce, (33, 1),  2)));
            Table.States (22).Action_List.Set_Capacity (4);
            Add_Action (Table.States (22), 8, (30, 0), 1);
            Add_Conflict (Table.States (22), 8, (33, 2),  2);
            Add_Action (Table.States (22), 11, (30, 8), 2);
            Add_Conflict (Table.States (22), 11, (33, 2),  2);
            Add_Action (Table.States (22), 13, (32, 0), 3);
            Add_Conflict (Table.States (22), 13, (33, 2),  2);
            Add_Action (Table.States (22), 21, Reduce, (33, 2),  2);
            Table.States (22).Goto_List.Set_Capacity (4);
            Add_Goto (Table.States (22), 25, 21);
            Add_Goto (Table.States (22), 30, 6);
            Add_Goto (Table.States (22), 32, 7);
            Add_Goto (Table.States (22), 33, 22);
            Table.States (22).Kernel := To_Vector ((((33, 1),  33,  2, (32767, 0),  0), ((33, 2),  33,  0, (33, 2),
            2), ((33, 2),  33,  2, (32767, 0),  0)));
            Table.States (22).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (33, 2),  2)));
            Table.States (23).Action_List.Set_Capacity (1);
            Add_Action (Table.States (23), 20, (26, 0), 39);
            Table.States (23).Kernel := To_Vector ((0 => ((26, 0),  7,  5, (32767, 0),  0)));
            Table.States (23).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (26, 0),  20, 39)));
            Table.States (24).Action_List.Set_Capacity (2);
            Add_Action (Table.States (24), 5, (23, 6), 40);
            Add_Action (Table.States (24), 6, (23, 4), 41);
            Table.States (24).Kernel := To_Vector ((((23, 4),  26,  5, (32767, 0),  0), ((23, 5),  26,  4, (32767, 0),
            0), ((23, 6),  26,  2, (32767, 0),  0), ((23, 7),  26,  1, (32767, 0),  0)));
            Table.States (24).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (23, 6),  5, 40)));
            Table.States (25).Action_List.Set_Capacity (4);
            Add_Action (Table.States (25), (4, 5, 19, 20), (29, 1),  2);
            Table.States (25).Kernel := To_Vector ((0 => ((29, 1),  15,  0, (29, 1),  2)));
            Table.States (25).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (29, 1),  2)));
            Table.States (26).Action_List.Set_Capacity (1);
            Add_Action (Table.States (26), 15, (29, 0), 42);
            Table.States (26).Kernel := To_Vector ((0 => ((29, 0),  20,  1, (32767, 0),  0)));
            Table.States (26).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (29, 0),  15, 42)));
            Table.States (27).Action_List.Set_Capacity (1);
            Add_Action (Table.States (27), 4, (23, 0), 43);
            Table.States (27).Kernel := To_Vector ((((23, 0),  16,  12, (32767, 0),  0), ((23, 1),  16,  11, (32767,
            0),  0), ((23, 2),  16,  9, (32767, 0),  0), ((23, 3),  16,  8, (32767, 0),  0)));
            Table.States (27).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (23, 0),  4, 43)));
            Table.States (28).Action_List.Set_Capacity (4);
            Add_Action (Table.States (28), (8, 11, 13, 21), (30, 6),  3);
            Table.States (28).Kernel := To_Vector ((0 => ((30, 6),  19,  0, (30, 6),  3)));
            Table.States (28).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (30, 6),  3)));
            Table.States (29).Action_List.Set_Capacity (1);
            Add_Action (Table.States (29), 20, (27, 0), 44);
            Table.States (29).Kernel := To_Vector ((0 => ((27, 0),  18,  1, (32767, 0),  0)));
            Table.States (29).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (27, 0),  20, 44)));
            Table.States (30).Action_List.Set_Capacity (4);
            Add_Action (Table.States (30), (8, 11, 13, 21), (30, 3),  3);
            Table.States (30).Kernel := To_Vector ((0 => ((30, 3),  19,  0, (30, 3),  3)));
            Table.States (30).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (30, 3),  3)));
            Table.States (31).Action_List.Set_Capacity (1);
            Add_Action (Table.States (31), 16, (23, 0), 27);
            Table.States (31).Kernel := To_Vector ((((23, 0),  20,  13, (32767, 0),  0), ((23, 1),  20,  12, (32767,
            0),  0), ((23, 2),  20,  10, (32767, 0),  0), ((23, 3),  20,  9, (32767, 0),  0)));
            Table.States (31).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (23, 0),  16, 27)));
            Table.States (32).Action_List.Set_Capacity (1);
            Add_Action (Table.States (32), 19, (30, 2), 45);
            Table.States (32).Kernel := To_Vector ((0 => ((30, 2),  23,  1, (32767, 0),  0)));
            Table.States (32).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (30, 2),  19, 45)));
            Table.States (33).Action_List.Set_Capacity (3);
            Add_Action (Table.States (33), 4, (23, 4), 9);
            Add_Action (Table.States (33), 19, (30, 1), 46);
            Add_Action (Table.States (33), 20, (23, 0), 31);
            Table.States (33).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (33), 23, 47);
            Table.States (33).Kernel := To_Vector ((((30, 0),  29,  9, (32767, 0),  0), ((30, 1),  29,  1, (32767, 0),
            0), ((30, 9),  29,  9, (32767, 0),  0), ((30, 10),  29,  1, (32767, 0),  0)));
            Table.States (33).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (30, 1),  19, 46)));
            Table.States (34).Action_List.Set_Capacity (4);
            Add_Action (Table.States (34), (8, 11, 13, 21), (30, 5),  3);
            Table.States (34).Kernel := To_Vector ((0 => ((30, 5),  19,  0, (30, 5),  3)));
            Table.States (34).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (30, 5),  3)));
            Table.States (35).Action_List.Set_Capacity (1);
            Add_Action (Table.States (35), 19, (30, 4), 48);
            Table.States (35).Kernel := To_Vector ((0 => ((30, 4),  23,  1, (32767, 0),  0)));
            Table.States (35).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (30, 4),  19, 48)));
            Table.States (36).Action_List.Set_Capacity (1);
            Add_Action (Table.States (36), 5, (30, 8), 49);
            Table.States (36).Kernel := To_Vector ((0 => ((30, 8),  29,  3, (32767, 0),  0)));
            Table.States (36).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (30, 8),  5, 49)));
            Table.States (37).Action_List.Set_Capacity (1);
            Add_Action (Table.States (37), 20, (27, 1), 16);
            Table.States (37).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (37), 27, 50);
            Table.States (37).Kernel := To_Vector ((0 => ((28, 1),  17,  1, (32767, 0),  0)));
            Table.States (37).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (27, 1),  20, 16)));
            Table.States (38).Action_List.Set_Capacity (4);
            Add_Action (Table.States (38), (8, 11, 13, 21), (32, 0),  3);
            Table.States (38).Kernel := To_Vector ((0 => ((32, 0),  19,  0, (32, 0),  3)));
            Table.States (38).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (32, 0),  3)));
            Table.States (39).Action_List.Set_Capacity (1);
            Add_Action (Table.States (39), 9, (26, 0), 51);
            Table.States (39).Kernel := To_Vector ((0 => ((26, 0),  20,  4, (32767, 0),  0)));
            Table.States (39).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (26, 0),  9, 51)));
            Table.States (40).Action_List.Set_Capacity (2);
            Add_Action (Table.States (40), 19, Reduce, (23, 7),  3);
            Add_Action (Table.States (40), 20, (23, 6), 52);
            Table.States (40).Kernel := To_Vector ((((23, 6),  5,  1, (32767, 0),  0), ((23, 7),  5,  0, (23, 7),
            3)));
            Table.States (40).Minimal_Complete_Actions := To_Vector (((Shift, (23, 6),  20, 52), (Reduce, (23, 7),
            3)));
            Table.States (41).Action_List.Set_Capacity (1);
            Add_Action (Table.States (41), 12, (23, 4), 53);
            Table.States (41).Kernel := To_Vector ((((23, 4),  6,  4, (32767, 0),  0), ((23, 5),  6,  3, (32767, 0),
            0)));
            Table.States (41).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (23, 4),  12, 53)));
            Table.States (42).Action_List.Set_Capacity (4);
            Add_Action (Table.States (42), (4, 5, 19, 20), (29, 0),  3);
            Table.States (42).Kernel := To_Vector ((0 => ((29, 0),  15,  0, (29, 0),  3)));
            Table.States (42).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (29, 0),  3)));
            Table.States (43).Action_List.Set_Capacity (1);
            Add_Action (Table.States (43), 7, (26, 0), 23);
            Table.States (43).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (43), 26, 54);
            Table.States (43).Kernel := To_Vector ((((23, 0),  4,  11, (32767, 0),  0), ((23, 1),  4,  10, (32767, 0),
            0), ((23, 2),  4,  8, (32767, 0),  0), ((23, 3),  4,  7, (32767, 0),  0)));
            Table.States (43).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (26, 0),  7, 23)));
            Table.States (44).Action_List.Set_Capacity (8);
            Add_Action (Table.States (44), (4, 5, 10, 14, 17, 18, 19, 20), (27, 0),  3);
            Table.States (44).Kernel := To_Vector ((0 => ((27, 0),  20,  0, (27, 0),  3)));
            Table.States (44).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (27, 0),  3)));
            Table.States (45).Action_List.Set_Capacity (4);
            Add_Action (Table.States (45), (8, 11, 13, 21), (30, 2),  4);
            Table.States (45).Kernel := To_Vector ((0 => ((30, 2),  19,  0, (30, 2),  4)));
            Table.States (45).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (30, 2),  4)));
            Table.States (46).Action_List.Set_Capacity (4);
            Add_Action (Table.States (46), (8, 11, 13, 21), (30, 1),  4);
            Table.States (46).Kernel := To_Vector ((((30, 1),  19,  0, (30, 1),  4), ((30, 10),  19,  0, (30, 10),
            4)));
            Table.States (46).Minimal_Complete_Actions := To_Vector (((Reduce, (30, 1),  4), (Reduce, (30, 10),  4)));
            Table.States (47).Action_List.Set_Capacity (1);
            Add_Action (Table.States (47), 19, (30, 0), 55);
            Table.States (47).Kernel := To_Vector ((((30, 0),  23,  1, (32767, 0),  0), ((30, 9),  23,  1, (32767, 0),
            0)));
            Table.States (47).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (30, 0),  19, 55)));
            Table.States (48).Action_List.Set_Capacity (4);
            Add_Action (Table.States (48), (8, 11, 13, 21), (30, 4),  4);
            Table.States (48).Kernel := To_Vector ((0 => ((30, 4),  19,  0, (30, 4),  4)));
            Table.States (48).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (30, 4),  4)));
            Table.States (49).Action_List.Set_Capacity (1);
            Add_Action (Table.States (49), 20, (27, 1), 16);
            Table.States (49).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (49), 27, 56);
            Table.States (49).Kernel := To_Vector ((0 => ((30, 8),  5,  2, (32767, 0),  0)));
            Table.States (49).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (27, 1),  20, 16)));
            Table.States (50).Action_List.Set_Capacity (3);
            Add_Action (Table.States (50), 17, Reduce, (28, 1),  3);
            Add_Action (Table.States (50), 18, (27, 0), 29);
            Add_Action (Table.States (50), 19, Reduce, (28, 1),  3);
            Table.States (50).Kernel := To_Vector ((((27, 0),  27,  2, (32767, 0),  0), ((28, 1),  27,  0, (28, 1),
            3)));
            Table.States (50).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (28, 1),  3)));
            Table.States (51).Action_List.Set_Capacity (1);
            Add_Action (Table.States (51), 20, (27, 1), 16);
            Table.States (51).Goto_List.Set_Capacity (2);
            Add_Goto (Table.States (51), 27, 57);
            Add_Goto (Table.States (51), 31, 58);
            Table.States (51).Kernel := To_Vector ((0 => ((26, 0),  9,  3, (32767, 0),  0)));
            Table.States (51).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (27, 1),  20, 16)));
            Table.States (52).Action_List.Set_Capacity (1);
            Add_Action (Table.States (52), (1 =>  19), (23, 6),  4);
            Table.States (52).Kernel := To_Vector ((0 => ((23, 6),  20,  0, (23, 6),  4)));
            Table.States (52).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (23, 6),  4)));
            Table.States (53).Action_List.Set_Capacity (1);
            Add_Action (Table.States (53), 20, (27, 1), 16);
            Table.States (53).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (53), 27, 59);
            Table.States (53).Kernel := To_Vector ((((23, 4),  12,  3, (32767, 0),  0), ((23, 5),  12,  2, (32767, 0),
            0)));
            Table.States (53).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (27, 1),  20, 16)));
            Table.States (54).Action_List.Set_Capacity (2);
            Add_Action (Table.States (54), 5, (23, 2), 60);
            Add_Action (Table.States (54), 6, (23, 0), 61);
            Table.States (54).Kernel := To_Vector ((((23, 0),  26,  5, (32767, 0),  0), ((23, 1),  26,  4, (32767, 0),
            0), ((23, 2),  26,  2, (32767, 0),  0), ((23, 3),  26,  1, (32767, 0),  0)));
            Table.States (54).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (23, 2),  5, 60)));
            Table.States (55).Action_List.Set_Capacity (4);
            Add_Action (Table.States (55), (8, 11, 13, 21), (30, 0),  5);
            Table.States (55).Kernel := To_Vector ((((30, 0),  19,  0, (30, 0),  5), ((30, 9),  19,  0, (30, 9),  5)));
            Table.States (55).Minimal_Complete_Actions := To_Vector (((Reduce, (30, 0),  5), (Reduce, (30, 9),  5)));
            Table.States (56).Action_List.Set_Capacity (2);
            Add_Action (Table.States (56), 18, (27, 0), 29);
            Add_Action (Table.States (56), 19, (30, 8), 62);
            Table.States (56).Kernel := To_Vector ((((27, 0),  27,  2, (32767, 0),  0), ((30, 8),  27,  1, (32767, 0),
            0)));
            Table.States (56).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (30, 8),  19, 62)));
            Table.States (57).Action_List.Set_Capacity (2);
            Add_Action (Table.States (57), 10, Reduce, (31, 0),  1);
            Add_Action (Table.States (57), 18, (27, 0), 29);
            Table.States (57).Kernel := To_Vector ((((27, 0),  27,  2, (32767, 0),  0), ((31, 0),  27,  0, (31, 0),
            1)));
            Table.States (57).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (31, 0),  1)));
            Table.States (58).Action_List.Set_Capacity (1);
            Add_Action (Table.States (58), 10, (26, 0), 63);
            Table.States (58).Kernel := To_Vector ((0 => ((26, 0),  31,  2, (32767, 0),  0)));
            Table.States (58).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (26, 0),  10, 63)));
            Table.States (59).Action_List.Set_Capacity (2);
            Add_Action (Table.States (59), 5, (23, 4), 64);
            Add_Action (Table.States (59), 18, (27, 0), 29);
            Table.States (59).Kernel := To_Vector ((((23, 4),  27,  2, (32767, 0),  0), ((23, 5),  27,  1, (32767, 0),
            0), ((27, 0),  27,  2, (32767, 0),  0)));
            Table.States (59).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (23, 4),  5, 64)));
            Table.States (60).Action_List.Set_Capacity (2);
            Add_Action (Table.States (60), 19, Reduce, (23, 3),  5);
            Add_Action (Table.States (60), 20, (23, 2), 65);
            Table.States (60).Kernel := To_Vector ((((23, 2),  5,  1, (32767, 0),  0), ((23, 3),  5,  0, (23, 3),
            5)));
            Table.States (60).Minimal_Complete_Actions := To_Vector (((Shift, (23, 2),  20, 65), (Reduce, (23, 3),
            5)));
            Table.States (61).Action_List.Set_Capacity (1);
            Add_Action (Table.States (61), 12, (23, 0), 66);
            Table.States (61).Kernel := To_Vector ((((23, 0),  6,  4, (32767, 0),  0), ((23, 1),  6,  3, (32767, 0),
            0)));
            Table.States (61).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (23, 0),  12, 66)));
            Table.States (62).Action_List.Set_Capacity (4);
            Add_Action (Table.States (62), (8, 11, 13, 21), (30, 8),  6);
            Table.States (62).Kernel := To_Vector ((0 => ((30, 8),  19,  0, (30, 8),  6)));
            Table.States (62).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (30, 8),  6)));
            Table.States (63).Action_List.Set_Capacity (1);
            Add_Action (Table.States (63), 19, (26, 0), 67);
            Table.States (63).Kernel := To_Vector ((0 => ((26, 0),  10,  1, (32767, 0),  0)));
            Table.States (63).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (26, 0),  19, 67)));
            Table.States (64).Action_List.Set_Capacity (2);
            Add_Action (Table.States (64), 19, Reduce, (23, 5),  6);
            Add_Action (Table.States (64), 20, (23, 4), 68);
            Table.States (64).Kernel := To_Vector ((((23, 4),  5,  1, (32767, 0),  0), ((23, 5),  5,  0, (23, 5),
            6)));
            Table.States (64).Minimal_Complete_Actions := To_Vector (((Shift, (23, 4),  20, 68), (Reduce, (23, 5),
            6)));
         end Subr_1;
         procedure Subr_2
         is begin
            Table.States (65).Action_List.Set_Capacity (1);
            Add_Action (Table.States (65), (1 =>  19), (23, 2),  6);
            Table.States (65).Kernel := To_Vector ((0 => ((23, 2),  20,  0, (23, 2),  6)));
            Table.States (65).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (23, 2),  6)));
            Table.States (66).Action_List.Set_Capacity (1);
            Add_Action (Table.States (66), 20, (27, 1), 16);
            Table.States (66).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (66), 27, 69);
            Table.States (66).Kernel := To_Vector ((((23, 0),  12,  3, (32767, 0),  0), ((23, 1),  12,  2, (32767, 0),
            0)));
            Table.States (66).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (27, 1),  20, 16)));
            Table.States (67).Action_List.Set_Capacity (2);
            Add_Action (Table.States (67), (5, 6), (26, 0),  6);
            Table.States (67).Kernel := To_Vector ((0 => ((26, 0),  19,  0, (26, 0),  6)));
            Table.States (67).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (26, 0),  6)));
            Table.States (68).Action_List.Set_Capacity (1);
            Add_Action (Table.States (68), (1 =>  19), (23, 4),  7);
            Table.States (68).Kernel := To_Vector ((0 => ((23, 4),  20,  0, (23, 4),  7)));
            Table.States (68).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (23, 4),  7)));
            Table.States (69).Action_List.Set_Capacity (2);
            Add_Action (Table.States (69), 5, (23, 0), 70);
            Add_Action (Table.States (69), 18, (27, 0), 29);
            Table.States (69).Kernel := To_Vector ((((23, 0),  27,  2, (32767, 0),  0), ((23, 1),  27,  1, (32767, 0),
            0), ((27, 0),  27,  2, (32767, 0),  0)));
            Table.States (69).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (23, 0),  5, 70)));
            Table.States (70).Action_List.Set_Capacity (2);
            Add_Action (Table.States (70), 19, Reduce, (23, 1),  8);
            Add_Action (Table.States (70), 20, (23, 0), 71);
            Table.States (70).Kernel := To_Vector ((((23, 0),  5,  1, (32767, 0),  0), ((23, 1),  5,  0, (23, 1),
            8)));
            Table.States (70).Minimal_Complete_Actions := To_Vector (((Shift, (23, 0),  20, 71), (Reduce, (23, 1),
            8)));
            Table.States (71).Action_List.Set_Capacity (1);
            Add_Action (Table.States (71), (1 =>  19), (23, 0),  9);
            Table.States (71).Kernel := To_Vector ((0 => ((23, 0),  20,  0, (23, 0),  9)));
            Table.States (71).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (23, 0),  9)));
         end Subr_2;
      begin
         Subr_1;
         Subr_2;
         Table.Error_Action := new Parse_Action_Node'((Verb => Error, others => <>), null);
      end;

      Table.Error_Recover_Enabled := True;
      Table.McKenzie_Param := McKenzie_Param;
      Table.Max_Parallel := 10;
      return Table;
   end Create_Parse_Table;

   function Create_Lexer (Trace : in WisiToken.Trace_Access) return WisiToken.Lexer.Handle
   is begin
      return Lexer.New_Lexer (Trace, Subprograms_Process_Actions.Descriptor'Access);
   end Create_Lexer;

   function Create_Productions return WisiToken.Syntax_Trees.Production_Info_Trees.Vector
   is begin
      return Result : WisiToken.Syntax_Trees.Production_Info_Trees.Vector do
         Result.Set_First_Last (22, 34);
         Result (23).RHSs.Set_First_Last (0, 7);
         Result (23).RHSs (0).In_Parse_Action := block_0_check'Access;
         Result (23).RHSs (0).Post_Parse_Action := block_0'Access;
         Result (23).RHSs (1).In_Parse_Action := null;
         Result (23).RHSs (1).Post_Parse_Action := block_1'Access;
         Result (23).RHSs (2).In_Parse_Action := block_2_check'Access;
         Result (23).RHSs (2).Post_Parse_Action := block_2'Access;
         Result (23).RHSs (3).In_Parse_Action := null;
         Result (23).RHSs (3).Post_Parse_Action := block_3'Access;
         Result (23).RHSs (4).In_Parse_Action := null;
         Result (23).RHSs (4).Post_Parse_Action := block_4'Access;
         Result (23).RHSs (5).In_Parse_Action := null;
         Result (23).RHSs (5).Post_Parse_Action := block_5'Access;
         Result (23).RHSs (6).In_Parse_Action := null;
         Result (23).RHSs (6).Post_Parse_Action := block_6'Access;
         Result (23).RHSs (7).In_Parse_Action := null;
         Result (23).RHSs (7).Post_Parse_Action := block_7'Access;
         Result (24).RHSs.Set_First_Last (0, 1);
         Result (24).RHSs (0).In_Parse_Action := compilation_unit_0_check'Access;
         Result (24).RHSs (0).Post_Parse_Action := null;
         Result (24).RHSs (1).In_Parse_Action := null;
         Result (24).RHSs (1).Post_Parse_Action := null;
         Result (26).RHSs.Set_First_Last (0, 0);
         Result (26).RHSs (0).In_Parse_Action := null;
         Result (26).RHSs (0).Post_Parse_Action := loop_statement_0'Access;
         Result (27).RHSs.Set_First_Last (0, 1);
         Result (27).RHSs (0).In_Parse_Action := name_0_check'Access;
         Result (27).RHSs (0).Post_Parse_Action := name_0'Access;
         Result (27).RHSs (1).In_Parse_Action := name_1_check'Access;
         Result (27).RHSs (1).Post_Parse_Action := name_1'Access;
         Result (28).RHSs.Set_First_Last (0, 1);
         Result (28).RHSs (0).In_Parse_Action := null;
         Result (28).RHSs (0).Post_Parse_Action := name_list_0'Access;
         Result (28).RHSs (1).In_Parse_Action := null;
         Result (28).RHSs (1).Post_Parse_Action := name_list_1'Access;
         Result (29).RHSs.Set_First_Last (0, 1);
         Result (29).RHSs (0).In_Parse_Action := null;
         Result (29).RHSs (0).Post_Parse_Action := parameter_list_0'Access;
         Result (29).RHSs (1).In_Parse_Action := null;
         Result (29).RHSs (1).Post_Parse_Action := parameter_list_1'Access;
         Result (30).RHSs.Set_First_Last (0, 10);
         Result (30).RHSs (0).In_Parse_Action := null;
         Result (30).RHSs (0).Post_Parse_Action := subprogram_0'Access;
         Result (30).RHSs (1).In_Parse_Action := null;
         Result (30).RHSs (1).Post_Parse_Action := subprogram_1'Access;
         Result (30).RHSs (2).In_Parse_Action := null;
         Result (30).RHSs (2).Post_Parse_Action := subprogram_2'Access;
         Result (30).RHSs (3).In_Parse_Action := null;
         Result (30).RHSs (3).Post_Parse_Action := subprogram_3'Access;
         Result (30).RHSs (4).In_Parse_Action := null;
         Result (30).RHSs (4).Post_Parse_Action := subprogram_4'Access;
         Result (30).RHSs (5).In_Parse_Action := null;
         Result (30).RHSs (5).Post_Parse_Action := subprogram_5'Access;
         Result (30).RHSs (6).In_Parse_Action := null;
         Result (30).RHSs (6).Post_Parse_Action := subprogram_6'Access;
         Result (30).RHSs (7).In_Parse_Action := null;
         Result (30).RHSs (7).Post_Parse_Action := subprogram_7'Access;
         Result (30).RHSs (8).In_Parse_Action := null;
         Result (30).RHSs (8).Post_Parse_Action := subprogram_8'Access;
         Result (30).RHSs (9).In_Parse_Action := null;
         Result (30).RHSs (9).Post_Parse_Action := subprogram_9'Access;
         Result (30).RHSs (10).In_Parse_Action := null;
         Result (30).RHSs (10).Post_Parse_Action := subprogram_10'Access;
         Result (31).RHSs.Set_First_Last (0, 0);
         Result (31).RHSs (0).In_Parse_Action := null;
         Result (31).RHSs (0).Post_Parse_Action := subtype_0'Access;
         Result (32).RHSs.Set_First_Last (0, 0);
         Result (32).RHSs (0).In_Parse_Action := null;
         Result (32).RHSs (0).Post_Parse_Action := use_clause_0'Access;
         Result (33).Optimized_List := True;
      end return;
   end Create_Productions;

end Subprograms_Process_LALR_Main;
