--  generated parser support file. -*- buffer-read-only:t  -*-
--  command line: wisitoken-bnf-generate.exe  --generate LALR Ada_Emacs re2c PROCESS ../test/bnf/subprograms.wy
--

--  Copyright (C) 2013, 2017 - 2021, 2023 Stephen Leake.  All Rights Reserved.

--  This program is free software; you can redistribute it and/or
--  modify it under the terms of the GNU General Public License as
--  published by the Free Software Foundation; either version 3, or (at
--  your option) any later version.
--
--  This software is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

with SAL;
with WisiToken.Lexer.re2c;
with subprograms_re2c_c;
with Subprograms_Process_LALR_Actions; use Subprograms_Process_LALR_Actions;
package body Subprograms_Process_LALR_Main is

   function Is_Block_Delimited (ID : in WisiToken.Token_ID) return Boolean
   is begin
      case To_Token_Enum (ID) is
      when
         COMMENT_1_ID |
         COMMENT_2_ID => return True;
      when others => return False;
      end case;
   end Is_Block_Delimited;

   function Same_Block_Delimiters (ID : in WisiToken.Token_ID) return Boolean
   is begin
      case To_Token_Enum (ID) is
      when COMMENT_1_ID => return False;
      when COMMENT_2_ID => return False;
      when others => return False;
      end case;
   end Same_Block_Delimiters;

   function Escape_Delimiter_Doubled (ID : in WisiToken.Token_ID) return Boolean
   is begin
      case To_Token_Enum (ID) is
      when others => return False;
      end case;
   end Escape_Delimiter_Doubled;

   function Start_Delimiter_Length (ID : in WisiToken.Token_ID) return Integer
   is begin
      case To_Token_Enum (ID) is
      when COMMENT_1_ID => return 2;
      when COMMENT_2_ID => return 2;
      when others => raise SAL.Programmer_Error; return 0;
      end case;
   end Start_Delimiter_Length;

   function End_Delimiter_Length (ID : in WisiToken.Token_ID) return Integer
   is begin
      case To_Token_Enum (ID) is
      when
         COMMENT_1_ID |
         COMMENT_2_ID => return 1;
      when others => raise SAL.Programmer_Error; return 0;
      end case;
   end End_Delimiter_Length;

   function New_Line_Is_End_Delimiter (ID : in WisiToken.Token_ID) return Boolean
   is begin
      return
        (case To_Token_Enum (ID) is
         when COMMENT_1_ID => True,
         when COMMENT_2_ID => True,
         when others => raise SAL.Programmer_Error);
   end New_Line_Is_End_Delimiter;

   function Find_End_Delimiter
     (Source      : in WisiToken.Lexer.Source;
      ID          : in WisiToken.Token_ID;
      Token_Start : in WisiToken.Buffer_Pos)
     return WisiToken.Buffer_Pos
   is begin
      return
        (case To_Token_Enum (ID) is
         when COMMENT_1_ID => WisiToken.Lexer.Find_New_Line (Source, Token_Start),
         when COMMENT_2_ID => WisiToken.Lexer.Find_New_Line (Source, Token_Start),
         when others => raise SAL.Programmer_Error);
   end Find_End_Delimiter;

   function Find_Scan_End
     (Source   : in WisiToken.Lexer.Source;
      ID       : in WisiToken.Token_ID;
      Region   : in WisiToken.Buffer_Region;
      Inserted : in Boolean;
      Start    : in Boolean)
     return WisiToken.Buffer_Pos
   is
      use WisiToken;
   begin
      return
        (case To_Token_Enum (ID) is
         when COMMENT_1_ID =>
         (if Inserted then Region.Last
          elsif Start then Region.Last
          else Lexer.Find_New_Line (Source, Region.Last)),
         when COMMENT_2_ID =>
         (if Inserted then Region.Last
          elsif Start then Region.Last
          else Lexer.Find_New_Line (Source, Region.Last)),
         when others => raise SAL.Programmer_Error);
   end Find_Scan_End;

   function Contains_End_Delimiter
     (Source : in WisiToken.Lexer.Source;
      ID     : in WisiToken.Token_ID;
      Region : in WisiToken.Buffer_Region)
     return WisiToken.Base_Buffer_Pos
   is
      use WisiToken;
   begin
      return
        (case To_Token_Enum (ID) is
         when COMMENT_1_ID => Lexer.Find_New_Line (Source, Region),
         when COMMENT_2_ID => Lexer.Find_New_Line (Source, Region),
         when others => raise SAL.Programmer_Error);
   end Contains_End_Delimiter;

   function Line_Begin_Char_Pos
    (Source : in WisiToken.Lexer.Source;
     Token  : in WisiToken.Lexer.Token;
     Line   : in WisiToken.Line_Number_Type)
   return WisiToken.Buffer_Pos
   is
      pragma Unreferenced (Source, Line);
      use all type WisiToken.Base_Buffer_Pos;
   begin
      case To_Token_Enum (Token.ID) is
      when NEW_LINE_ID => return Token.Char_Region.Last + 1;
      when COMMENT_1_ID => return Token.Char_Region.Last + 1;
      when COMMENT_2_ID => return Token.Char_Region.Last + 1;
      when others => raise SAL.Programmer_Error;
      end case;
   end Line_Begin_Char_Pos;

   function Can_Contain_New_Line (ID : in WisiToken.Token_ID) return Boolean
   is begin
      case To_Token_Enum (ID) is
      when NEW_LINE_ID => return True;
      when COMMENT_1_ID => return True;
      when COMMENT_2_ID => return True;
      when others => return False;
      end case;
   end Can_Contain_New_Line;

   function Terminated_By_New_Line (ID : in WisiToken.Token_ID) return Boolean
   is begin
      case To_Token_Enum (ID) is
      when NEW_LINE_ID => return True;
      when COMMENT_1_ID => return True;
      when COMMENT_2_ID => return True;
      when others => return False;
      end case;
   end Terminated_By_New_Line;

   package Lexer is new WisiToken.Lexer.re2c
     (subprograms_re2c_c.New_Lexer,
      subprograms_re2c_c.Free_Lexer,
      subprograms_re2c_c.Reset_Lexer,
      subprograms_re2c_c.Set_Verbosity,
      subprograms_re2c_c.Set_Position,
      subprograms_re2c_c.Next_Token,
      Is_Block_Delimited,
      Same_Block_Delimiters,
      Escape_Delimiter_Doubled,
      Start_Delimiter_Length,
      End_Delimiter_Length,
      New_Line_Is_End_Delimiter,
      Find_End_Delimiter,
      Contains_End_Delimiter,
      Find_Scan_End,
      Line_Begin_Char_Pos,
      Can_Contain_New_Line,
      Terminated_By_New_Line);

   function Create_Parse_Table
     return WisiToken.Parse.LR.Parse_Table_Ptr
   is
      use WisiToken.Parse.LR;
      McKenzie_Param : constant McKenzie_Param_Type :=
        (First_Terminal    => 4,
         Last_Terminal     => 24,
         First_Nonterminal => 25,
         Last_Nonterminal  => 39,
         Insert =>
           (4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4),
         Delete =>
           (4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4),
         Push_Back =>
           (4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
            4),
         Undo_Reduce =>
           (4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4),
         Minimal_Complete_Cost_Delta => -1,
         Fast_Forward =>  0,
         Matching_Begin =>  0,
         Ignore_Check_Fail  => 4,
         Check_Limit => 3,
         Zombie_Limit => 3,
         Check_Delta_Limit => 200,
         Enqueue_Limit => 10000);

      Table : constant Parse_Table_Ptr := new Parse_Table
        (State_First       => 0,
         State_Last        => 114,
         First_Terminal    => 4,
         Last_Terminal     => 24,
         First_Nonterminal => 25,
         Last_Nonterminal  => 39);
   begin
      declare
         procedure Subr_1
         is begin
            Table.States (0).Action_List.Set_Capacity (3);
            Add_Action (Table.States (0), 8, (37, 0), 1);
            Add_Action (Table.States (0), 13, (37, 8), 2);
            Add_Action (Table.States (0), 15, (39, 0), 3);
            Table.States (0).Goto_List.Set_Capacity (4);
            Add_Goto (Table.States (0), 28, 4);
            Add_Goto (Table.States (0), 29, 5);
            Add_Goto (Table.States (0), 37, 6);
            Add_Goto (Table.States (0), 39, 7);
            Table.States (1).Action_List.Set_Capacity (4);
            Add_Action (Table.States (1), 4, (26, 4), 8);
            Add_Action (Table.States (1), 17, (36, 0), 9);
            Add_Action (Table.States (1), 22, (37, 7), 10);
            Add_Action (Table.States (1), 23, (26, 0), 11);
            Table.States (1).Goto_List.Set_Capacity (3);
            Add_Goto (Table.States (1), 26, 12);
            Add_Goto (Table.States (1), 34, 13);
            Add_Goto (Table.States (1), 36, 14);
            Table.States (1).Kernel := To_Vector ((((37, 0),  8,  6, (32767, 0),  0), ((37, 1),  8,  4, (32767, 0),
            0), ((37, 2),  8,  4, (32767, 0),  0), ((37, 3),  8,  2, (32767, 0),  0), ((37, 4),  8,  5, (32767, 0),
            0), ((37, 5),  8,  3, (32767, 0),  0), ((37, 6),  8,  3, (32767, 0),  0), ((37, 7),  8,  1, (32767, 0),
            0), ((37, 9),  8,  6, (32767, 0),  0), ((37, 10),  8,  4, (32767, 0),  0)));
            Table.States (1).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (37, 7),  22, 10)));
            Table.States (2).Action_List.Set_Capacity (1);
            Add_Action (Table.States (2), 23, (34, 1), 15);
            Table.States (2).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (2), 34, 16);
            Table.States (2).Kernel := To_Vector ((0 => ((37, 8),  13,  6, (32767, 0),  0)));
            Table.States (2).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (34, 1),  23, 15)));
            Table.States (3).Action_List.Set_Capacity (1);
            Add_Action (Table.States (3), 23, (34, 1), 15);
            Table.States (3).Goto_List.Set_Capacity (2);
            Add_Goto (Table.States (3), 34, 17);
            Add_Goto (Table.States (3), 35, 18);
            Table.States (3).Kernel := To_Vector ((0 => ((39, 0),  15,  2, (32767, 0),  0)));
            Table.States (3).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (34, 1),  23, 15)));
            Table.States (4).Action_List.Set_Capacity (4);
            Add_Action (Table.States (4), 8, (37, 0), 1);
            Add_Action (Table.States (4), 13, (37, 8), 2);
            Add_Action (Table.States (4), 15, (39, 0), 3);
            Add_Action (Table.States (4), 24, Accept_It, (25, 0),  1);
            Table.States (4).Goto_List.Set_Capacity (4);
            Add_Goto (Table.States (4), 28, 19);
            Add_Goto (Table.States (4), 29, 20);
            Add_Goto (Table.States (4), 37, 6);
            Add_Goto (Table.States (4), 39, 7);
            Table.States (5).Action_List.Set_Capacity (4);
            Add_Action (Table.States (5), (8, 13, 15, 24), (28, 0),  1);
            Table.States (5).Kernel := To_Vector ((0 => ((28, 0),  29,  0, (28, 0),  1)));
            Table.States (5).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (28, 0),  1)));
            Table.States (6).Action_List.Set_Capacity (4);
            Add_Action (Table.States (6), (8, 13, 15, 24), (29, 0),  1);
            Table.States (6).Kernel := To_Vector ((0 => ((29, 0),  37,  0, (29, 0),  1)));
            Table.States (6).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (29, 0),  1)));
            Table.States (7).Action_List.Set_Capacity (4);
            Add_Action (Table.States (7), (8, 13, 15, 24), (29, 1),  1);
            Table.States (7).Kernel := To_Vector ((0 => ((29, 1),  39,  0, (29, 1),  1)));
            Table.States (7).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (29, 1),  1)));
            Table.States (8).Action_List.Set_Capacity (2);
            Add_Action (Table.States (8), 7, (31, 0), 21);
            Add_Action (Table.States (8), 12, (31, 1), 22);
            Table.States (8).Goto_List.Set_Capacity (2);
            Add_Goto (Table.States (8), 30, 23);
            Add_Goto (Table.States (8), 31, 24);
            Table.States (8).Kernel := To_Vector ((((26, 4),  4,  10, (32767, 0),  0), ((26, 5),  4,  9, (32767, 0),
            0), ((26, 6),  4,  7, (32767, 0),  0), ((26, 7),  4,  6, (32767, 0),  0)));
            Table.States (8).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (31, 0),  7, 21)));
            Table.States (9).Action_List.Set_Capacity (2);
            Add_Action (Table.States (9), 18, (36, 1), 25);
            Add_Action (Table.States (9), 23, (36, 0), 26);
            Table.States (9).Kernel := To_Vector ((((36, 0),  17,  2, (32767, 0),  0), ((36, 1),  17,  1, (32767, 0),
            0)));
            Table.States (9).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (36, 1),  18, 25)));
            Table.States (10).Action_List.Set_Capacity (4);
            Add_Action (Table.States (10), (8, 13, 15, 24), (37, 7),  2);
            Table.States (10).Kernel := To_Vector ((0 => ((37, 7),  22,  0, (37, 7),  2)));
            Table.States (10).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (37, 7),  2)));
            Table.States (11).Action_List.Set_Capacity (6);
            Add_Action (Table.States (11), 4, Reduce, (34, 1),  1);
            Add_Action (Table.States (11), 17, Reduce, (34, 1),  1);
            Add_Action (Table.States (11), 19, (26, 0), 27);
            Add_Action (Table.States (11), 21, Reduce, (34, 1),  1);
            Add_Action (Table.States (11), 22, Reduce, (34, 1),  1);
            Add_Action (Table.States (11), 23, Reduce, (34, 1),  1);
            Table.States (11).Kernel := To_Vector ((((26, 0),  23,  12, (32767, 0),  0), ((26, 1),  23,  11, (32767,
            0),  0), ((26, 2),  23,  9, (32767, 0),  0), ((26, 3),  23,  8, (32767, 0),  0), ((34, 1),  23,  0, (34,
            1),  1)));
            Table.States (11).Minimal_Complete_Actions := To_Vector (((Shift, (26, 0),  19, 27), (Reduce, (34, 1),
            1)));
            Table.States (12).Action_List.Set_Capacity (1);
            Add_Action (Table.States (12), 22, (37, 6), 28);
            Table.States (12).Kernel := To_Vector ((0 => ((37, 6),  26,  1, (32767, 0),  0)));
            Table.States (12).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (37, 6),  22, 28)));
            Table.States (13).Action_List.Set_Capacity (5);
            Add_Action (Table.States (13), 4, (26, 4), 8);
            Add_Action (Table.States (13), 17, (27, 0), 29);
            Add_Action (Table.States (13), 21, (34, 0), 30);
            Add_Action (Table.States (13), 22, (26, 9), 31);
            Add_Action (Table.States (13), 23, (26, 0), 11);
            Table.States (13).Goto_List.Set_Capacity (4);
            Add_Goto (Table.States (13), 26, 32);
            Add_Goto (Table.States (13), 27, 33);
            Add_Goto (Table.States (13), 34, 34);
            Add_Goto (Table.States (13), 36, 35);
            Table.States (13).Kernel := To_Vector ((((26, 8),  34,  4, (32767, 0),  0), ((26, 9),  34,  1, (32767, 0),
            0), ((34, 0),  34,  2, (32767, 0),  0), ((37, 0),  34,  5, (32767, 0),  0), ((37, 1),  34,  3, (32767, 0),
            0), ((37, 2),  34,  3, (32767, 0),  0), ((37, 3),  34,  1, (32767, 0),  0), ((37, 9),  34,  5, (32767, 0),
            0), ((37, 10),  34,  3, (32767, 0),  0)));
            Table.States (13).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (26, 9),  22, 31)));
            Table.States (14).Action_List.Set_Capacity (3);
            Add_Action (Table.States (14), 4, (26, 4), 8);
            Add_Action (Table.States (14), 22, (37, 5), 36);
            Add_Action (Table.States (14), 23, (26, 0), 11);
            Table.States (14).Goto_List.Set_Capacity (2);
            Add_Goto (Table.States (14), 26, 37);
            Add_Goto (Table.States (14), 34, 34);
            Table.States (14).Kernel := To_Vector ((((37, 4),  36,  3, (32767, 0),  0), ((37, 5),  36,  1, (32767, 0),
            0)));
            Table.States (14).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (37, 5),  22, 36)));
            Table.States (15).Action_List.Set_Capacity (6);
            Add_Action (Table.States (15), (5, 10, 17, 20, 21, 22), (34, 1),  1);
            Table.States (15).Kernel := To_Vector ((0 => ((34, 1),  23,  0, (34, 1),  1)));
            Table.States (15).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (34, 1),  1)));
            Table.States (16).Action_List.Set_Capacity (2);
            Add_Action (Table.States (16), 17, (36, 0), 9);
            Add_Action (Table.States (16), 21, (34, 0), 30);
            Table.States (16).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (16), 36, 38);
            Table.States (16).Kernel := To_Vector ((((34, 0),  34,  2, (32767, 0),  0), ((37, 8),  34,  5, (32767, 0),
            0)));
            Table.States (16).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (36, 0),  17, 9)));
            Table.States (17).Action_List.Set_Capacity (3);
            Add_Action (Table.States (17), 20, Reduce, (35, 0),  1);
            Add_Action (Table.States (17), 21, (34, 0), 30);
            Add_Action (Table.States (17), 22, Reduce, (35, 0),  1);
            Table.States (17).Kernel := To_Vector ((((34, 0),  34,  2, (32767, 0),  0), ((35, 0),  34,  0, (35, 0),
            1)));
            Table.States (17).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (35, 0),  1)));
            Table.States (18).Action_List.Set_Capacity (2);
            Add_Action (Table.States (18), 20, (35, 1), 39);
            Add_Action (Table.States (18), 22, (39, 0), 40);
            Table.States (18).Kernel := To_Vector ((((35, 1),  35,  2, (32767, 0),  0), ((39, 0),  35,  1, (32767, 0),
            0)));
            Table.States (18).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (39, 0),  22, 40)));
            Table.States (19).Action_List.Set_Capacity (4);
            Add_Action (Table.States (19), (8, 13, 15, 24), (28, 2),  2);
            Table.States (19).Goto_List.Set_Capacity (4);
            Add_Goto (Table.States (19), 28, 19);
            Add_Goto (Table.States (19), 29, 20);
            Add_Goto (Table.States (19), 37, 6);
            Add_Goto (Table.States (19), 39, 7);
            Table.States (19).Kernel := To_Vector ((((28, 1),  28,  2, (32767, 0),  0), ((28, 2),  28,  0, (28, 2),
            2), ((28, 2),  28,  2, (32767, 0),  0)));
            Table.States (19).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (28, 2),  2)));
            Table.States (20).Action_List.Set_Capacity (4);
            Add_Action (Table.States (20), (8, 13, 15, 24), (28, 1),  2);
            Table.States (20).Kernel := To_Vector ((((28, 0),  29,  0, (28, 0),  1), ((28, 1),  29,  0, (28, 1),  2)));
            Table.States (20).Minimal_Complete_Actions := To_Vector (((Reduce, (28, 0),  1), (Reduce, (28, 1),  2)));
            Table.States (21).Action_List.Set_Capacity (1);
            Add_Action (Table.States (21), 23, (31, 0), 41);
            Table.States (21).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (21), 32, 42);
            Table.States (21).Kernel := To_Vector ((((31, 0),  7,  3, (32767, 0),  0), ((31, 3),  7,  2, (32767, 0),
            0)));
            Table.States (21).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (31, 0),  23, 41)));
            Table.States (22).Action_List.Set_Capacity (2);
            Add_Action (Table.States (22), 7, (31, 2), 43);
            Add_Action (Table.States (22), 17, (31, 1), 44);
            Table.States (22).Kernel := To_Vector ((((31, 1),  12,  6, (32767, 0),  0), ((31, 2),  12,  3, (32767, 0),
            0)));
            Table.States (22).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (31, 2),  7, 43)));
            Table.States (23).Action_List.Set_Capacity (2);
            Add_Action (Table.States (23), 5, (26, 6), 45);
            Add_Action (Table.States (23), 6, (26, 4), 46);
            Table.States (23).Kernel := To_Vector ((((26, 4),  30,  5, (32767, 0),  0), ((26, 5),  30,  4, (32767, 0),
            0), ((26, 6),  30,  2, (32767, 0),  0), ((26, 7),  30,  1, (32767, 0),  0)));
            Table.States (23).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (26, 6),  5, 45)));
            Table.States (24).Action_List.Set_Capacity (1);
            Add_Action (Table.States (24), 10, (30, 0), 47);
            Table.States (24).Kernel := To_Vector ((0 => ((30, 0),  31,  2, (32767, 0),  0)));
            Table.States (24).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (30, 0),  10, 47)));
            Table.States (25).Action_List.Set_Capacity (4);
            Add_Action (Table.States (25), (4, 5, 22, 23), (36, 1),  2);
            Table.States (25).Kernel := To_Vector ((0 => ((36, 1),  18,  0, (36, 1),  2)));
            Table.States (25).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (36, 1),  2)));
            Table.States (26).Action_List.Set_Capacity (1);
            Add_Action (Table.States (26), 18, (36, 0), 48);
            Table.States (26).Kernel := To_Vector ((0 => ((36, 0),  23,  1, (32767, 0),  0)));
            Table.States (26).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (36, 0),  18, 48)));
            Table.States (27).Action_List.Set_Capacity (1);
            Add_Action (Table.States (27), 4, (26, 0), 49);
            Table.States (27).Kernel := To_Vector ((((26, 0),  19,  11, (32767, 0),  0), ((26, 1),  19,  10, (32767,
            0),  0), ((26, 2),  19,  8, (32767, 0),  0), ((26, 3),  19,  7, (32767, 0),  0)));
            Table.States (27).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (26, 0),  4, 49)));
            Table.States (28).Action_List.Set_Capacity (4);
            Add_Action (Table.States (28), (8, 13, 15, 24), (37, 6),  3);
            Table.States (28).Kernel := To_Vector ((0 => ((37, 6),  22,  0, (37, 6),  3)));
            Table.States (28).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (37, 6),  3)));
            Table.States (29).Action_List.Set_Capacity (2);
            Add_Action (Table.States (29), 18, (36, 1), 25);
            Add_Action (Table.States (29), 23, (27, 0), 50);
            Table.States (29).Kernel := To_Vector ((((27, 0),  17,  2, (32767, 0),  0), ((36, 0),  17,  2, (32767, 0),
            0), ((36, 1),  17,  1, (32767, 0),  0)));
            Table.States (29).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (36, 1),  18, 25)));
            Table.States (30).Action_List.Set_Capacity (1);
            Add_Action (Table.States (30), 23, (34, 0), 51);
            Table.States (30).Kernel := To_Vector ((0 => ((34, 0),  21,  1, (32767, 0),  0)));
            Table.States (30).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (34, 0),  23, 51)));
            Table.States (31).Action_List.Set_Capacity (5);
            Add_Action (Table.States (31), 8, Reduce, (37, 3),  3);
            Add_Action (Table.States (31), 13, Reduce, (37, 3),  3);
            Add_Action (Table.States (31), 15, Reduce, (37, 3),  3);
            Add_Action (Table.States (31), 22, Reduce, (26, 9),  2);
            Add_Action (Table.States (31), 24, Reduce, (37, 3),  3);
            Table.States (31).Kernel := To_Vector ((((26, 9),  22,  0, (26, 9),  2), ((37, 3),  22,  0, (37, 3),  3)));
            Table.States (31).Minimal_Complete_Actions := To_Vector (((Reduce, (26, 9),  2), (Reduce, (37, 3),  3)));
            Table.States (32).Action_List.Set_Capacity (1);
            Add_Action (Table.States (32), 22, (37, 2), 52);
            Table.States (32).Kernel := To_Vector ((0 => ((37, 2),  26,  1, (32767, 0),  0)));
            Table.States (32).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (37, 2),  22, 52)));
            Table.States (33).Action_List.Set_Capacity (1);
            Add_Action (Table.States (33), 22, (26, 8), 53);
            Table.States (33).Kernel := To_Vector ((0 => ((26, 8),  27,  1, (32767, 0),  0)));
            Table.States (33).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (26, 8),  22, 53)));
            Table.States (34).Action_List.Set_Capacity (3);
            Add_Action (Table.States (34), 17, (27, 0), 54);
            Add_Action (Table.States (34), 21, (34, 0), 30);
            Add_Action (Table.States (34), 22, (26, 9), 55);
            Table.States (34).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (34), 27, 33);
            Table.States (34).Kernel := To_Vector ((((26, 8),  34,  4, (32767, 0),  0), ((26, 9),  34,  1, (32767, 0),
            0), ((34, 0),  34,  2, (32767, 0),  0)));
            Table.States (34).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (26, 9),  22, 55)));
            Table.States (35).Action_List.Set_Capacity (3);
            Add_Action (Table.States (35), 4, (26, 4), 8);
            Add_Action (Table.States (35), 22, (37, 1), 56);
            Add_Action (Table.States (35), 23, (26, 0), 11);
            Table.States (35).Goto_List.Set_Capacity (2);
            Add_Goto (Table.States (35), 26, 57);
            Add_Goto (Table.States (35), 34, 34);
            Table.States (35).Kernel := To_Vector ((((37, 0),  36,  3, (32767, 0),  0), ((37, 1),  36,  1, (32767, 0),
            0), ((37, 9),  36,  3, (32767, 0),  0), ((37, 10),  36,  1, (32767, 0),  0)));
            Table.States (35).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (37, 1),  22, 56)));
            Table.States (36).Action_List.Set_Capacity (4);
            Add_Action (Table.States (36), (8, 13, 15, 24), (37, 5),  3);
            Table.States (36).Kernel := To_Vector ((0 => ((37, 5),  22,  0, (37, 5),  3)));
            Table.States (36).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (37, 5),  3)));
            Table.States (37).Action_List.Set_Capacity (1);
            Add_Action (Table.States (37), 22, (37, 4), 58);
            Table.States (37).Kernel := To_Vector ((0 => ((37, 4),  26,  1, (32767, 0),  0)));
            Table.States (37).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (37, 4),  22, 58)));
            Table.States (38).Action_List.Set_Capacity (1);
            Add_Action (Table.States (38), 5, (37, 8), 59);
            Table.States (38).Kernel := To_Vector ((0 => ((37, 8),  36,  3, (32767, 0),  0)));
            Table.States (38).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (37, 8),  5, 59)));
            Table.States (39).Action_List.Set_Capacity (1);
            Add_Action (Table.States (39), 23, (34, 1), 15);
            Table.States (39).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (39), 34, 60);
            Table.States (39).Kernel := To_Vector ((0 => ((35, 1),  20,  1, (32767, 0),  0)));
            Table.States (39).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (34, 1),  23, 15)));
            Table.States (40).Action_List.Set_Capacity (4);
            Add_Action (Table.States (40), (8, 13, 15, 24), (39, 0),  3);
            Table.States (40).Kernel := To_Vector ((0 => ((39, 0),  22,  0, (39, 0),  3)));
            Table.States (40).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (39, 0),  3)));
            Table.States (41).Action_List.Set_Capacity (5);
            Add_Action (Table.States (41), 9, (31, 0), 61);
            Add_Action (Table.States (41), 11, (32, 8), 62);
            Add_Action (Table.States (41), 14, (32, 10), 63);
            Add_Action (Table.States (41), 19, (32, 0), 64);
            Add_Action (Table.States (41), 23, (34, 1), 15);
            Table.States (41).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (41), 34, 65);
            Table.States (41).Kernel := To_Vector ((((31, 0),  23,  2, (32767, 0),  0), ((32, 0),  23,  5, (32767, 0),
            0), ((32, 1),  23,  4, (32767, 0),  0), ((32, 2),  23,  5, (32767, 0),  0), ((32, 3),  23,  4, (32767, 0),
            0), ((32, 4),  23,  4, (32767, 0),  0), ((32, 5),  23,  3, (32767, 0),  0), ((32, 6),  23,  3, (32767, 0),
            0), ((32, 7),  23,  2, (32767, 0),  0), ((32, 8),  23,  3, (32767, 0),  0), ((32, 9),  23,  2, (32767, 0),
            0), ((32, 10),  23,  2, (32767, 0),  0), ((32, 11),  23,  1, (32767, 0),  0)));
            Table.States (41).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (34, 1),  23, 15)));
            Table.States (42).Action_List.Set_Capacity (1);
            Add_Action (Table.States (42), (1 =>  10), (31, 3),  2);
            Table.States (42).Kernel := To_Vector ((0 => ((31, 3),  32,  0, (31, 3),  2)));
            Table.States (42).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (31, 3),  2)));
            Table.States (43).Action_List.Set_Capacity (1);
            Add_Action (Table.States (43), 23, (32, 0), 66);
            Table.States (43).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (43), 32, 67);
            Table.States (43).Kernel := To_Vector ((0 => ((31, 2),  7,  2, (32767, 0),  0)));
            Table.States (43).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (32, 0),  23, 66)));
            Table.States (44).Action_List.Set_Capacity (1);
            Add_Action (Table.States (44), 23, (33, 0), 68);
            Table.States (44).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (44), 33, 69);
            Table.States (44).Kernel := To_Vector ((0 => ((31, 1),  17,  5, (32767, 0),  0)));
            Table.States (44).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (33, 0),  23, 68)));
            Table.States (45).Action_List.Set_Capacity (2);
            Add_Action (Table.States (45), 22, Reduce, (26, 7),  3);
            Add_Action (Table.States (45), 23, (26, 6), 70);
            Table.States (45).Kernel := To_Vector ((((26, 6),  5,  1, (32767, 0),  0), ((26, 7),  5,  0, (26, 7),
            3)));
            Table.States (45).Minimal_Complete_Actions := To_Vector (((Shift, (26, 6),  23, 70), (Reduce, (26, 7),
            3)));
            Table.States (46).Action_List.Set_Capacity (1);
            Add_Action (Table.States (46), 16, (26, 4), 71);
            Table.States (46).Kernel := To_Vector ((((26, 4),  6,  4, (32767, 0),  0), ((26, 5),  6,  3, (32767, 0),
            0)));
            Table.States (46).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (26, 4),  16, 71)));
            Table.States (47).Action_List.Set_Capacity (1);
            Add_Action (Table.States (47), 22, (30, 0), 72);
            Table.States (47).Kernel := To_Vector ((0 => ((30, 0),  10,  1, (32767, 0),  0)));
            Table.States (47).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (30, 0),  22, 72)));
            Table.States (48).Action_List.Set_Capacity (4);
            Add_Action (Table.States (48), (4, 5, 22, 23), (36, 0),  3);
            Table.States (48).Kernel := To_Vector ((0 => ((36, 0),  18,  0, (36, 0),  3)));
            Table.States (48).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (36, 0),  3)));
            Table.States (49).Action_List.Set_Capacity (2);
            Add_Action (Table.States (49), 7, (31, 0), 21);
            Add_Action (Table.States (49), 12, (31, 1), 22);
            Table.States (49).Goto_List.Set_Capacity (2);
            Add_Goto (Table.States (49), 30, 73);
            Add_Goto (Table.States (49), 31, 24);
            Table.States (49).Kernel := To_Vector ((((26, 0),  4,  10, (32767, 0),  0), ((26, 1),  4,  9, (32767, 0),
            0), ((26, 2),  4,  7, (32767, 0),  0), ((26, 3),  4,  6, (32767, 0),  0)));
            Table.States (49).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (31, 0),  7, 21)));
            Table.States (50).Action_List.Set_Capacity (1);
            Add_Action (Table.States (50), 18, (27, 0), 74);
            Table.States (50).Kernel := To_Vector ((((27, 0),  23,  1, (32767, 0),  0), ((36, 0),  23,  1, (32767, 0),
            0)));
            Table.States (50).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (27, 0),  18, 74)));
            Table.States (51).Action_List.Set_Capacity (8);
            Add_Action (Table.States (51), (4, 5, 10, 17, 20, 21, 22, 23), (34, 0),  3);
            Table.States (51).Kernel := To_Vector ((0 => ((34, 0),  23,  0, (34, 0),  3)));
            Table.States (51).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (34, 0),  3)));
            Table.States (52).Action_List.Set_Capacity (4);
            Add_Action (Table.States (52), (8, 13, 15, 24), (37, 2),  4);
            Table.States (52).Kernel := To_Vector ((0 => ((37, 2),  22,  0, (37, 2),  4)));
            Table.States (52).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (37, 2),  4)));
            Table.States (53).Action_List.Set_Capacity (1);
            Add_Action (Table.States (53), (1 =>  22), (26, 8),  3);
            Table.States (53).Kernel := To_Vector ((0 => ((26, 8),  22,  0, (26, 8),  3)));
            Table.States (53).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (26, 8),  3)));
            Table.States (54).Action_List.Set_Capacity (1);
            Add_Action (Table.States (54), 23, (27, 0), 75);
            Table.States (54).Kernel := To_Vector ((0 => ((27, 0),  17,  2, (32767, 0),  0)));
            Table.States (54).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (27, 0),  23, 75)));
            Table.States (55).Action_List.Set_Capacity (1);
            Add_Action (Table.States (55), (1 =>  22), (26, 9),  2);
            Table.States (55).Kernel := To_Vector ((0 => ((26, 9),  22,  0, (26, 9),  2)));
            Table.States (55).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (26, 9),  2)));
            Table.States (56).Action_List.Set_Capacity (4);
            Add_Action (Table.States (56), (8, 13, 15, 24), (37, 1),  4);
            Table.States (56).Kernel := To_Vector ((((37, 1),  22,  0, (37, 1),  4), ((37, 10),  22,  0, (37, 10),
            4)));
            Table.States (56).Minimal_Complete_Actions := To_Vector (((Reduce, (37, 1),  4), (Reduce, (37, 10),  4)));
            Table.States (57).Action_List.Set_Capacity (1);
            Add_Action (Table.States (57), 22, (37, 0), 76);
            Table.States (57).Kernel := To_Vector ((((37, 0),  26,  1, (32767, 0),  0), ((37, 9),  26,  1, (32767, 0),
            0)));
            Table.States (57).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (37, 0),  22, 76)));
            Table.States (58).Action_List.Set_Capacity (4);
            Add_Action (Table.States (58), (8, 13, 15, 24), (37, 4),  4);
            Table.States (58).Kernel := To_Vector ((0 => ((37, 4),  22,  0, (37, 4),  4)));
            Table.States (58).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (37, 4),  4)));
            Table.States (59).Action_List.Set_Capacity (1);
            Add_Action (Table.States (59), 23, (34, 1), 15);
            Table.States (59).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (59), 34, 77);
            Table.States (59).Kernel := To_Vector ((0 => ((37, 8),  5,  2, (32767, 0),  0)));
            Table.States (59).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (34, 1),  23, 15)));
            Table.States (60).Action_List.Set_Capacity (3);
            Add_Action (Table.States (60), 20, Reduce, (35, 1),  3);
            Add_Action (Table.States (60), 21, (34, 0), 30);
            Add_Action (Table.States (60), 22, Reduce, (35, 1),  3);
            Table.States (60).Kernel := To_Vector ((((34, 0),  34,  2, (32767, 0),  0), ((35, 1),  34,  0, (35, 1),
            3)));
            Table.States (60).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (35, 1),  3)));
            Table.States (61).Action_List.Set_Capacity (2);
            Add_Action (Table.States (61), 14, (32, 6), 78);
            Add_Action (Table.States (61), 23, (34, 1), 15);
            Table.States (61).Goto_List.Set_Capacity (2);
            Add_Goto (Table.States (61), 34, 79);
            Add_Goto (Table.States (61), 38, 80);
            Table.States (61).Kernel := To_Vector ((((31, 0),  9,  1, (32767, 0),  0), ((32, 6),  9,  2, (32767, 0),
            0), ((32, 7),  9,  1, (32767, 0),  0)));
            Table.States (61).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (34, 1),  23, 15)));
            Table.States (62).Action_List.Set_Capacity (2);
            Add_Action (Table.States (62), 14, (32, 8), 81);
            Add_Action (Table.States (62), 23, (34, 1), 15);
            Table.States (62).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (62), 34, 82);
            Table.States (62).Kernel := To_Vector ((((32, 8),  11,  2, (32767, 0),  0), ((32, 9),  11,  1, (32767, 0),
            0)));
            Table.States (62).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (34, 1),  23, 15)));
         end Subr_1;
         procedure Subr_2
         is begin
            Table.States (63).Action_List.Set_Capacity (1);
            Add_Action (Table.States (63), 23, (34, 1), 15);
            Table.States (63).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (63), 34, 83);
            Table.States (63).Kernel := To_Vector ((0 => ((32, 10),  14,  1, (32767, 0),  0)));
            Table.States (63).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (34, 1),  23, 15)));
            Table.States (64).Action_List.Set_Capacity (1);
            Add_Action (Table.States (64), 23, (32, 0), 84);
            Table.States (64).Kernel := To_Vector ((((32, 0),  19,  4, (32767, 0),  0), ((32, 1),  19,  3, (32767, 0),
            0), ((32, 2),  19,  4, (32767, 0),  0), ((32, 3),  19,  3, (32767, 0),  0), ((32, 4),  19,  3, (32767, 0),
            0), ((32, 5),  19,  2, (32767, 0),  0)));
            Table.States (64).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (32, 0),  23, 84)));
            Table.States (65).Action_List.Set_Capacity (2);
            Add_Action (Table.States (65), 10, Reduce, (32, 11),  2);
            Add_Action (Table.States (65), 21, (34, 0), 30);
            Table.States (65).Kernel := To_Vector ((((32, 11),  34,  0, (32, 11),  2), ((34, 0),  34,  2, (32767, 0),
            0)));
            Table.States (65).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (32, 11),  2)));
            Table.States (66).Action_List.Set_Capacity (5);
            Add_Action (Table.States (66), 9, (32, 6), 85);
            Add_Action (Table.States (66), 11, (32, 8), 62);
            Add_Action (Table.States (66), 14, (32, 10), 63);
            Add_Action (Table.States (66), 19, (32, 0), 64);
            Add_Action (Table.States (66), 23, (34, 1), 15);
            Table.States (66).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (66), 34, 65);
            Table.States (66).Kernel := To_Vector ((((32, 0),  23,  5, (32767, 0),  0), ((32, 1),  23,  4, (32767, 0),
            0), ((32, 2),  23,  5, (32767, 0),  0), ((32, 3),  23,  4, (32767, 0),  0), ((32, 4),  23,  4, (32767, 0),
            0), ((32, 5),  23,  3, (32767, 0),  0), ((32, 6),  23,  3, (32767, 0),  0), ((32, 7),  23,  2, (32767, 0),
            0), ((32, 8),  23,  3, (32767, 0),  0), ((32, 9),  23,  2, (32767, 0),  0), ((32, 10),  23,  2, (32767, 0),
             0), ((32, 11),  23,  1, (32767, 0),  0)));
            Table.States (66).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (34, 1),  23, 15)));
            Table.States (67).Action_List.Set_Capacity (1);
            Add_Action (Table.States (67), (1 =>  10), (31, 2),  3);
            Table.States (67).Kernel := To_Vector ((0 => ((31, 2),  32,  0, (31, 2),  3)));
            Table.States (67).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (31, 2),  3)));
            Table.States (68).Action_List.Set_Capacity (1);
            Add_Action (Table.States (68), (1 =>  18), (33, 0),  1);
            Table.States (68).Kernel := To_Vector ((0 => ((33, 0),  23,  0, (33, 0),  1)));
            Table.States (68).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (33, 0),  1)));
            Table.States (69).Action_List.Set_Capacity (1);
            Add_Action (Table.States (69), 18, (31, 1), 86);
            Table.States (69).Kernel := To_Vector ((0 => ((31, 1),  33,  4, (32767, 0),  0)));
            Table.States (69).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (31, 1),  18, 86)));
            Table.States (70).Action_List.Set_Capacity (1);
            Add_Action (Table.States (70), (1 =>  22), (26, 6),  4);
            Table.States (70).Kernel := To_Vector ((0 => ((26, 6),  23,  0, (26, 6),  4)));
            Table.States (70).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (26, 6),  4)));
            Table.States (71).Action_List.Set_Capacity (1);
            Add_Action (Table.States (71), 23, (34, 1), 15);
            Table.States (71).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (71), 34, 87);
            Table.States (71).Kernel := To_Vector ((((26, 4),  16,  3, (32767, 0),  0), ((26, 5),  16,  2, (32767, 0),
            0)));
            Table.States (71).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (34, 1),  23, 15)));
            Table.States (72).Action_List.Set_Capacity (2);
            Add_Action (Table.States (72), (5, 6), (30, 0),  3);
            Table.States (72).Kernel := To_Vector ((0 => ((30, 0),  22,  0, (30, 0),  3)));
            Table.States (72).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (30, 0),  3)));
            Table.States (73).Action_List.Set_Capacity (2);
            Add_Action (Table.States (73), 5, (26, 2), 88);
            Add_Action (Table.States (73), 6, (26, 0), 89);
            Table.States (73).Kernel := To_Vector ((((26, 0),  30,  5, (32767, 0),  0), ((26, 1),  30,  4, (32767, 0),
            0), ((26, 2),  30,  2, (32767, 0),  0), ((26, 3),  30,  1, (32767, 0),  0)));
            Table.States (73).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (26, 2),  5, 88)));
            Table.States (74).Action_List.Set_Capacity (3);
            Add_Action (Table.States (74), 4, Reduce, (36, 0),  3);
            Add_Action (Table.States (74), 22, Reduce, (27, 0),  3);
            Add_Conflict (Table.States (74), 22, (36, 0),  3);
            Add_Action (Table.States (74), 23, Reduce, (36, 0),  3);
            Table.States (74).Kernel := To_Vector ((((27, 0),  18,  0, (27, 0),  3), ((36, 0),  18,  0, (36, 0),  3)));
            Table.States (74).Minimal_Complete_Actions := To_Vector (((Reduce, (27, 0),  3), (Reduce, (36, 0),  3)));
            Table.States (75).Action_List.Set_Capacity (1);
            Add_Action (Table.States (75), 18, (27, 0), 90);
            Table.States (75).Kernel := To_Vector ((0 => ((27, 0),  23,  1, (32767, 0),  0)));
            Table.States (75).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (27, 0),  18, 90)));
            Table.States (76).Action_List.Set_Capacity (4);
            Add_Action (Table.States (76), (8, 13, 15, 24), (37, 0),  5);
            Table.States (76).Kernel := To_Vector ((((37, 0),  22,  0, (37, 0),  5), ((37, 9),  22,  0, (37, 9),  5)));
            Table.States (76).Minimal_Complete_Actions := To_Vector (((Reduce, (37, 0),  5), (Reduce, (37, 9),  5)));
            Table.States (77).Action_List.Set_Capacity (2);
            Add_Action (Table.States (77), 21, (34, 0), 30);
            Add_Action (Table.States (77), 22, (37, 8), 91);
            Table.States (77).Kernel := To_Vector ((((34, 0),  34,  2, (32767, 0),  0), ((37, 8),  34,  1, (32767, 0),
            0)));
            Table.States (77).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (37, 8),  22, 91)));
            Table.States (78).Action_List.Set_Capacity (1);
            Add_Action (Table.States (78), 23, (34, 1), 15);
            Table.States (78).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (78), 34, 92);
            Table.States (78).Kernel := To_Vector ((0 => ((32, 6),  14,  1, (32767, 0),  0)));
            Table.States (78).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (34, 1),  23, 15)));
            Table.States (79).Action_List.Set_Capacity (2);
            Add_Action (Table.States (79), 10, Reduce, (32, 7),  3);
            Add_Conflict (Table.States (79), 10, (38, 0),  1);
            Add_Action (Table.States (79), 21, (34, 0), 30);
            Table.States (79).Kernel := To_Vector ((((32, 7),  34,  0, (32, 7),  3), ((34, 0),  34,  2, (32767, 0),
            0), ((38, 0),  34,  0, (38, 0),  1)));
            Table.States (79).Minimal_Complete_Actions := To_Vector (((Reduce, (32, 7),  3), (Reduce, (38, 0),  1)));
            Table.States (80).Action_List.Set_Capacity (1);
            Add_Action (Table.States (80), (1 =>  10), (31, 0),  4);
            Table.States (80).Kernel := To_Vector ((0 => ((31, 0),  38,  0, (31, 0),  4)));
            Table.States (80).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (31, 0),  4)));
            Table.States (81).Action_List.Set_Capacity (1);
            Add_Action (Table.States (81), 23, (34, 1), 15);
            Table.States (81).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (81), 34, 93);
            Table.States (81).Kernel := To_Vector ((0 => ((32, 8),  14,  1, (32767, 0),  0)));
            Table.States (81).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (34, 1),  23, 15)));
            Table.States (82).Action_List.Set_Capacity (2);
            Add_Action (Table.States (82), 10, Reduce, (32, 9),  3);
            Add_Action (Table.States (82), 21, (34, 0), 30);
            Table.States (82).Kernel := To_Vector ((((32, 9),  34,  0, (32, 9),  3), ((34, 0),  34,  2, (32767, 0),
            0)));
            Table.States (82).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (32, 9),  3)));
            Table.States (83).Action_List.Set_Capacity (2);
            Add_Action (Table.States (83), 10, Reduce, (32, 10),  3);
            Add_Action (Table.States (83), 21, (34, 0), 30);
            Table.States (83).Kernel := To_Vector ((((32, 10),  34,  0, (32, 10),  3), ((34, 0),  34,  2, (32767, 0),
            0)));
            Table.States (83).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (32, 10),  3)));
            Table.States (84).Action_List.Set_Capacity (4);
            Add_Action (Table.States (84), 9, (32, 0), 94);
            Add_Action (Table.States (84), 11, (32, 2), 95);
            Add_Action (Table.States (84), 14, (32, 4), 96);
            Add_Action (Table.States (84), 23, (34, 1), 15);
            Table.States (84).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (84), 34, 97);
            Table.States (84).Kernel := To_Vector ((((32, 0),  23,  3, (32767, 0),  0), ((32, 1),  23,  2, (32767, 0),
            0), ((32, 2),  23,  3, (32767, 0),  0), ((32, 3),  23,  2, (32767, 0),  0), ((32, 4),  23,  2, (32767, 0),
            0), ((32, 5),  23,  1, (32767, 0),  0)));
            Table.States (84).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (34, 1),  23, 15)));
            Table.States (85).Action_List.Set_Capacity (2);
            Add_Action (Table.States (85), 14, (32, 6), 78);
            Add_Action (Table.States (85), 23, (34, 1), 15);
            Table.States (85).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (85), 34, 98);
            Table.States (85).Kernel := To_Vector ((((32, 6),  9,  2, (32767, 0),  0), ((32, 7),  9,  1, (32767, 0),
            0)));
            Table.States (85).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (34, 1),  23, 15)));
            Table.States (86).Action_List.Set_Capacity (1);
            Add_Action (Table.States (86), 7, (31, 1), 99);
            Table.States (86).Kernel := To_Vector ((0 => ((31, 1),  18,  3, (32767, 0),  0)));
            Table.States (86).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (31, 1),  7, 99)));
            Table.States (87).Action_List.Set_Capacity (2);
            Add_Action (Table.States (87), 5, (26, 4), 100);
            Add_Action (Table.States (87), 21, (34, 0), 30);
            Table.States (87).Kernel := To_Vector ((((26, 4),  34,  2, (32767, 0),  0), ((26, 5),  34,  1, (32767, 0),
            0), ((34, 0),  34,  2, (32767, 0),  0)));
            Table.States (87).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (26, 4),  5, 100)));
            Table.States (88).Action_List.Set_Capacity (2);
            Add_Action (Table.States (88), 22, Reduce, (26, 3),  5);
            Add_Action (Table.States (88), 23, (26, 2), 101);
            Table.States (88).Kernel := To_Vector ((((26, 2),  5,  1, (32767, 0),  0), ((26, 3),  5,  0, (26, 3),
            5)));
            Table.States (88).Minimal_Complete_Actions := To_Vector (((Shift, (26, 2),  23, 101), (Reduce, (26, 3),
            5)));
            Table.States (89).Action_List.Set_Capacity (1);
            Add_Action (Table.States (89), 16, (26, 0), 102);
            Table.States (89).Kernel := To_Vector ((((26, 0),  6,  4, (32767, 0),  0), ((26, 1),  6,  3, (32767, 0),
            0)));
            Table.States (89).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (26, 0),  16, 102)));
            Table.States (90).Action_List.Set_Capacity (1);
            Add_Action (Table.States (90), (1 =>  22), (27, 0),  3);
            Table.States (90).Kernel := To_Vector ((0 => ((27, 0),  18,  0, (27, 0),  3)));
            Table.States (90).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (27, 0),  3)));
            Table.States (91).Action_List.Set_Capacity (4);
            Add_Action (Table.States (91), (8, 13, 15, 24), (37, 8),  6);
            Table.States (91).Kernel := To_Vector ((0 => ((37, 8),  22,  0, (37, 8),  6)));
            Table.States (91).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (37, 8),  6)));
            Table.States (92).Action_List.Set_Capacity (2);
            Add_Action (Table.States (92), 10, Reduce, (32, 6),  4);
            Add_Action (Table.States (92), 21, (34, 0), 30);
            Table.States (92).Kernel := To_Vector ((((32, 6),  34,  0, (32, 6),  4), ((34, 0),  34,  2, (32767, 0),
            0)));
            Table.States (92).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (32, 6),  4)));
            Table.States (93).Action_List.Set_Capacity (2);
            Add_Action (Table.States (93), 10, Reduce, (32, 8),  4);
            Add_Action (Table.States (93), 21, (34, 0), 30);
            Table.States (93).Kernel := To_Vector ((((32, 8),  34,  0, (32, 8),  4), ((34, 0),  34,  2, (32767, 0),
            0)));
            Table.States (93).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (32, 8),  4)));
            Table.States (94).Action_List.Set_Capacity (2);
            Add_Action (Table.States (94), 14, (32, 0), 103);
            Add_Action (Table.States (94), 23, (34, 1), 15);
            Table.States (94).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (94), 34, 104);
            Table.States (94).Kernel := To_Vector ((((32, 0),  9,  2, (32767, 0),  0), ((32, 1),  9,  1, (32767, 0),
            0)));
            Table.States (94).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (34, 1),  23, 15)));
            Table.States (95).Action_List.Set_Capacity (2);
            Add_Action (Table.States (95), 14, (32, 2), 105);
            Add_Action (Table.States (95), 23, (34, 1), 15);
            Table.States (95).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (95), 34, 106);
            Table.States (95).Kernel := To_Vector ((((32, 2),  11,  2, (32767, 0),  0), ((32, 3),  11,  1, (32767, 0),
            0)));
            Table.States (95).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (34, 1),  23, 15)));
            Table.States (96).Action_List.Set_Capacity (1);
            Add_Action (Table.States (96), 23, (34, 1), 15);
            Table.States (96).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (96), 34, 107);
            Table.States (96).Kernel := To_Vector ((0 => ((32, 4),  14,  1, (32767, 0),  0)));
            Table.States (96).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (34, 1),  23, 15)));
            Table.States (97).Action_List.Set_Capacity (2);
            Add_Action (Table.States (97), 10, Reduce, (32, 5),  4);
            Add_Action (Table.States (97), 21, (34, 0), 30);
            Table.States (97).Kernel := To_Vector ((((32, 5),  34,  0, (32, 5),  4), ((34, 0),  34,  2, (32767, 0),
            0)));
            Table.States (97).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (32, 5),  4)));
            Table.States (98).Action_List.Set_Capacity (2);
            Add_Action (Table.States (98), 10, Reduce, (32, 7),  3);
            Add_Action (Table.States (98), 21, (34, 0), 30);
            Table.States (98).Kernel := To_Vector ((((32, 7),  34,  0, (32, 7),  3), ((34, 0),  34,  2, (32767, 0),
            0)));
            Table.States (98).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (32, 7),  3)));
            Table.States (99).Action_List.Set_Capacity (1);
            Add_Action (Table.States (99), 23, (32, 0), 66);
            Table.States (99).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (99), 32, 108);
            Table.States (99).Kernel := To_Vector ((0 => ((31, 1),  7,  2, (32767, 0),  0)));
            Table.States (99).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (32, 0),  23, 66)));
            Table.States (100).Action_List.Set_Capacity (2);
            Add_Action (Table.States (100), 22, Reduce, (26, 5),  6);
            Add_Action (Table.States (100), 23, (26, 4), 109);
            Table.States (100).Kernel := To_Vector ((((26, 4),  5,  1, (32767, 0),  0), ((26, 5),  5,  0, (26, 5),
            6)));
            Table.States (100).Minimal_Complete_Actions := To_Vector (((Shift, (26, 4),  23, 109), (Reduce, (26, 5),
            6)));
            Table.States (101).Action_List.Set_Capacity (1);
            Add_Action (Table.States (101), (1 =>  22), (26, 2),  6);
            Table.States (101).Kernel := To_Vector ((0 => ((26, 2),  23,  0, (26, 2),  6)));
            Table.States (101).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (26, 2),  6)));
            Table.States (102).Action_List.Set_Capacity (1);
            Add_Action (Table.States (102), 23, (34, 1), 15);
            Table.States (102).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (102), 34, 110);
            Table.States (102).Kernel := To_Vector ((((26, 0),  16,  3, (32767, 0),  0), ((26, 1),  16,  2, (32767, 0),
             0)));
            Table.States (102).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (34, 1),  23, 15)));
            Table.States (103).Action_List.Set_Capacity (1);
            Add_Action (Table.States (103), 23, (34, 1), 15);
            Table.States (103).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (103), 34, 111);
            Table.States (103).Kernel := To_Vector ((0 => ((32, 0),  14,  1, (32767, 0),  0)));
            Table.States (103).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (34, 1),  23, 15)));
            Table.States (104).Action_List.Set_Capacity (2);
            Add_Action (Table.States (104), 10, Reduce, (32, 1),  5);
            Add_Action (Table.States (104), 21, (34, 0), 30);
            Table.States (104).Kernel := To_Vector ((((32, 1),  34,  0, (32, 1),  5), ((34, 0),  34,  2, (32767, 0),
            0)));
            Table.States (104).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (32, 1),  5)));
            Table.States (105).Action_List.Set_Capacity (1);
            Add_Action (Table.States (105), 23, (34, 1), 15);
            Table.States (105).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (105), 34, 112);
            Table.States (105).Kernel := To_Vector ((0 => ((32, 2),  14,  1, (32767, 0),  0)));
            Table.States (105).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (34, 1),  23, 15)));
            Table.States (106).Action_List.Set_Capacity (2);
            Add_Action (Table.States (106), 10, Reduce, (32, 3),  5);
            Add_Action (Table.States (106), 21, (34, 0), 30);
            Table.States (106).Kernel := To_Vector ((((32, 3),  34,  0, (32, 3),  5), ((34, 0),  34,  2, (32767, 0),
            0)));
            Table.States (106).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (32, 3),  5)));
            Table.States (107).Action_List.Set_Capacity (2);
            Add_Action (Table.States (107), 10, Reduce, (32, 4),  5);
            Add_Action (Table.States (107), 21, (34, 0), 30);
            Table.States (107).Kernel := To_Vector ((((32, 4),  34,  0, (32, 4),  5), ((34, 0),  34,  2, (32767, 0),
            0)));
            Table.States (107).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (32, 4),  5)));
            Table.States (108).Action_List.Set_Capacity (1);
            Add_Action (Table.States (108), (1 =>  10), (31, 1),  6);
            Table.States (108).Kernel := To_Vector ((0 => ((31, 1),  32,  0, (31, 1),  6)));
            Table.States (108).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (31, 1),  6)));
            Table.States (109).Action_List.Set_Capacity (1);
            Add_Action (Table.States (109), (1 =>  22), (26, 4),  7);
            Table.States (109).Kernel := To_Vector ((0 => ((26, 4),  23,  0, (26, 4),  7)));
            Table.States (109).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (26, 4),  7)));
            Table.States (110).Action_List.Set_Capacity (2);
            Add_Action (Table.States (110), 5, (26, 0), 113);
            Add_Action (Table.States (110), 21, (34, 0), 30);
            Table.States (110).Kernel := To_Vector ((((26, 0),  34,  2, (32767, 0),  0), ((26, 1),  34,  1, (32767, 0),
             0), ((34, 0),  34,  2, (32767, 0),  0)));
            Table.States (110).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (26, 0),  5, 113)));
            Table.States (111).Action_List.Set_Capacity (2);
            Add_Action (Table.States (111), 10, Reduce, (32, 0),  6);
            Add_Action (Table.States (111), 21, (34, 0), 30);
            Table.States (111).Kernel := To_Vector ((((32, 0),  34,  0, (32, 0),  6), ((34, 0),  34,  2, (32767, 0),
            0)));
            Table.States (111).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (32, 0),  6)));
            Table.States (112).Action_List.Set_Capacity (2);
            Add_Action (Table.States (112), 10, Reduce, (32, 2),  6);
            Add_Action (Table.States (112), 21, (34, 0), 30);
            Table.States (112).Kernel := To_Vector ((((32, 2),  34,  0, (32, 2),  6), ((34, 0),  34,  2, (32767, 0),
            0)));
            Table.States (112).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (32, 2),  6)));
            Table.States (113).Action_List.Set_Capacity (2);
            Add_Action (Table.States (113), 22, Reduce, (26, 1),  8);
            Add_Action (Table.States (113), 23, (26, 0), 114);
            Table.States (113).Kernel := To_Vector ((((26, 0),  5,  1, (32767, 0),  0), ((26, 1),  5,  0, (26, 1),
            8)));
            Table.States (113).Minimal_Complete_Actions := To_Vector (((Shift, (26, 0),  23, 114), (Reduce, (26, 1),
            8)));
            Table.States (114).Action_List.Set_Capacity (1);
            Add_Action (Table.States (114), (1 =>  22), (26, 0),  9);
            Table.States (114).Kernel := To_Vector ((0 => ((26, 0),  23,  0, (26, 0),  9)));
            Table.States (114).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (26, 0),  9)));
         end Subr_2;
      begin
         Subr_1;
         Subr_2;
         Table.Error_Action := new Parse_Action_Node'((Verb => Error, others => <>), null);
      end;

      Table.Error_Recover_Enabled := True;
      Table.McKenzie_Param := McKenzie_Param;
      Table.Max_Parallel := 10;
      return Table;
   end Create_Parse_Table;

   function Create_Productions return WisiToken.Syntax_Trees.Production_Info_Trees.Vector
   is begin
      return Result : WisiToken.Syntax_Trees.Production_Info_Trees.Vector do
         Result.Set_First_Last (25, 39);
         Result (26).RHSs.Set_First_Last (0, 9);
         Result (26).RHSs (0).In_Parse_Action := block_0_check'Access;
         Result (26).RHSs (0).Post_Parse_Action := block_0'Access;
         Result (26).RHSs (1).In_Parse_Action := block_1_check'Access;
         Result (26).RHSs (1).Post_Parse_Action := block_1'Access;
         Result (26).RHSs (2).In_Parse_Action := block_2_check'Access;
         Result (26).RHSs (2).Post_Parse_Action := block_2'Access;
         Result (26).RHSs (3).In_Parse_Action := block_3_check'Access;
         Result (26).RHSs (3).Post_Parse_Action := block_3'Access;
         Result (26).RHSs (4).In_Parse_Action := block_4_check'Access;
         Result (26).RHSs (4).Post_Parse_Action := block_4'Access;
         Result (26).RHSs (5).In_Parse_Action := block_5_check'Access;
         Result (26).RHSs (5).Post_Parse_Action := block_5'Access;
         Result (26).RHSs (6).In_Parse_Action := block_6_check'Access;
         Result (26).RHSs (6).Post_Parse_Action := block_6'Access;
         Result (26).RHSs (7).In_Parse_Action := block_7_check'Access;
         Result (26).RHSs (7).Post_Parse_Action := block_7'Access;
         Result (26).RHSs (8).In_Parse_Action := null;
         Result (26).RHSs (8).Post_Parse_Action := block_8'Access;
         Result (26).RHSs (9).In_Parse_Action := null;
         Result (26).RHSs (9).Post_Parse_Action := block_9'Access;
         Result (28).Optimized_List := True;
         Result (28).RHSs.Set_First_Last (0, 2);
         Result (28).RHSs (0).In_Parse_Action := compilation_unit_0_check'Access;
         Result (28).RHSs (0).Post_Parse_Action := null;
         Result (28).RHSs (1).In_Parse_Action := compilation_unit_1_check'Access;
         Result (28).RHSs (1).Post_Parse_Action := null;
         Result (28).RHSs (2).In_Parse_Action := null;
         Result (28).RHSs (2).Post_Parse_Action := null;
         Result (30).RHSs.Set_First_Last (0, 0);
         Result (30).RHSs (0).In_Parse_Action := null;
         Result (30).RHSs (0).Post_Parse_Action := loop_statement_0'Access;
         Result (31).RHSs.Set_First_Last (0, 3);
         Result (31).RHSs (0).In_Parse_Action := null;
         Result (31).RHSs (0).Post_Parse_Action := iteration_scheme_0'Access;
         Result (31).RHSs (1).In_Parse_Action := null;
         Result (31).RHSs (1).Post_Parse_Action := iteration_scheme_1'Access;
         Result (31).RHSs (2).In_Parse_Action := null;
         Result (31).RHSs (2).Post_Parse_Action := iteration_scheme_2'Access;
         Result (31).RHSs (3).In_Parse_Action := null;
         Result (31).RHSs (3).Post_Parse_Action := iteration_scheme_3'Access;
         Result (32).RHSs.Set_First_Last (0, 11);
         Result (32).RHSs (0).In_Parse_Action := null;
         Result (32).RHSs (0).Post_Parse_Action := iterator_specification_0'Access;
         Result (32).RHSs (1).In_Parse_Action := null;
         Result (32).RHSs (1).Post_Parse_Action := iterator_specification_1'Access;
         Result (32).RHSs (2).In_Parse_Action := null;
         Result (32).RHSs (2).Post_Parse_Action := iterator_specification_2'Access;
         Result (32).RHSs (3).In_Parse_Action := null;
         Result (32).RHSs (3).Post_Parse_Action := iterator_specification_3'Access;
         Result (32).RHSs (4).In_Parse_Action := null;
         Result (32).RHSs (4).Post_Parse_Action := iterator_specification_4'Access;
         Result (32).RHSs (5).In_Parse_Action := null;
         Result (32).RHSs (5).Post_Parse_Action := iterator_specification_5'Access;
         Result (32).RHSs (6).In_Parse_Action := null;
         Result (32).RHSs (6).Post_Parse_Action := iterator_specification_6'Access;
         Result (32).RHSs (7).In_Parse_Action := null;
         Result (32).RHSs (7).Post_Parse_Action := iterator_specification_7'Access;
         Result (32).RHSs (8).In_Parse_Action := null;
         Result (32).RHSs (8).Post_Parse_Action := iterator_specification_8'Access;
         Result (32).RHSs (9).In_Parse_Action := null;
         Result (32).RHSs (9).Post_Parse_Action := iterator_specification_9'Access;
         Result (32).RHSs (10).In_Parse_Action := null;
         Result (32).RHSs (10).Post_Parse_Action := iterator_specification_10'Access;
         Result (32).RHSs (11).In_Parse_Action := null;
         Result (32).RHSs (11).Post_Parse_Action := iterator_specification_11'Access;
         Result (34).RHSs.Set_First_Last (0, 1);
         Result (34).RHSs (0).In_Parse_Action := name_0_check'Access;
         Result (34).RHSs (0).Post_Parse_Action := name_0'Access;
         Result (34).RHSs (1).In_Parse_Action := name_1_check'Access;
         Result (34).RHSs (1).Post_Parse_Action := name_1'Access;
         Result (35).RHSs.Set_First_Last (0, 1);
         Result (35).RHSs (0).In_Parse_Action := null;
         Result (35).RHSs (0).Post_Parse_Action := name_list_0'Access;
         Result (35).RHSs (1).In_Parse_Action := null;
         Result (35).RHSs (1).Post_Parse_Action := name_list_1'Access;
         Result (36).RHSs.Set_First_Last (0, 1);
         Result (36).RHSs (0).In_Parse_Action := null;
         Result (36).RHSs (0).Post_Parse_Action := parameter_list_0'Access;
         Result (36).RHSs (1).In_Parse_Action := null;
         Result (36).RHSs (1).Post_Parse_Action := parameter_list_1'Access;
         Result (37).RHSs.Set_First_Last (0, 10);
         Result (37).RHSs (0).In_Parse_Action := null;
         Result (37).RHSs (0).Post_Parse_Action := subprogram_0'Access;
         Result (37).RHSs (1).In_Parse_Action := null;
         Result (37).RHSs (1).Post_Parse_Action := subprogram_1'Access;
         Result (37).RHSs (2).In_Parse_Action := null;
         Result (37).RHSs (2).Post_Parse_Action := subprogram_2'Access;
         Result (37).RHSs (3).In_Parse_Action := null;
         Result (37).RHSs (3).Post_Parse_Action := subprogram_3'Access;
         Result (37).RHSs (4).In_Parse_Action := null;
         Result (37).RHSs (4).Post_Parse_Action := subprogram_4'Access;
         Result (37).RHSs (5).In_Parse_Action := null;
         Result (37).RHSs (5).Post_Parse_Action := subprogram_5'Access;
         Result (37).RHSs (6).In_Parse_Action := null;
         Result (37).RHSs (6).Post_Parse_Action := subprogram_6'Access;
         Result (37).RHSs (7).In_Parse_Action := null;
         Result (37).RHSs (7).Post_Parse_Action := subprogram_7'Access;
         Result (37).RHSs (8).In_Parse_Action := null;
         Result (37).RHSs (8).Post_Parse_Action := subprogram_8'Access;
         Result (37).RHSs (9).In_Parse_Action := null;
         Result (37).RHSs (9).Post_Parse_Action := subprogram_9'Access;
         Result (37).RHSs (10).In_Parse_Action := null;
         Result (37).RHSs (10).Post_Parse_Action := subprogram_10'Access;
         Result (38).RHSs.Set_First_Last (0, 0);
         Result (38).RHSs (0).In_Parse_Action := null;
         Result (38).RHSs (0).Post_Parse_Action := subtype_0'Access;
         Result (39).RHSs.Set_First_Last (0, 0);
         Result (39).RHSs (0).In_Parse_Action := null;
         Result (39).RHSs (0).Post_Parse_Action := use_clause_0'Access;
      end return;
   end Create_Productions;

   function Create_Parser
     (Trace      : in WisiToken.Trace_Access;
      User_Data  : in WisiToken.Syntax_Trees.User_Data_Access;
      Language_Fixes                 : in WisiToken.Parse.LR.Parser.Language_Fixes_Access;
      Language_Matching_Begin_Tokens : in WisiToken.Parse.LR.Parser.Language_Matching_Begin_Tokens_Access;
      Language_String_ID_Set         : in WisiToken.Parse.LR.Parser.Language_String_ID_Set_Access)
     return WisiToken.Parse.LR.Parser.Parser
   is begin
      return Parser : WisiToken.Parse.LR.Parser.Parser do
         Parser.Tree.Lexer := Lexer.New_Lexer (Trace, Subprograms_Process_LALR_Actions.Descriptor'Access);
         Parser.Productions := Create_Productions;
         Parser.User_Data := User_Data;
         Parser.Partial_Parse_Active := Subprograms_Process_LALR_Actions.Partial_Parse_Active'Access;
         Parser.Partial_Parse_Byte_Goal := Subprograms_Process_LALR_Actions.Partial_Parse_Byte_Goal'Access;
         Parser.Table := Create_Parse_Table;
         Parser.Language_Fixes                 := Language_Fixes;
         Parser.Language_Matching_Begin_Tokens := Language_Matching_Begin_Tokens;
         Parser.Language_String_ID_Set         := Language_String_ID_Set;
      end return;
   end Create_Parser;
end Subprograms_Process_LALR_Main;
