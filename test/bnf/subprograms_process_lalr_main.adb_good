--  generated parser support file.
--  command line: wisitoken-bnf-generate.exe  --generate LALR Ada_Emacs re2c PROCESS ../test/bnf/subprograms.wy
--

--  Copyright (C) 2013, 2017 - 2020 Stephen Leake.  All Rights Reserved.

--  This program is free software; you can redistribute it and/or
--  modify it under the terms of the GNU General Public License as
--  published by the Free Software Foundation; either version 3, or (at
--  your option) any later version.
--
--  This software is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

with Subprograms_Process_Actions; use Subprograms_Process_Actions;
with WisiToken.Lexer.re2c;
with subprograms_re2c_c;
package body Subprograms_Process_LALR_Main is

   package Lexer is new WisiToken.Lexer.re2c
     (subprograms_re2c_c.New_Lexer,
      subprograms_re2c_c.Free_Lexer,
      subprograms_re2c_c.Reset_Lexer,
      subprograms_re2c_c.Next_Token);

   procedure Create_Parser
     (Parser                         :    out WisiToken.Parse.LR.Parser.Parser;
      Language_Fixes                 : in     WisiToken.Parse.LR.Parser.Language_Fixes_Access;
      Language_Matching_Begin_Tokens : in     WisiToken.Parse.LR.Parser.Language_Matching_Begin_Tokens_Access;
      Language_String_ID_Set       : in     WisiToken.Parse.LR.Parser.Language_String_ID_Set_Access;
      Trace                        : not null access WisiToken.Trace'Class;
      User_Data                    : in     WisiToken.Syntax_Trees.User_Data_Access)
   is
      use WisiToken.Parse.LR;
      McKenzie_Param : constant McKenzie_Param_Type :=
        (First_Terminal    => 4,
         Last_Terminal     => 20,
         First_Nonterminal => 21,
         Last_Nonterminal  => 32,
         Insert =>
           (4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4),
         Delete =>
           (4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4),
         Push_Back =>
           (4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4),
         Undo_Reduce =>
           (4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4),
         Minimal_Complete_Cost_Delta => -1,
         Fast_Forward =>  0,
         Matching_Begin =>  0,
         Ignore_Check_Fail  => 4,
         Task_Count  => 0,
         Check_Limit => 3,
         Check_Delta_Limit => 200,
         Enqueue_Limit => 10000);

      Table : constant Parse_Table_Ptr := new Parse_Table
        (State_First       => 0,
         State_Last        => 55,
         First_Terminal    => 4,
         Last_Terminal     => 20,
         First_Nonterminal => 21,
         Last_Nonterminal  => 32);
   begin
      Table.McKenzie_Param := McKenzie_Param;
      declare
         procedure Subr_1
         is begin
            Table.States (0).Action_List.Set_Capacity (3);
            Add_Action (Table.States (0), 8, (30, 0), 1);
            Add_Action (Table.States (0), 11, (30, 8), 2);
            Add_Action (Table.States (0), 13, (32, 0), 3);
            Table.States (0).Goto_List.Set_Capacity (5);
            Add_Goto (Table.States (0), 23, 4);
            Add_Goto (Table.States (0), 24, 5);
            Add_Goto (Table.States (0), 25, 6);
            Add_Goto (Table.States (0), 30, 7);
            Add_Goto (Table.States (0), 32, 8);
            Table.States (1).Action_List.Set_Capacity (4);
            Add_Action (Table.States (1), 4, (22, 0), 9);
            Add_Action (Table.States (1), 14, (29, 0), 10);
            Add_Action (Table.States (1), 18, (30, 7), 11);
            Add_Action (Table.States (1), 19, (27, 1), 12);
            Table.States (1).Goto_List.Set_Capacity (3);
            Add_Goto (Table.States (1), 22, 13);
            Add_Goto (Table.States (1), 27, 14);
            Add_Goto (Table.States (1), 29, 15);
            Table.States (1).Kernel := To_Vector ((((30, 0),  8,  12, (2147483647, 0),  0), ((30, 1),  8,  4,
            (2147483647, 0),  0), ((30, 2),  8,  10, (2147483647, 0),  0), ((30, 3),  8,  2, (2147483647, 0),  0),
            ((30, 4),  8,  11, (2147483647, 0),  0), ((30, 5),  8,  3, (2147483647, 0),  0), ((30, 6),  8,  9,
            (2147483647, 0),  0), ((30, 7),  8,  1, (2147483647, 0),  0)));
            Table.States (1).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (30, 7),  18, 11)));
            Table.States (2).Action_List.Set_Capacity (1);
            Add_Action (Table.States (2), 19, (27, 1), 12);
            Table.States (2).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (2), 27, 16);
            Table.States (2).Kernel := To_Vector ((0 => ((30, 8),  11,  6, (2147483647, 0),  0)));
            Table.States (2).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (27, 1),  19, 12)));
            Table.States (3).Action_List.Set_Capacity (1);
            Add_Action (Table.States (3), 19, (27, 1), 12);
            Table.States (3).Goto_List.Set_Capacity (2);
            Add_Goto (Table.States (3), 27, 17);
            Add_Goto (Table.States (3), 28, 18);
            Table.States (3).Kernel := To_Vector ((0 => ((32, 0),  13,  2, (2147483647, 0),  0)));
            Table.States (3).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (27, 1),  19, 12)));
            Table.States (4).Action_List.Set_Capacity (1);
            Add_Action (Table.States (4), 20, Accept_It, (21, 0),  1, null, null);
            Table.States (5).Action_List.Set_Capacity (4);
            Add_Action (Table.States (5), 8, (30, 0), 1);
            Add_Action (Table.States (5), 11, (30, 8), 2);
            Add_Action (Table.States (5), 13, (32, 0), 3);
            Add_Action (Table.States (5), 20, Reduce, (23, 0),  1, null, compilation_unit_0_check'Access);
            Table.States (5).Goto_List.Set_Capacity (3);
            Add_Goto (Table.States (5), 25, 19);
            Add_Goto (Table.States (5), 30, 7);
            Add_Goto (Table.States (5), 32, 8);
            Table.States (5).Kernel := To_Vector ((((23, 0),  24,  0, (23, 0),  1), ((24, 0),  24,  2, (2147483647, 0),
             0)));
            Table.States (5).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (23, 0),  1)));
            Table.States (6).Action_List.Set_Capacity (4);
            Add_Action (Table.States (6), (8, 11, 13, 20), (24, 1),  1, null, null);
            Table.States (6).Kernel := To_Vector ((0 => ((24, 1),  25,  0, (24, 1),  1)));
            Table.States (6).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (24, 1),  1)));
            Table.States (7).Action_List.Set_Capacity (4);
            Add_Action (Table.States (7), (8, 11, 13, 20), (25, 0),  1, null, null);
            Table.States (7).Kernel := To_Vector ((0 => ((25, 0),  30,  0, (25, 0),  1)));
            Table.States (7).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (25, 0),  1)));
            Table.States (8).Action_List.Set_Capacity (4);
            Add_Action (Table.States (8), (8, 11, 13, 20), (25, 1),  1, null, null);
            Table.States (8).Kernel := To_Vector ((0 => ((25, 1),  32,  0, (25, 1),  1)));
            Table.States (8).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (25, 1),  1)));
            Table.States (9).Action_List.Set_Capacity (1);
            Add_Action (Table.States (9), 7, (26, 0), 20);
            Table.States (9).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (9), 26, 21);
            Table.States (9).Kernel := To_Vector ((((22, 0),  4,  10, (2147483647, 0),  0), ((22, 1),  4,  7,
            (2147483647, 0),  0)));
            Table.States (9).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (26, 0),  7, 20)));
            Table.States (10).Action_List.Set_Capacity (2);
            Add_Action (Table.States (10), 15, (29, 1), 22);
            Add_Action (Table.States (10), 19, (29, 0), 23);
            Table.States (10).Kernel := To_Vector ((((29, 0),  14,  2, (2147483647, 0),  0), ((29, 1),  14,  1,
            (2147483647, 0),  0)));
            Table.States (10).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (29, 1),  15, 22)));
            Table.States (11).Action_List.Set_Capacity (4);
            Add_Action (Table.States (11), (8, 11, 13, 20), (30, 7),  2, subprogram_7'Access, null);
            Table.States (11).Kernel := To_Vector ((0 => ((30, 7),  18,  0, (30, 7),  2)));
            Table.States (11).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (30, 7),  2)));
            Table.States (12).Action_List.Set_Capacity (7);
            Add_Action (Table.States (12), (4, 5, 10, 14, 16, 17, 18), (27, 1),  1, name_1'Access,
            name_1_check'Access);
            Table.States (12).Kernel := To_Vector ((0 => ((27, 1),  19,  0, (27, 1),  1)));
            Table.States (12).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (27, 1),  1)));
            Table.States (13).Action_List.Set_Capacity (1);
            Add_Action (Table.States (13), 18, (30, 6), 24);
            Table.States (13).Kernel := To_Vector ((0 => ((30, 6),  22,  1, (2147483647, 0),  0)));
            Table.States (13).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (30, 6),  18, 24)));
            Table.States (14).Action_List.Set_Capacity (4);
            Add_Action (Table.States (14), 4, (22, 0), 9);
            Add_Action (Table.States (14), 14, (29, 0), 10);
            Add_Action (Table.States (14), 17, (27, 0), 25);
            Add_Action (Table.States (14), 18, (30, 3), 26);
            Table.States (14).Goto_List.Set_Capacity (2);
            Add_Goto (Table.States (14), 22, 27);
            Add_Goto (Table.States (14), 29, 28);
            Table.States (14).Kernel := To_Vector ((((27, 0),  27,  2, (2147483647, 0),  0), ((30, 0),  27,  11,
            (2147483647, 0),  0), ((30, 1),  27,  3, (2147483647, 0),  0), ((30, 2),  27,  9, (2147483647, 0),  0),
            ((30, 3),  27,  1, (2147483647, 0),  0)));
            Table.States (14).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (30, 3),  18, 26)));
            Table.States (15).Action_List.Set_Capacity (2);
            Add_Action (Table.States (15), 4, (22, 0), 9);
            Add_Action (Table.States (15), 18, (30, 5), 29);
            Table.States (15).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (15), 22, 30);
            Table.States (15).Kernel := To_Vector ((((30, 4),  29,  9, (2147483647, 0),  0), ((30, 5),  29,  1,
            (2147483647, 0),  0)));
            Table.States (15).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (30, 5),  18, 29)));
            Table.States (16).Action_List.Set_Capacity (2);
            Add_Action (Table.States (16), 14, (29, 0), 10);
            Add_Action (Table.States (16), 17, (27, 0), 25);
            Table.States (16).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (16), 29, 31);
            Table.States (16).Kernel := To_Vector ((((27, 0),  27,  2, (2147483647, 0),  0), ((30, 8),  27,  5,
            (2147483647, 0),  0)));
            Table.States (16).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (29, 0),  14, 10)));
            Table.States (17).Action_List.Set_Capacity (3);
            Add_Action (Table.States (17), 16, Reduce, (28, 0),  1, name_list_0'Access, null);
            Add_Action (Table.States (17), 17, (27, 0), 25);
            Add_Action (Table.States (17), 18, Reduce, (28, 0),  1, name_list_0'Access, null);
            Table.States (17).Kernel := To_Vector ((((27, 0),  27,  2, (2147483647, 0),  0), ((28, 0),  27,  0, (28,
            0),  1)));
            Table.States (17).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (28, 0),  1)));
            Table.States (18).Action_List.Set_Capacity (2);
            Add_Action (Table.States (18), 16, (28, 1), 32);
            Add_Action (Table.States (18), 18, (32, 0), 33);
            Table.States (18).Kernel := To_Vector ((((28, 1),  28,  2, (2147483647, 0),  0), ((32, 0),  28,  1,
            (2147483647, 0),  0)));
            Table.States (18).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (32, 0),  18, 33)));
            Table.States (19).Action_List.Set_Capacity (4);
            Add_Action (Table.States (19), (8, 11, 13, 20), (24, 0),  2, null, null);
            Table.States (19).Kernel := To_Vector ((0 => ((24, 0),  25,  0, (24, 0),  2)));
            Table.States (19).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (24, 0),  2)));
            Table.States (20).Action_List.Set_Capacity (1);
            Add_Action (Table.States (20), 19, (26, 0), 34);
            Table.States (20).Kernel := To_Vector ((0 => ((26, 0),  7,  5, (2147483647, 0),  0)));
            Table.States (20).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (26, 0),  19, 34)));
            Table.States (21).Action_List.Set_Capacity (2);
            Add_Action (Table.States (21), 5, (22, 1), 35);
            Add_Action (Table.States (21), 6, (22, 0), 36);
            Table.States (21).Kernel := To_Vector ((((22, 0),  26,  4, (2147483647, 0),  0), ((22, 1),  26,  1,
            (2147483647, 0),  0)));
            Table.States (21).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (22, 1),  5, 35)));
            Table.States (22).Action_List.Set_Capacity (3);
            Add_Action (Table.States (22), (4, 5, 18), (29, 1),  2, parameter_list_1'Access, null);
            Table.States (22).Kernel := To_Vector ((0 => ((29, 1),  15,  0, (29, 1),  2)));
            Table.States (22).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (29, 1),  2)));
            Table.States (23).Action_List.Set_Capacity (1);
            Add_Action (Table.States (23), 15, (29, 0), 37);
            Table.States (23).Kernel := To_Vector ((0 => ((29, 0),  19,  1, (2147483647, 0),  0)));
            Table.States (23).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (29, 0),  15, 37)));
            Table.States (24).Action_List.Set_Capacity (4);
            Add_Action (Table.States (24), (8, 11, 13, 20), (30, 6),  3, subprogram_6'Access, null);
            Table.States (24).Kernel := To_Vector ((0 => ((30, 6),  18,  0, (30, 6),  3)));
            Table.States (24).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (30, 6),  3)));
            Table.States (25).Action_List.Set_Capacity (1);
            Add_Action (Table.States (25), 19, (27, 0), 38);
            Table.States (25).Kernel := To_Vector ((0 => ((27, 0),  17,  1, (2147483647, 0),  0)));
            Table.States (25).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (27, 0),  19, 38)));
            Table.States (26).Action_List.Set_Capacity (4);
            Add_Action (Table.States (26), (8, 11, 13, 20), (30, 3),  3, subprogram_3'Access, null);
            Table.States (26).Kernel := To_Vector ((0 => ((30, 3),  18,  0, (30, 3),  3)));
            Table.States (26).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (30, 3),  3)));
            Table.States (27).Action_List.Set_Capacity (1);
            Add_Action (Table.States (27), 18, (30, 2), 39);
            Table.States (27).Kernel := To_Vector ((0 => ((30, 2),  22,  1, (2147483647, 0),  0)));
            Table.States (27).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (30, 2),  18, 39)));
            Table.States (28).Action_List.Set_Capacity (2);
            Add_Action (Table.States (28), 4, (22, 0), 9);
            Add_Action (Table.States (28), 18, (30, 1), 40);
            Table.States (28).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (28), 22, 41);
            Table.States (28).Kernel := To_Vector ((((30, 0),  29,  9, (2147483647, 0),  0), ((30, 1),  29,  1,
            (2147483647, 0),  0)));
            Table.States (28).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (30, 1),  18, 40)));
            Table.States (29).Action_List.Set_Capacity (4);
            Add_Action (Table.States (29), (8, 11, 13, 20), (30, 5),  3, subprogram_5'Access, null);
            Table.States (29).Kernel := To_Vector ((0 => ((30, 5),  18,  0, (30, 5),  3)));
            Table.States (29).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (30, 5),  3)));
            Table.States (30).Action_List.Set_Capacity (1);
            Add_Action (Table.States (30), 18, (30, 4), 42);
            Table.States (30).Kernel := To_Vector ((0 => ((30, 4),  22,  1, (2147483647, 0),  0)));
            Table.States (30).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (30, 4),  18, 42)));
            Table.States (31).Action_List.Set_Capacity (1);
            Add_Action (Table.States (31), 5, (30, 8), 43);
            Table.States (31).Kernel := To_Vector ((0 => ((30, 8),  29,  3, (2147483647, 0),  0)));
            Table.States (31).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (30, 8),  5, 43)));
            Table.States (32).Action_List.Set_Capacity (1);
            Add_Action (Table.States (32), 19, (27, 1), 12);
            Table.States (32).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (32), 27, 44);
            Table.States (32).Kernel := To_Vector ((0 => ((28, 1),  16,  1, (2147483647, 0),  0)));
            Table.States (32).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (27, 1),  19, 12)));
            Table.States (33).Action_List.Set_Capacity (4);
            Add_Action (Table.States (33), (8, 11, 13, 20), (32, 0),  3, use_clause_0'Access, null);
            Table.States (33).Kernel := To_Vector ((0 => ((32, 0),  18,  0, (32, 0),  3)));
            Table.States (33).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (32, 0),  3)));
            Table.States (34).Action_List.Set_Capacity (1);
            Add_Action (Table.States (34), 9, (26, 0), 45);
            Table.States (34).Kernel := To_Vector ((0 => ((26, 0),  19,  4, (2147483647, 0),  0)));
            Table.States (34).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (26, 0),  9, 45)));
            Table.States (35).Action_List.Set_Capacity (1);
            Add_Action (Table.States (35), (1 =>  18), (22, 1),  3, block_1'Access, null);
            Table.States (35).Kernel := To_Vector ((0 => ((22, 1),  5,  0, (22, 1),  3)));
            Table.States (35).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (22, 1),  3)));
            Table.States (36).Action_List.Set_Capacity (1);
            Add_Action (Table.States (36), 12, (22, 0), 46);
            Table.States (36).Kernel := To_Vector ((0 => ((22, 0),  6,  3, (2147483647, 0),  0)));
            Table.States (36).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (22, 0),  12, 46)));
            Table.States (37).Action_List.Set_Capacity (3);
            Add_Action (Table.States (37), (4, 5, 18), (29, 0),  3, parameter_list_0'Access, null);
            Table.States (37).Kernel := To_Vector ((0 => ((29, 0),  15,  0, (29, 0),  3)));
            Table.States (37).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (29, 0),  3)));
            Table.States (38).Action_List.Set_Capacity (7);
            Add_Action (Table.States (38), (4, 5, 10, 14, 16, 17, 18), (27, 0),  3, name_0'Access,
            name_0_check'Access);
            Table.States (38).Kernel := To_Vector ((0 => ((27, 0),  19,  0, (27, 0),  3)));
            Table.States (38).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (27, 0),  3)));
            Table.States (39).Action_List.Set_Capacity (4);
            Add_Action (Table.States (39), (8, 11, 13, 20), (30, 2),  4, subprogram_2'Access, null);
            Table.States (39).Kernel := To_Vector ((0 => ((30, 2),  18,  0, (30, 2),  4)));
            Table.States (39).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (30, 2),  4)));
            Table.States (40).Action_List.Set_Capacity (4);
            Add_Action (Table.States (40), (8, 11, 13, 20), (30, 1),  4, subprogram_1'Access, null);
            Table.States (40).Kernel := To_Vector ((0 => ((30, 1),  18,  0, (30, 1),  4)));
            Table.States (40).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (30, 1),  4)));
            Table.States (41).Action_List.Set_Capacity (1);
            Add_Action (Table.States (41), 18, (30, 0), 47);
            Table.States (41).Kernel := To_Vector ((0 => ((30, 0),  22,  1, (2147483647, 0),  0)));
            Table.States (41).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (30, 0),  18, 47)));
            Table.States (42).Action_List.Set_Capacity (4);
            Add_Action (Table.States (42), (8, 11, 13, 20), (30, 4),  4, subprogram_4'Access, null);
            Table.States (42).Kernel := To_Vector ((0 => ((30, 4),  18,  0, (30, 4),  4)));
            Table.States (42).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (30, 4),  4)));
            Table.States (43).Action_List.Set_Capacity (1);
            Add_Action (Table.States (43), 19, (27, 1), 12);
            Table.States (43).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (43), 27, 48);
            Table.States (43).Kernel := To_Vector ((0 => ((30, 8),  5,  2, (2147483647, 0),  0)));
            Table.States (43).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (27, 1),  19, 12)));
            Table.States (44).Action_List.Set_Capacity (3);
            Add_Action (Table.States (44), 16, Reduce, (28, 1),  3, name_list_1'Access, null);
            Add_Action (Table.States (44), 17, (27, 0), 25);
            Add_Action (Table.States (44), 18, Reduce, (28, 1),  3, name_list_1'Access, null);
            Table.States (44).Kernel := To_Vector ((((27, 0),  27,  2, (2147483647, 0),  0), ((28, 1),  27,  0, (28,
            1),  3)));
            Table.States (44).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (28, 1),  3)));
            Table.States (45).Action_List.Set_Capacity (1);
            Add_Action (Table.States (45), 19, (27, 1), 12);
            Table.States (45).Goto_List.Set_Capacity (2);
            Add_Goto (Table.States (45), 27, 49);
            Add_Goto (Table.States (45), 31, 50);
            Table.States (45).Kernel := To_Vector ((0 => ((26, 0),  9,  3, (2147483647, 0),  0)));
            Table.States (45).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (27, 1),  19, 12)));
            Table.States (46).Action_List.Set_Capacity (1);
            Add_Action (Table.States (46), 19, (27, 1), 12);
            Table.States (46).Goto_List.Set_Capacity (1);
            Add_Goto (Table.States (46), 27, 51);
            Table.States (46).Kernel := To_Vector ((0 => ((22, 0),  12,  2, (2147483647, 0),  0)));
            Table.States (46).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (27, 1),  19, 12)));
            Table.States (47).Action_List.Set_Capacity (4);
            Add_Action (Table.States (47), (8, 11, 13, 20), (30, 0),  5, subprogram_0'Access, null);
            Table.States (47).Kernel := To_Vector ((0 => ((30, 0),  18,  0, (30, 0),  5)));
            Table.States (47).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (30, 0),  5)));
            Table.States (48).Action_List.Set_Capacity (2);
            Add_Action (Table.States (48), 17, (27, 0), 25);
            Add_Action (Table.States (48), 18, (30, 8), 52);
            Table.States (48).Kernel := To_Vector ((((27, 0),  27,  2, (2147483647, 0),  0), ((30, 8),  27,  1,
            (2147483647, 0),  0)));
            Table.States (48).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (30, 8),  18, 52)));
            Table.States (49).Action_List.Set_Capacity (2);
            Add_Action (Table.States (49), 10, Reduce, (31, 0),  1, subtype_0'Access, null);
            Add_Action (Table.States (49), 17, (27, 0), 25);
            Table.States (49).Kernel := To_Vector ((((27, 0),  27,  2, (2147483647, 0),  0), ((31, 0),  27,  0, (31,
            0),  1)));
            Table.States (49).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (31, 0),  1)));
            Table.States (50).Action_List.Set_Capacity (1);
            Add_Action (Table.States (50), 10, (26, 0), 53);
            Table.States (50).Kernel := To_Vector ((0 => ((26, 0),  31,  2, (2147483647, 0),  0)));
            Table.States (50).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (26, 0),  10, 53)));
            Table.States (51).Action_List.Set_Capacity (2);
            Add_Action (Table.States (51), 5, (22, 0), 54);
            Add_Action (Table.States (51), 17, (27, 0), 25);
            Table.States (51).Kernel := To_Vector ((((22, 0),  27,  1, (2147483647, 0),  0), ((27, 0),  27,  2,
            (2147483647, 0),  0)));
            Table.States (51).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (22, 0),  5, 54)));
            Table.States (52).Action_List.Set_Capacity (4);
            Add_Action (Table.States (52), (8, 11, 13, 20), (30, 8),  6, subprogram_8'Access, null);
            Table.States (52).Kernel := To_Vector ((0 => ((30, 8),  18,  0, (30, 8),  6)));
            Table.States (52).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (30, 8),  6)));
            Table.States (53).Action_List.Set_Capacity (1);
            Add_Action (Table.States (53), 18, (26, 0), 55);
            Table.States (53).Kernel := To_Vector ((0 => ((26, 0),  10,  1, (2147483647, 0),  0)));
            Table.States (53).Minimal_Complete_Actions := To_Vector ((0 => (Shift, (26, 0),  18, 55)));
            Table.States (54).Action_List.Set_Capacity (1);
            Add_Action (Table.States (54), (1 =>  18), (22, 0),  6, block_0'Access, null);
            Table.States (54).Kernel := To_Vector ((0 => ((22, 0),  5,  0, (22, 0),  6)));
            Table.States (54).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (22, 0),  6)));
            Table.States (55).Action_List.Set_Capacity (2);
            Add_Action (Table.States (55), (5, 6), (26, 0),  6, loop_statement_0'Access, null);
            Table.States (55).Kernel := To_Vector ((0 => ((26, 0),  18,  0, (26, 0),  6)));
            Table.States (55).Minimal_Complete_Actions := To_Vector ((0 => (Reduce, (26, 0),  6)));
         end Subr_1;
      begin
         Subr_1;
         Table.Error_Action := new Parse_Action_Node'((Verb => Error, others => <>), null);
      end;

      WisiToken.Parse.LR.Parser.New_Parser
        (Parser,
         Trace,
         Lexer.New_Lexer (Trace.Descriptor),
         Table,
         Language_Fixes,
         Language_Matching_Begin_Tokens,
         Language_String_ID_Set,
         User_Data,
         Max_Parallel         => 15,
         Terminate_Same_State => True);
   end Create_Parser;
end Subprograms_Process_LALR_Main;
