--  generated parser support file.
--  command line: wisitoken-bnf-generate.exe  --generate LALR Ada_Emacs re2c PROCESS ../Test/bnf/subprograms.wy
--

--  Copyright (C) 2013, 2017 - 2019 Stephen Leake.  All Rights Reserved.

--  This program is free software; you can redistribute it and/or
--  modify it under the terms of the GNU General Public License as
--  published by the Free Software Foundation; either version 3, or (at
--  your option) any later version.
--
--  This software is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

with Subprograms_Process_Actions; use Subprograms_Process_Actions;
with WisiToken.Lexer.re2c;
with subprograms_re2c_c;
package body Subprograms_Process_LALR_Main is

   package Lexer is new WisiToken.Lexer.re2c
     (subprograms_re2c_c.New_Lexer,
      subprograms_re2c_c.Free_Lexer,
      subprograms_re2c_c.Reset_Lexer,
      subprograms_re2c_c.Next_Token);

   procedure Create_Parser
     (Parser                       :    out WisiToken.Parse.LR.Parser.Parser;
      Language_Fixes               : in     WisiToken.Parse.LR.Parser.Language_Fixes_Access;
      Language_Use_Minimal_Complete_Actions : in
     WisiToken.Parse.LR.Parser.Language_Use_Minimal_Complete_Actions_Access;
      Language_String_ID_Set       : in     WisiToken.Parse.LR.Parser.Language_String_ID_Set_Access;
      Trace                        : not null access WisiToken.Trace'Class;
      User_Data                    : in     WisiToken.Syntax_Trees.User_Data_Access)
   is
      use WisiToken.Parse.LR;
      McKenzie_Param : constant McKenzie_Param_Type :=
        (First_Terminal    => 3,
         Last_Terminal     => 19,
         First_Nonterminal => 20,
         Last_Nonterminal  => 31,
         Insert =>
           (4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4),
         Delete =>
           (4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4),
         Push_Back =>
           (4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4),
         Ignore_Check_Fail  => 4,
         Task_Count  => 0,
         Cost_Limit  => 10,
         Check_Limit => 3,
         Check_Delta_Limit => 200,
         Enqueue_Limit => 10000);

      Table : constant Parse_Table_Ptr := new Parse_Table
        (State_First       => 0,
         State_Last        => 55,
         First_Terminal    => 3,
         Last_Terminal     => 19,
         First_Nonterminal => 20,
         Last_Nonterminal  => 31);
   begin
      Table.McKenzie_Param := McKenzie_Param;
      declare
         procedure Subr_1
         is begin
            Table.States (0).Productions := WisiToken.To_Vector ((1 => (20, 0)));
            Add_Action (Table.States (0), 7, 1);
            Add_Action (Table.States (0), 10, 2);
            Add_Action (Table.States (0), 12, 3);
            Add_Error (Table.States (0));
            Add_Goto (Table.States (0), 22, 4);
            Add_Goto (Table.States (0), 23, 5);
            Add_Goto (Table.States (0), 24, 6);
            Add_Goto (Table.States (0), 29, 7);
            Add_Goto (Table.States (0), 31, 8);
            Table.States (0).Minimal_Complete_Action := (Shift, 7, 1);
            Table.States (1).Productions := WisiToken.To_Vector (((29, 0), (29, 1), (29, 2), (29, 3), (29, 4), (29, 5),
            (29, 6), (29, 7)));
            Add_Action (Table.States (1), 3, 9);
            Add_Action (Table.States (1), 13, 10);
            Add_Action (Table.States (1), 17, 11);
            Add_Action (Table.States (1), 18, 12);
            Add_Error (Table.States (1));
            Add_Goto (Table.States (1), 21, 13);
            Add_Goto (Table.States (1), 26, 14);
            Add_Goto (Table.States (1), 28, 15);
            Table.States (1).Minimal_Complete_Action := (Shift, 17, 11);
            Table.States (2).Productions := WisiToken.To_Vector ((1 => (29, 8)));
            Add_Action (Table.States (2), 18, 12);
            Add_Error (Table.States (2));
            Add_Goto (Table.States (2), 26, 16);
            Table.States (2).Minimal_Complete_Action := (Shift, 18, 12);
            Table.States (3).Productions := WisiToken.To_Vector ((1 => (31, 0)));
            Add_Action (Table.States (3), 18, 12);
            Add_Error (Table.States (3));
            Add_Goto (Table.States (3), 26, 17);
            Add_Goto (Table.States (3), 27, 18);
            Table.States (3).Minimal_Complete_Action := (Shift, 18, 12);
            Table.States (4).Productions := WisiToken.To_Vector ((1 => (20, 0)));
            Add_Action (Table.States (4), 19, Accept_It, (20, 0), 1, null, null);
            Add_Error (Table.States (4));
            Table.States (5).Productions := WisiToken.To_Vector (((22, 0), (23, 0)));
            Add_Action (Table.States (5), 7, 1);
            Add_Action (Table.States (5), 10, 2);
            Add_Action (Table.States (5), 12, 3);
            Add_Action (Table.States (5), 19, Reduce, (22, 0), 1, null, compilation_unit_0_check'Access);
            Add_Error (Table.States (5));
            Add_Goto (Table.States (5), 24, 19);
            Add_Goto (Table.States (5), 29, 7);
            Add_Goto (Table.States (5), 31, 8);
            Table.States (5).Minimal_Complete_Action := (Reduce, 22, 1);
            Table.States (6).Productions := WisiToken.To_Vector ((1 => (23, 1)));
            Add_Action (Table.States (6), (7, 10, 12, 19), (23, 1), 1, null, null);
            Table.States (6).Minimal_Complete_Action := (Reduce, 23, 1);
            Table.States (7).Productions := WisiToken.To_Vector ((1 => (24, 0)));
            Add_Action (Table.States (7), (7, 10, 12, 19), (24, 0), 1, null, null);
            Table.States (7).Minimal_Complete_Action := (Reduce, 24, 1);
            Table.States (8).Productions := WisiToken.To_Vector ((1 => (24, 1)));
            Add_Action (Table.States (8), (7, 10, 12, 19), (24, 1), 1, null, null);
            Table.States (8).Minimal_Complete_Action := (Reduce, 24, 1);
            Table.States (9).Productions := WisiToken.To_Vector (((21, 0), (21, 1)));
            Add_Action (Table.States (9), 6, 20);
            Add_Error (Table.States (9));
            Add_Goto (Table.States (9), 25, 21);
            Table.States (9).Minimal_Complete_Action := (Shift, 6, 20);
            Table.States (10).Productions := WisiToken.To_Vector (((28, 0), (28, 1)));
            Add_Action (Table.States (10), 14, 22);
            Add_Action (Table.States (10), 18, 23);
            Add_Error (Table.States (10));
            Table.States (10).Minimal_Complete_Action := (Shift, 14, 22);
            Table.States (11).Productions := WisiToken.To_Vector ((1 => (29, 7)));
            Add_Action (Table.States (11), (7, 10, 12, 19), (29, 7), 2, subprogram_7'Access, null);
            Table.States (11).Minimal_Complete_Action := (Reduce, 29, 2);
            Table.States (12).Productions := WisiToken.To_Vector ((1 => (26, 1)));
            Add_Action (Table.States (12), (3, 4, 9, 13, 15, 16, 17), (26, 1), 1, name_1'Access, name_1_check'Access);
            Table.States (12).Minimal_Complete_Action := (Reduce, 26, 1);
            Table.States (13).Productions := WisiToken.To_Vector ((1 => (29, 6)));
            Add_Action (Table.States (13), 17, 24);
            Add_Error (Table.States (13));
            Table.States (13).Minimal_Complete_Action := (Shift, 17, 24);
            Table.States (14).Productions := WisiToken.To_Vector (((26, 0), (29, 0), (29, 1), (29, 2), (29, 3)));
            Add_Action (Table.States (14), 3, 9);
            Add_Action (Table.States (14), 13, 10);
            Add_Action (Table.States (14), 16, 25);
            Add_Action (Table.States (14), 17, 26);
            Add_Error (Table.States (14));
            Add_Goto (Table.States (14), 21, 27);
            Add_Goto (Table.States (14), 28, 28);
            Table.States (14).Minimal_Complete_Action := (Shift, 17, 26);
            Table.States (15).Productions := WisiToken.To_Vector (((29, 4), (29, 5)));
            Add_Action (Table.States (15), 3, 9);
            Add_Action (Table.States (15), 17, 29);
            Add_Error (Table.States (15));
            Add_Goto (Table.States (15), 21, 30);
            Table.States (15).Minimal_Complete_Action := (Shift, 17, 29);
            Table.States (16).Productions := WisiToken.To_Vector (((26, 0), (29, 8)));
            Add_Action (Table.States (16), 13, 10);
            Add_Action (Table.States (16), 16, 25);
            Add_Error (Table.States (16));
            Add_Goto (Table.States (16), 28, 31);
            Table.States (16).Minimal_Complete_Action := (Shift, 13, 10);
            Table.States (17).Productions := WisiToken.To_Vector (((26, 0), (27, 1)));
            Add_Action (Table.States (17), 15, Reduce, (27, 1), 1, null, null);
            Add_Action (Table.States (17), 16, 25);
            Add_Action (Table.States (17), 17, Reduce, (27, 1), 1, null, null);
            Add_Error (Table.States (17));
            Table.States (17).Minimal_Complete_Action := (Reduce, 27, 1);
            Table.States (18).Productions := WisiToken.To_Vector (((27, 0), (31, 0)));
            Add_Action (Table.States (18), 15, 32);
            Add_Action (Table.States (18), 17, 33);
            Add_Error (Table.States (18));
            Table.States (18).Minimal_Complete_Action := (Shift, 17, 33);
            Table.States (19).Productions := WisiToken.To_Vector ((1 => (23, 0)));
            Add_Action (Table.States (19), (7, 10, 12, 19), (23, 0), 2, null, null);
            Table.States (19).Minimal_Complete_Action := (Reduce, 23, 2);
            Table.States (20).Productions := WisiToken.To_Vector ((1 => (25, 0)));
            Add_Action (Table.States (20), 18, 34);
            Add_Error (Table.States (20));
            Table.States (20).Minimal_Complete_Action := (Shift, 18, 34);
            Table.States (21).Productions := WisiToken.To_Vector (((21, 0), (21, 1)));
            Add_Action (Table.States (21), 4, 35);
            Add_Action (Table.States (21), 5, 36);
            Add_Error (Table.States (21));
            Table.States (21).Minimal_Complete_Action := (Shift, 4, 35);
            Table.States (22).Productions := WisiToken.To_Vector ((1 => (28, 1)));
            Add_Action (Table.States (22), (3, 4, 17), (28, 1), 2, parameter_list_1'Access, null);
            Table.States (22).Minimal_Complete_Action := (Reduce, 28, 2);
            Table.States (23).Productions := WisiToken.To_Vector ((1 => (28, 0)));
            Add_Action (Table.States (23), 14, 37);
            Add_Error (Table.States (23));
            Table.States (23).Minimal_Complete_Action := (Shift, 14, 37);
            Table.States (24).Productions := WisiToken.To_Vector ((1 => (29, 6)));
            Add_Action (Table.States (24), (7, 10, 12, 19), (29, 6), 3, subprogram_6'Access, null);
            Table.States (24).Minimal_Complete_Action := (Reduce, 29, 3);
            Table.States (25).Productions := WisiToken.To_Vector ((1 => (26, 0)));
            Add_Action (Table.States (25), 18, 38);
            Add_Error (Table.States (25));
            Table.States (25).Minimal_Complete_Action := (Shift, 18, 38);
            Table.States (26).Productions := WisiToken.To_Vector ((1 => (29, 3)));
            Add_Action (Table.States (26), (7, 10, 12, 19), (29, 3), 3, subprogram_3'Access, null);
            Table.States (26).Minimal_Complete_Action := (Reduce, 29, 3);
            Table.States (27).Productions := WisiToken.To_Vector ((1 => (29, 2)));
            Add_Action (Table.States (27), 17, 39);
            Add_Error (Table.States (27));
            Table.States (27).Minimal_Complete_Action := (Shift, 17, 39);
            Table.States (28).Productions := WisiToken.To_Vector (((29, 0), (29, 1)));
            Add_Action (Table.States (28), 3, 9);
            Add_Action (Table.States (28), 17, 40);
            Add_Error (Table.States (28));
            Add_Goto (Table.States (28), 21, 41);
            Table.States (28).Minimal_Complete_Action := (Shift, 17, 40);
            Table.States (29).Productions := WisiToken.To_Vector ((1 => (29, 5)));
            Add_Action (Table.States (29), (7, 10, 12, 19), (29, 5), 3, subprogram_5'Access, null);
            Table.States (29).Minimal_Complete_Action := (Reduce, 29, 3);
            Table.States (30).Productions := WisiToken.To_Vector ((1 => (29, 4)));
            Add_Action (Table.States (30), 17, 42);
            Add_Error (Table.States (30));
            Table.States (30).Minimal_Complete_Action := (Shift, 17, 42);
            Table.States (31).Productions := WisiToken.To_Vector ((1 => (29, 8)));
            Add_Action (Table.States (31), 4, 43);
            Add_Error (Table.States (31));
            Table.States (31).Minimal_Complete_Action := (Shift, 4, 43);
            Table.States (32).Productions := WisiToken.To_Vector ((1 => (27, 0)));
            Add_Action (Table.States (32), 18, 12);
            Add_Error (Table.States (32));
            Add_Goto (Table.States (32), 26, 44);
            Table.States (32).Minimal_Complete_Action := (Shift, 18, 12);
            Table.States (33).Productions := WisiToken.To_Vector ((1 => (31, 0)));
            Add_Action (Table.States (33), (7, 10, 12, 19), (31, 0), 3, use_clause_0'Access, null);
            Table.States (33).Minimal_Complete_Action := (Reduce, 31, 3);
            Table.States (34).Productions := WisiToken.To_Vector ((1 => (25, 0)));
            Add_Action (Table.States (34), 8, 45);
            Add_Error (Table.States (34));
            Table.States (34).Minimal_Complete_Action := (Shift, 8, 45);
            Table.States (35).Productions := WisiToken.To_Vector ((1 => (21, 1)));
            Add_Action (Table.States (35), (1 =>  17), (21, 1), 3, block_1'Access, null);
            Table.States (35).Minimal_Complete_Action := (Reduce, 21, 3);
            Table.States (36).Productions := WisiToken.To_Vector ((1 => (21, 0)));
            Add_Action (Table.States (36), 11, 46);
            Add_Error (Table.States (36));
            Table.States (36).Minimal_Complete_Action := (Shift, 11, 46);
            Table.States (37).Productions := WisiToken.To_Vector ((1 => (28, 0)));
            Add_Action (Table.States (37), (3, 4, 17), (28, 0), 3, parameter_list_0'Access, null);
            Table.States (37).Minimal_Complete_Action := (Reduce, 28, 3);
            Table.States (38).Productions := WisiToken.To_Vector ((1 => (26, 0)));
            Add_Action (Table.States (38), (3, 4, 9, 13, 15, 16, 17), (26, 0), 3, name_0'Access, name_0_check'Access);
            Table.States (38).Minimal_Complete_Action := (Reduce, 26, 3);
            Table.States (39).Productions := WisiToken.To_Vector ((1 => (29, 2)));
            Add_Action (Table.States (39), (7, 10, 12, 19), (29, 2), 4, subprogram_2'Access, null);
            Table.States (39).Minimal_Complete_Action := (Reduce, 29, 4);
            Table.States (40).Productions := WisiToken.To_Vector ((1 => (29, 1)));
            Add_Action (Table.States (40), (7, 10, 12, 19), (29, 1), 4, subprogram_1'Access, null);
            Table.States (40).Minimal_Complete_Action := (Reduce, 29, 4);
            Table.States (41).Productions := WisiToken.To_Vector ((1 => (29, 0)));
            Add_Action (Table.States (41), 17, 47);
            Add_Error (Table.States (41));
            Table.States (41).Minimal_Complete_Action := (Shift, 17, 47);
            Table.States (42).Productions := WisiToken.To_Vector ((1 => (29, 4)));
            Add_Action (Table.States (42), (7, 10, 12, 19), (29, 4), 4, subprogram_4'Access, null);
            Table.States (42).Minimal_Complete_Action := (Reduce, 29, 4);
            Table.States (43).Productions := WisiToken.To_Vector ((1 => (29, 8)));
            Add_Action (Table.States (43), 18, 12);
            Add_Error (Table.States (43));
            Add_Goto (Table.States (43), 26, 48);
            Table.States (43).Minimal_Complete_Action := (Shift, 18, 12);
            Table.States (44).Productions := WisiToken.To_Vector (((26, 0), (27, 0)));
            Add_Action (Table.States (44), 15, Reduce, (27, 0), 3, null, null);
            Add_Action (Table.States (44), 16, 25);
            Add_Action (Table.States (44), 17, Reduce, (27, 0), 3, null, null);
            Add_Error (Table.States (44));
            Table.States (44).Minimal_Complete_Action := (Reduce, 27, 3);
            Table.States (45).Productions := WisiToken.To_Vector ((1 => (25, 0)));
            Add_Action (Table.States (45), 18, 12);
            Add_Error (Table.States (45));
            Add_Goto (Table.States (45), 26, 49);
            Add_Goto (Table.States (45), 30, 50);
            Table.States (45).Minimal_Complete_Action := (Shift, 18, 12);
            Table.States (46).Productions := WisiToken.To_Vector ((1 => (21, 0)));
            Add_Action (Table.States (46), 18, 12);
            Add_Error (Table.States (46));
            Add_Goto (Table.States (46), 26, 51);
            Table.States (46).Minimal_Complete_Action := (Shift, 18, 12);
            Table.States (47).Productions := WisiToken.To_Vector ((1 => (29, 0)));
            Add_Action (Table.States (47), (7, 10, 12, 19), (29, 0), 5, subprogram_0'Access, null);
            Table.States (47).Minimal_Complete_Action := (Reduce, 29, 5);
            Table.States (48).Productions := WisiToken.To_Vector (((26, 0), (29, 8)));
            Add_Action (Table.States (48), 16, 25);
            Add_Action (Table.States (48), 17, 52);
            Add_Error (Table.States (48));
            Table.States (48).Minimal_Complete_Action := (Shift, 17, 52);
            Table.States (49).Productions := WisiToken.To_Vector (((26, 0), (30, 0)));
            Add_Action (Table.States (49), 9, Reduce, (30, 0), 1, subtype_0'Access, null);
            Add_Action (Table.States (49), 16, 25);
            Add_Error (Table.States (49));
            Table.States (49).Minimal_Complete_Action := (Reduce, 30, 1);
            Table.States (50).Productions := WisiToken.To_Vector ((1 => (25, 0)));
            Add_Action (Table.States (50), 9, 53);
            Add_Error (Table.States (50));
            Table.States (50).Minimal_Complete_Action := (Shift, 9, 53);
            Table.States (51).Productions := WisiToken.To_Vector (((21, 0), (26, 0)));
            Add_Action (Table.States (51), 4, 54);
            Add_Action (Table.States (51), 16, 25);
            Add_Error (Table.States (51));
            Table.States (51).Minimal_Complete_Action := (Shift, 4, 54);
            Table.States (52).Productions := WisiToken.To_Vector ((1 => (29, 8)));
            Add_Action (Table.States (52), (7, 10, 12, 19), (29, 8), 6, subprogram_8'Access, null);
            Table.States (52).Minimal_Complete_Action := (Reduce, 29, 6);
            Table.States (53).Productions := WisiToken.To_Vector ((1 => (25, 0)));
            Add_Action (Table.States (53), 17, 55);
            Add_Error (Table.States (53));
            Table.States (53).Minimal_Complete_Action := (Shift, 17, 55);
            Table.States (54).Productions := WisiToken.To_Vector ((1 => (21, 0)));
            Add_Action (Table.States (54), (1 =>  17), (21, 0), 6, block_0'Access, null);
            Table.States (54).Minimal_Complete_Action := (Reduce, 21, 6);
            Table.States (55).Productions := WisiToken.To_Vector ((1 => (25, 0)));
            Add_Action (Table.States (55), (4, 5), (25, 0), 6, loop_statement_0'Access, null);
            Table.States (55).Minimal_Complete_Action := (Reduce, 25, 6);
         end Subr_1;
      begin
         Subr_1;
      end;

      WisiToken.Parse.LR.Parser.New_Parser
        (Parser,
         Trace,
         Lexer.New_Lexer (Trace.Descriptor),
         Table,
         Language_Fixes,
         Language_Use_Minimal_Complete_Actions,
         Language_String_ID_Set,
         User_Data,
         Max_Parallel         => 15,
         Terminate_Same_State => True);
   end Create_Parser;
end Subprograms_Process_LALR_Main;
