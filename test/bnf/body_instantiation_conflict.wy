;; Small Ada-like grammar illustrating the shift/reduce conflict
;; between a procedure body and a generic procedure instantiation.
;; Conflict is handled by generalized parser
;;
;; Also tests wisi rules parser

%code copyright_license %{
;;  Copyright (C) 2013, 2017 - 2019 Stephen Leake.  All Rights Reserved.

;;  This program is free software; you can redistribute it and/or
;;  modify it under the terms of the GNU General Public License as
;;  published by the Free Software Foundation; either version 3, or (at
;;  your option) any later version.
;;
;;  This software is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;  General Public License for more details.
;;
;;  You should have received a copy of the GNU General Public License
;;  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
}%

;; testing that '%code' works
%code actions body context %{--  with WisiToken.Token_Region;}%

%code actions spec post %{
   --  State : aliased WisiToken.Token_Region.State_Type (Trace'Access);
}%

%generate LALR Ada re2c
%generate LR1 Ada re2c
%generate Packrat_Gen Ada re2c
%generate Packrat_Proc Ada re2c

%keyword BEGIN "begin"
%keyword END "end"
%keyword IS "is"
%keyword LEFT_PAREN "("
%keyword NEW "new"
%keyword NULL "null"
%keyword PROCEDURE "procedure"
%keyword RIGHT_PAREN ")"

%token <punctuation> SEMICOLON ";"
%token <symbol> IDENTIFIER %[ [a-zA-Z][0-9a-zA-Z_]* ]%

%non_grammar <non-reporting> WHITESPACE %[ [ \t] ]%
%non_grammar <new-line> NEW_LINE %[ [\x0a]|[\x0d][\x0a] ]%

%start compilation_unit

;; don't actually need this %if, but we are testing it.
%if parser = LALR
%conflict SHIFT/REDUCE in state generic_instantiation, subprogram_specification on token IS
%end if
%if parser = LR1
%conflict SHIFT/REDUCE in state generic_instantiation, subprogram_specification on token IS
%end if

compilation_unit
  : library_item library_item
  ;

;; all on one line, no spaces before '|' ';'
library_item : subprogram_body|generic_instantiation;

subprogram_body
 ;; comment before : line
  : subprogram_specification IS BEGIN NULL END SEMICOLON
  ;

;; some on one line
subprogram_specification
  : PROCEDURE IDENTIFIER parameter_list  ;

;; all on one line, empty production
parameter_list : LEFT_PAREN IDENTIFIER RIGHT_PAREN | ;

generic_instantiation
  : PROCEDURE IDENTIFIER IS NEW IDENTIFIER LEFT_PAREN IDENTIFIER RIGHT_PAREN SEMICOLON
  ;

;;; end of file
