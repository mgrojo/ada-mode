;;; generated from java_ebnf.wy
;;;
;; Examples of EBNF syntax used in the Java grammar file
;; https://github.com/antlr/grammars-v4/tree/master/java
;;
;; Note that the only *.*_good file is java_ebnf_bnf.wy_good, and that
;; this file does not declare all used tokens; we are only testing the
;; translation from EBNF to BNF.

%meta_syntax BNF

%start compilationUnit
%generate None

%token <punctuation> ADD_ASSIGN '+='
%token <punctuation> AND_ASSIGN '&='
%token <punctuation> ASSIGN '='
%token <punctuation> COMMA ','
%token <punctuation> DEC '--'
%token <punctuation> DIV_ASSIGN '/='
%token <punctuation> DOT '.'
%token <punctuation> INC '++'
%token <punctuation> LBRACE '{'
%token <punctuation> LBRACK '['
%token <punctuation> LSHIFT_ASSIGN '<<='
%token <punctuation> MOD_ASSIGN '%='
%token <punctuation> MUL_ASSIGN '*='
%token <punctuation> OR_ASSIGN '|='
%token <punctuation> RBRACE '}'
%token <punctuation> RBRACK ']'
%token <punctuation> RSHIFT_ASSIGN '>>='
%token <punctuation> SEMI ';'
%token <punctuation> SUB_ASSIGN '-='
%token <punctuation> URSHIFT_ASSIGN '>>>='
%token <punctuation> XOR_ASSIGN '^='

;; IDENTIFIER QUESTION | IDENTIFIER STAR
compilationUnit
  : packageDeclaration nonterminal_004_list nonterminal_005_list EOF
  | packageDeclaration nonterminal_004_list EOF
  | packageDeclaration nonterminal_005_list EOF
  | packageDeclaration EOF
  | nonterminal_004_list nonterminal_005_list EOF
  | nonterminal_004_list EOF
  | nonterminal_005_list EOF
  | EOF
  ;

statement
  : blockLabel=block
  | TRY block nonterminal_007
    %((wisi-statement-action [1 statement-start]))%
  | SWITCH parExpression LBRACE nonterminal_009_list nonterminal_011_list RBRACE
  | SWITCH parExpression LBRACE nonterminal_009_list RBRACE
  | SWITCH parExpression LBRACE nonterminal_011_list RBRACE
  | SWITCH parExpression LBRACE RBRACE
  ;

;; rhs_group_item QUESTION | STRING_LITERAL_2 QUESTION
enumDeclaration
  : ENUM IDENTIFIER IMPLEMENTS typeList LBRACE enumConstants COMMA enumBodyDeclarations RBRACE
  | ENUM IDENTIFIER IMPLEMENTS typeList LBRACE enumConstants COMMA RBRACE
  | ENUM IDENTIFIER IMPLEMENTS typeList LBRACE enumConstants enumBodyDeclarations RBRACE
  | ENUM IDENTIFIER IMPLEMENTS typeList LBRACE enumConstants RBRACE
  | ENUM IDENTIFIER IMPLEMENTS typeList LBRACE COMMA enumBodyDeclarations RBRACE
  | ENUM IDENTIFIER IMPLEMENTS typeList LBRACE COMMA RBRACE
  | ENUM IDENTIFIER IMPLEMENTS typeList LBRACE enumBodyDeclarations RBRACE
  | ENUM IDENTIFIER IMPLEMENTS typeList LBRACE RBRACE
  | ENUM IDENTIFIER LBRACE enumConstants COMMA enumBodyDeclarations RBRACE
  | ENUM IDENTIFIER LBRACE enumConstants COMMA RBRACE
  | ENUM IDENTIFIER LBRACE enumConstants enumBodyDeclarations RBRACE
  | ENUM IDENTIFIER LBRACE enumConstants RBRACE
  | ENUM IDENTIFIER LBRACE COMMA enumBodyDeclarations RBRACE
  | ENUM IDENTIFIER LBRACE COMMA RBRACE
  | ENUM IDENTIFIER LBRACE enumBodyDeclarations RBRACE
  | ENUM IDENTIFIER LBRACE RBRACE
  ;

;; Duplicate '(IMPLEMENTS typeList)?'
classDeclaration
  : CLASS IDENTIFIER typeParameters EXTENDS typeType IMPLEMENTS typeList classBody
  | CLASS IDENTIFIER typeParameters EXTENDS typeType classBody
  | CLASS IDENTIFIER typeParameters IMPLEMENTS typeList classBody
  | CLASS IDENTIFIER typeParameters classBody
  | CLASS IDENTIFIER EXTENDS typeType IMPLEMENTS typeList classBody
  | CLASS IDENTIFIER EXTENDS typeType classBody
  | CLASS IDENTIFIER IMPLEMENTS typeList classBody
  | CLASS IDENTIFIER classBody
  ;

;; labeled rhs_optional_item
forControl
  : enhancedForControl
  | forInit SEMI expression SEMI forUpdate=expressionList
  | forInit SEMI expression SEMI
  | forInit SEMI SEMI forUpdate=expressionList
  | forInit SEMI SEMI
  | SEMI expression SEMI forUpdate=expressionList
  | SEMI expression SEMI
  | SEMI SEMI forUpdate=expressionList
  | SEMI SEMI
  ;

;; labeled STRING_LITERAL_2, non-trivial rhs_alternative_list, labeled rhs_group_item, rhs_attribute
expression
  : primary
  | expression bop=DOT nonterminal_018
  | expression postfix=nonterminal_021

;; attribute with more than one item following
  | expression bop=nonterminal_034 expression

;; attribute with one item following
  | expression
  ;

;; non-trivial group item
arrayCreatorRest
  : LBRACK nonterminal_048
  ;

;; another non-trivial group item, and lots of copies
interfaceMethodDeclaration
  : nonterminal_049_list nonterminal_051 IDENTIFIER formalParameters nonterminal_039_list THROWS qualifiedNameList methodBody
  | nonterminal_049_list nonterminal_051 IDENTIFIER formalParameters nonterminal_039_list methodBody
  | nonterminal_049_list nonterminal_051 IDENTIFIER formalParameters THROWS qualifiedNameList methodBody
  | nonterminal_049_list nonterminal_051 IDENTIFIER formalParameters methodBody
  | nonterminal_051 IDENTIFIER formalParameters nonterminal_039_list THROWS qualifiedNameList methodBody
  | nonterminal_051 IDENTIFIER formalParameters nonterminal_039_list methodBody
  | nonterminal_051 IDENTIFIER formalParameters THROWS qualifiedNameList methodBody
  | nonterminal_051 IDENTIFIER formalParameters methodBody
  ;

;; trailing optional with multiple tokens
typeParameter
  : nonterminal_050_list IDENTIFIER EXTENDS typeBound  | nonterminal_050_list IDENTIFIER
  | IDENTIFIER EXTENDS typeBound
  | IDENTIFIER
  ;

;; end of file
nonterminal_004_list
  : importDeclaration
  | nonterminal_004_list importDeclaration
  ;
nonterminal_005_list
  : typeDeclaration
  | nonterminal_005_list typeDeclaration
  ;
nonterminal_006_list
  : catchClause
  | nonterminal_006_list catchClause
  ;
nonterminal_007
  : nonterminal_006_list finallyBlock
  | nonterminal_006_list
  | finallyBlock
  ;
nonterminal_009_list
  : switchBlockStatementGroup
  | nonterminal_009_list switchBlockStatementGroup
  ;
nonterminal_011_list
  : switchLabel
  | nonterminal_011_list switchLabel
  ;
nonterminal_018
  : THIS
  | NEW nonWildcardTypeArguments innerCreator
  | NEW innerCreator
  | SUPER superSuffix
  | explicitGenericInvocation
  ;
nonterminal_021
  : INC
  | DEC
  ;
nonterminal_034
  : ASSIGN
  | ADD_ASSIGN
  | SUB_ASSIGN
  | MUL_ASSIGN
  | DIV_ASSIGN
  | AND_ASSIGN
  | OR_ASSIGN
  | XOR_ASSIGN
  | RSHIFT_ASSIGN
  | URSHIFT_ASSIGN
  | LSHIFT_ASSIGN
  | MOD_ASSIGN
  ;
nonterminal_040
  : LBRACK RBRACK
  ;
nonterminal_039_list
  : nonterminal_040
  | nonterminal_039_list nonterminal_040
  ;
nonterminal_045
  : LBRACK expression RBRACK
  ;
nonterminal_044_list
  : nonterminal_045
  | nonterminal_044_list nonterminal_045
  ;
nonterminal_048
  : RBRACK nonterminal_039_list arrayInitializer
  | RBRACK arrayInitializer
  | expression RBRACK nonterminal_044_list nonterminal_039_list
  | expression RBRACK nonterminal_044_list
  | expression RBRACK nonterminal_039_list
  | expression RBRACK
  ;
nonterminal_049_list
  : interfaceMethodModifier
  | nonterminal_049_list interfaceMethodModifier
  ;
nonterminal_050_list
  : annotation
  | nonterminal_050_list annotation
  ;
nonterminal_051
  : typeTypeOrVoid
  | typeParameters nonterminal_050_list typeTypeOrVoid
  | typeParameters typeTypeOrVoid
  ;
