;;; generated from java_ebnf.wy -*- buffer-read-only:t -*-
;;;
;; Examples of EBNF syntax used in the Java grammar file
;; https://github.com/antlr/grammars-v4/tree/master/java
;;
;; Note that the only *.*_good file is java_ebnf_bnf.wy_good, and that
;; this file does not declare all used tokens; we are only testing the
;; translation from EBNF to BNF.

%meta_syntax BNF

%keyword RETURN "return"
%start compilationUnit
%generate None
%partial_recursion

%token <punctuation> ADD_ASSIGN '+='
%token <punctuation> AND_ASSIGN '&='
%token <punctuation> ASSIGN '='
%token <punctuation> COMMA ','
%token <punctuation> DEC '--'
%token <punctuation> DIV_ASSIGN '/='
%token <punctuation> DOT '.'
%token <punctuation> INC '++'
%token <punctuation> LBRACE '{'
%token <punctuation> LBRACK '['
%token <punctuation> LSHIFT_ASSIGN '<<='
%token <punctuation> MOD_ASSIGN '%='
%token <punctuation> MUL_ASSIGN '*='
%token <punctuation> OR_ASSIGN '|='
%token <punctuation> RBRACE '}'
%token <punctuation> RBRACK ']'
%token <punctuation> RSHIFT_ASSIGN '>>='
%token <punctuation> SEMI ';'
%token <punctuation> SUB_ASSIGN '-='
%token <punctuation> URSHIFT_ASSIGN '>>>='
%token <punctuation> XOR_ASSIGN '^='

;; IDENTIFIER QUESTION | IDENTIFIER STAR
compilationUnit
  : packageDeclaration nonterminal_042_list nonterminal_043_list EOF
  | packageDeclaration nonterminal_042_list EOF
  | packageDeclaration nonterminal_043_list EOF
  | packageDeclaration EOF
  | nonterminal_042_list nonterminal_043_list EOF
  | nonterminal_042_list EOF
  | nonterminal_043_list EOF
  | EOF
  ;

statement
  : blockLabel=block
  | TRY block nonterminal_045
    %((wisi-statement-action [1 statement-start]))%
  | SWITCH parExpression LBRACE nonterminal_046_list nonterminal_047_list RBRACE
  | SWITCH parExpression LBRACE nonterminal_046_list RBRACE
  | SWITCH parExpression LBRACE nonterminal_047_list RBRACE
  | SWITCH parExpression LBRACE RBRACE
  ;

;; rhs_group_item QUESTION | STRING_LITERAL_2 QUESTION
enumDeclaration
  : ENUM IDENTIFIER IMPLEMENTS typeList LBRACE enumConstants COMMA enumBodyDeclarations RBRACE
  | ENUM IDENTIFIER IMPLEMENTS typeList LBRACE enumConstants COMMA RBRACE
  | ENUM IDENTIFIER IMPLEMENTS typeList LBRACE enumConstants enumBodyDeclarations RBRACE
  | ENUM IDENTIFIER IMPLEMENTS typeList LBRACE enumConstants RBRACE
  | ENUM IDENTIFIER IMPLEMENTS typeList LBRACE COMMA enumBodyDeclarations RBRACE
  | ENUM IDENTIFIER IMPLEMENTS typeList LBRACE COMMA RBRACE
  | ENUM IDENTIFIER IMPLEMENTS typeList LBRACE enumBodyDeclarations RBRACE
  | ENUM IDENTIFIER IMPLEMENTS typeList LBRACE RBRACE
  | ENUM IDENTIFIER LBRACE enumConstants COMMA enumBodyDeclarations RBRACE
  | ENUM IDENTIFIER LBRACE enumConstants COMMA RBRACE
  | ENUM IDENTIFIER LBRACE enumConstants enumBodyDeclarations RBRACE
  | ENUM IDENTIFIER LBRACE enumConstants RBRACE
  | ENUM IDENTIFIER LBRACE COMMA enumBodyDeclarations RBRACE
  | ENUM IDENTIFIER LBRACE COMMA RBRACE
  | ENUM IDENTIFIER LBRACE enumBodyDeclarations RBRACE
  | ENUM IDENTIFIER LBRACE RBRACE
  ;

;; Duplicate '(IMPLEMENTS typeList)?'
classDeclaration
  : CLASS IDENTIFIER typeParameters EXTENDS typeType IMPLEMENTS typeList classBody
  | CLASS IDENTIFIER typeParameters EXTENDS typeType classBody
  | CLASS IDENTIFIER typeParameters IMPLEMENTS typeList classBody
  | CLASS IDENTIFIER typeParameters classBody
  | CLASS IDENTIFIER EXTENDS typeType IMPLEMENTS typeList classBody
  | CLASS IDENTIFIER EXTENDS typeType classBody
  | CLASS IDENTIFIER IMPLEMENTS typeList classBody
  | CLASS IDENTIFIER classBody
  ;

;; labeled rhs_optional_item
forControl
  : enhancedForControl
  | forInit SEMI expression SEMI forUpdate=expressionList
  | forInit SEMI expression SEMI
  | forInit SEMI SEMI forUpdate=expressionList
  | forInit SEMI SEMI
  | SEMI expression SEMI forUpdate=expressionList
  | SEMI expression SEMI
  | SEMI SEMI forUpdate=expressionList
  | SEMI SEMI
  ;

;; no labels in canonical list
argumentList
  : argument
  | argumentList COMMA argument
  ;

;; labels in canonical list
expressionList
  : T1=expression
    %((wisi-indent-action [(T1 . (wisi-indent-hanging 0 java-indent-broken))
                           (T2 . 0)
                           (T3 . [(wisi-indent-hanging 0 java-indent-broken)
                                  (wisi-indent-hanging 0 java-indent-broken))]))%
  | expressionList=expressionList T2=COMMA T3=expression
    %((wisi-indent-action [(T1 . (wisi-indent-hanging 0 java-indent-broken))
                           (T2 . 0)
                           (T3 . [(wisi-indent-hanging 0 java-indent-broken)
                                  (wisi-indent-hanging 0 java-indent-broken))]))%
  ;

;; Start test of previous bug in searching for single-element list
;; nonterm.
PrimitiveType
  : AnnotationList NumericType
  | NumericType
  | AnnotationList boolean
  | boolean
  ;

;; This is not an AnnotationList.
TypeParameterModifier
  : Annotation
  ;

;; This is an AnnotationList
AnnotationList
  : Annotation
  | AnnotationList Annotation
  ;
;; End test of previous bug in searching for list nonterm.

;; Single-item optional brackets with label.
ReturnStatement
  : T1=RETURN T2=Expression T3=SEMI
    %((wisi-indent-action [(T1 . 0) (T2 . java-indent-broken) (T3 . 0)]))%
  | T1=RETURN T3=SEMI
    %((wisi-indent-action [(T1 . 0) (T2 . java-indent-broken) (T3 . 0)]))%
  ;

;; labeled STRING_LITERAL_2, non-trivial rhs_alternative_list, labeled rhs_group_item, rhs_attribute
expression
  : primary
  | expression bop=DOT nonterminal_049
  | expression postfix=nonterminal_050

;; attribute with more than one item following
  | expression bop=nonterminal_051 expression

;; attribute with one item following
  | expression
  ;

;; non-trivial group item
arrayCreatorRest
  : LBRACK nonterminal_056
  ;

;; another non-trivial group item, and lots of copies
interfaceMethodDeclaration
  : nonterminal_057_list nonterminal_059 IDENTIFIER formalParameters nonterminal_052_list THROWS qualifiedNameList methodBody
  | nonterminal_057_list nonterminal_059 IDENTIFIER formalParameters nonterminal_052_list methodBody
  | nonterminal_057_list nonterminal_059 IDENTIFIER formalParameters THROWS qualifiedNameList methodBody
  | nonterminal_057_list nonterminal_059 IDENTIFIER formalParameters methodBody
  | nonterminal_059 IDENTIFIER formalParameters nonterminal_052_list THROWS qualifiedNameList methodBody
  | nonterminal_059 IDENTIFIER formalParameters nonterminal_052_list methodBody
  | nonterminal_059 IDENTIFIER formalParameters THROWS qualifiedNameList methodBody
  | nonterminal_059 IDENTIFIER formalParameters methodBody
  ;

;; trailing optional with multiple tokens
typeParameter
  : nonterminal_058_list IDENTIFIER EXTENDS typeBound
  | nonterminal_058_list IDENTIFIER
  | IDENTIFIER EXTENDS typeBound
  | IDENTIFIER
  ;

;; Recognize this as a canonical list
SwitchLabels
  : SwitchLabel
  | SwitchLabels SwitchLabel
  ;

;; end of file
nonterminal_042_list
  : importDeclaration
  | nonterminal_042_list importDeclaration
  ;
nonterminal_043_list
  : typeDeclaration
  | nonterminal_043_list typeDeclaration
  ;
nonterminal_044_list
  : catchClause
  | nonterminal_044_list catchClause
  ;
nonterminal_045
  : nonterminal_044_list finallyBlock
  | nonterminal_044_list
  | finallyBlock
  ;
nonterminal_046_list
  : switchBlockStatementGroup
  | nonterminal_046_list switchBlockStatementGroup
  ;
nonterminal_047_list
  : switchLabel
  | nonterminal_047_list switchLabel
  ;
nonterminal_049
  : THIS
  | NEW nonWildcardTypeArguments innerCreator
  | NEW innerCreator
  | SUPER superSuffix
  | explicitGenericInvocation
  ;
nonterminal_050
  : INC
  | DEC
  ;
nonterminal_051
  : ASSIGN
  | ADD_ASSIGN
  | SUB_ASSIGN
  | MUL_ASSIGN
  | DIV_ASSIGN
  | AND_ASSIGN
  | OR_ASSIGN
  | XOR_ASSIGN
  | RSHIFT_ASSIGN
  | URSHIFT_ASSIGN
  | LSHIFT_ASSIGN
  | MOD_ASSIGN
  ;
nonterminal_053
  : LBRACK RBRACK
  ;
nonterminal_052_list
  : nonterminal_053
  | nonterminal_052_list nonterminal_053
  ;
nonterminal_055
  : LBRACK expression RBRACK
  ;
nonterminal_054_list
  : nonterminal_055
  | nonterminal_054_list nonterminal_055
  ;
nonterminal_056
  : RBRACK nonterminal_052_list arrayInitializer
  | RBRACK arrayInitializer
  | expression RBRACK nonterminal_054_list nonterminal_052_list
  | expression RBRACK nonterminal_054_list
  | expression RBRACK nonterminal_052_list
  | expression RBRACK
  ;
nonterminal_057_list
  : interfaceMethodModifier
  | nonterminal_057_list interfaceMethodModifier
  ;
nonterminal_058_list
  : annotation
  | nonterminal_058_list annotation
  ;
nonterminal_059
  : typeTypeOrVoid
  | typeParameters nonterminal_058_list typeTypeOrVoid
  | typeParameters typeTypeOrVoid
  ;
