;; Grammar has no conflicts; test wisi cache actions in Emacs
;; (ediff "subprograms.wy" "../../../org.wisitoken.stephe-1/wisi/test/subprograms.wy")

%code copyright_license %{
;;  Copyright (C) 2013, 2017 - 2019 Stephen Leake.  All Rights Reserved.

;;  This program is free software; you can redistribute it and/or
;;  modify it under the terms of the GNU General Public License as
;;  published by the Free Software Foundation; either version 3, or (at
;;  your option) any later version.
;;
;;  This software is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;  General Public License for more details.
;;
;;  You should have received a copy of the GNU General Public License
;;  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
}%

%meta_syntax EBNF

%generate LALR         Ada_Emacs re2c Process
%start compilation_unit

;; FIXME: implement *, ? directly in packrat
;; %generate Packrat_Gen  Ada_Emacs re2c Process
;; %generate Packrat_Proc Ada_Emacs re2c Process

%keyword BEGIN "begin"
%keyword END "end"
%keyword EXCEPTION "exception"
%keyword FOR "for"
%keyword FUNCTION "function"
%keyword IN "in"
%keyword LOOP "loop"
%keyword PROCEDURE "procedure"
%keyword WHEN "when"
%keyword USE "use"

%token <left-paren> LEFT_PAREN "("
%token <right-paren> RIGHT_PAREN ")"

%token <punctuation> COMMA ","
%token <punctuation> DOT "."
%token <punctuation> SEMICOLON ";"

%token <symbol> SYMBOL %[ [a-zA-Z][0-9a-zA-Z_]* ]% "bogus_symbol"

%non_grammar <non-reporting> WHITESPACE %[ [ \t] ]%
%non_grammar <new-line> NEW_LINE %[ [\n] ]%
%non_grammar <comment> COMMENT_1 %[ "--"[^\n]* ]%
%non_grammar <comment> COMMENT_2 %[ "//"[^\n]* ]%

%mckenzie_check_limit 3
%mckenzie_check_delta_limit 200
%mckenzie_enqueue_limit 10_000
%mckenzie_cost_default 4 4 4 4

;; elisp names in face actions
%elisp_face font-lock-keyword-face
%elisp_face font-lock-type-face
%elisp_face font-lock-function-name-face
%elisp_face nil

;; language-specific elisp names in indent actions
%elisp_indent subp-indent-function Function_1

;; language-specific elisp action
%elisp_action face wisi-mmmify-token MMMify_Token

block
  : beg=BEGIN T2=loop_statement [T3=EXCEPTION whe=WHEN T5=name] T6=END
    %((progn
      (wisi-statement-action [T2 motion T3 motion whe motion])
      (wisi-indent-action [(beg . nil) (T2 . subp-indent) (T3 . nil) (whe . subp-indent) (T5 . nil) (T6 . nil)])))%
;

compilation_unit
  : declarations
    %()%
    %((wisi-terminate-partial-parse))%
  ;

declarations
  : declarations declaration
  | declaration
  ;

declaration
  : subprogram
  | use_clause
  ;

loop_statement
  : FOR SYMBOL IN nam=subtype LOOP SEMICOLON
    %((progn
      (wisi-face-remove-action [nam])
      (wisi-indent-action [(- subp-indent) 0 (- subp-indent subp-indent-broken) subp-indent 0 0])))%
  ;

name
  : [pre=name DOT] suf=SYMBOL
    %((wisi-face-mark-action [pre prefix suf suffix]))%
    %((wisi-merge-names pre suf))%
  ;

;; Recognized canonical list with action, token labels
name_list
  : T1=name (T2=COMMA T3=name)*
    %((wisi-mmmify-token [T3])
      (wisi-indent-action [(T1 . (wisi-hanging 0 java-indent-broken))
                           (T2 . 0)
                           (T3 . (wisi-hanging 0 java-indent-broken))]))%
  ;

parameter_list
  : lef=LEFT_PAREN nam=SYMBOL? rig=RIGHT_PAREN
    %((progn
      (wisi-statement-action [nam misc])
      (wisi-indent-action [(lef . 0) (nam . (wisi-anchored 1 1)) (rig . (wisi-anchored 1 0))])))%
  ;

subprogram
  : fun=FUNCTION nam=name? par=parameter_list? blo=block? sem=SEMICOLON
    %((progn
        ;; An example of each supported action, with somewhat complex
        ;; parameter syntax, and optional tokens.
        (wisi-statement-action [fun statement-start nam name par misc blo motion sem statement-end])
        (wisi-motion-action [fun [blo EXCEPTION] sem])
        (wisi-face-apply-action [fun nil font-lock-keyword-face nam font-lock-type-face font-lock-function-name-face])
        (wisi-indent-action [(fun . 0)
                             (nam . [subp-indent-broken subp-indent-broken])
                             (par . (subp-indent-function (* 2 subp-indent-broken)))
                             (blo . 0)
                             (sem . 0)])))%
  | PROCEDURE name parameter_list END name SEMICOLON
  ;; No token labels (and thus parameter_list is not optional), to test that flavor
    %((progn
        (wisi-statement-action [1 statement-start 2 name 6 statement-end])
        (wisi-face-apply-action [1 nil font-lock-keyword-face 2 font-lock-type-face font-lock-function-name-face])
        (wisi-indent-action [0 subp-indent-broken subp-indent-broken 0 0 0])))%
  ;

subtype
  : name
    %((wisi-face-apply-action [1 font-lock-type-face font-lock-function-name-face]))%
  ;

use_clause
  : USE name_list SEMICOLON
    %((progn
      (wisi-face-apply-list-action [2 font-lock-type-face font-lock-function-name-face])
      (wisi-indent-action [0 subp-indent-broken 0])))%
  ;

;; end of file
