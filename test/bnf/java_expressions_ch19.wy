;;; Subset of Java grammar, to illustrate problems with the
;;  minimal_complete_actions algorithm.
;;
;;  Original grammar is from
;;  https://docs.oracle.com/javase/specs/jls/se12/html/jls-19.html
;;
;;  Before improving the algorithm to consider multiple actions at
;;  runtime, recover would enter a cycle when handling
;;  java_expressions_ch19.input:
;;
;;  state 22 reduce to LeftHandSide
;;  state 27 shift EQUAL
;;  state 52 shift Identifier
;;  state 22 reduce to LeftHandSide
;;
;;  This loop is not due to recursion, just grammar design and choice
;;  of minimal action.
;;
;;  In addition, state 8 has minimial_complete_action even though all
;;  productions are recursive..

%generate LR1 Ada re2c

%start CompilationUnit
%meta_syntax EBNF
%partial_recursion

%mckenzie_cost_default 3 3 2 0
%mckenzie_enqueue_limit 10_000
%mckenzie_minimal_complete_cost_delta -3

%token <punctuation> COMMA ','
%token <punctuation> DOT '.'
%token <punctuation> EQUAL "="
%token <punctuation> LEFT_CURLY_BRACKET "{"
%token <punctuation> LEFT_PAREN '('
%token <punctuation> MINUS "-"
%token <punctuation> MINUS_GREATER "->"
%token <punctuation> MINUS_MINUS "--"
%token <punctuation> PERCENT "%"
%token <punctuation> PLUS "+"
%token <punctuation> PLUS_PLUS "++"
%token <punctuation> RIGHT_CURLY_BRACKET "}"
%token <punctuation> RIGHT_PAREN ')'
%token <punctuation> SEMICOLON ";"
%token <punctuation> SLASH "/"
%token <punctuation> STAR "*"

%token <symbol> Identifier %[ [a-zA-Z]+ ]%
%non_grammar <comment> EndOfLine_COMMENT %[ "//"[^\n]* ]%
%non_grammar <new-line> NEW_LINE %[ [\x0a]|[\x0d][\x0a] ]%
%non_grammar <non-reporting> WHITESPACE %[ [ \t]+ ]%

CompilationUnit
  : Statement+
  ;

Statement
  : '{' Assignment '}'
  | '{' StatementExpression ';' '}'
  ;

Expression
  : LambdaExpression  | AssignmentExpression
  ;

LambdaExpression
  : Identifier '->' Identifier
  ;

AssignmentExpression
  : AdditiveExpression
  | Assignment
  ;

Assignment
  : LeftHandSide '=' Expression
  ;

LeftHandSide
  : Identifier
  ;

AdditiveExpression:
    MultiplicativeExpression
  | AdditiveExpression '+' MultiplicativeExpression
  | AdditiveExpression '-' MultiplicativeExpression
  ;

MultiplicativeExpression:
    PostfixExpression
  | MultiplicativeExpression '*' PostfixExpression
  | MultiplicativeExpression '/' PostfixExpression
  | MultiplicativeExpression '%' PostfixExpression
  ;

PostfixExpression
  : ClassType
  | MethodInvocation
  | PostIncrementExpression
  | PostDecrementExpression
  ;

PostIncrementExpression: PostfixExpression '++' ;

PostDecrementExpression: PostfixExpression '--' ;

ClassType
  : Identifier
  | ClassType '.' Identifier
  ;

MethodInvocation
  : Identifier '(' ArgumentList ')'
  ;

ArgumentList
  : Expression {',' Expression}
  ;

StatementExpression
  : PostIncrementExpression
  | PostDecrementExpression
  ;


;; end of file
