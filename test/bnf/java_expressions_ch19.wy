;;; Subset of Java grammar, to illustrate problem with
;;  minimal_complete_actions algorithm.
;;
;;  Original grammar is from
;;  https://docs.oracle.com/javase/specs/jls/se12/html/jls-19.html
;;
;;  Before improving the algorithm, recover would enter a cycle when
;;  handling java_expressions_ch19.input:
;;
;;  state 21 reduce to LeftHandSide
;;  state 26 shift EQUAL
;;  state 44 shift Identifier
;;  state 21 reduce to LeftHandSide

%generate LR1 Ada re2c

%start Expression
%meta_syntax EBNF

%mckenzie_cost_default 3 3 2 0
%mckenzie_enqueue_limit 10_000
%mckenzie_minimal_complete_cost_delta -3

%token <punctuation> COMMA ','
%token <punctuation> DOT '.'
%token <punctuation> EQUAL "="
%token <punctuation> LPAREN '('
%token <punctuation> MINUS "-"
%token <punctuation> MINUS_GREATER "->"
%token <punctuation> PERCENT "%"
%token <punctuation> PLUS "+"
%token <punctuation> RPAREN ')'
%token <punctuation> SLASH "/"
%token <punctuation> STAR "*"

%token <symbol> Identifier %[ [a-zA-Z]+ ]%
%non_grammar <comment> EndOfLine_COMMENT %[ "//"[^\n]* ]%
%non_grammar <new-line> NEW_LINE %[ [\x0a]|[\x0d][\x0a] ]%
%non_grammar <non-reporting> WHITESPACE %[ [ \t]+ ]%

Expression
  : LambdaExpression  | AssignmentExpression
  ;

LambdaExpression
  : Identifier '->' Identifier
  ;

AssignmentExpression
  : AdditiveExpression
  | Assignment
  ;

Assignment
  : LeftHandSide '=' Expression
  ;

LeftHandSide
  : Identifier
  ;

AdditiveExpression:
    MultiplicativeExpression
  | AdditiveExpression '+' MultiplicativeExpression
  | AdditiveExpression '-' MultiplicativeExpression
  ;

MultiplicativeExpression:
    PostfixExpression
  | MultiplicativeExpression '*' PostfixExpression
  | MultiplicativeExpression '/' PostfixExpression
  | MultiplicativeExpression '%' PostfixExpression
  ;

PostfixExpression
  : ClassType
  | MethodInvocation
  ;

ClassType
  : Identifier
  | ClassType '.' Identifier
  ;

MethodInvocation
  : Identifier '(' ArgumentList ')'
  ;

ArgumentList
  : Expression {',' Expression}
  ;

  ;; end of file
