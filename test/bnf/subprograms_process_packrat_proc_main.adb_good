--  generated parser support file.
--  command line: wisitoken-bnf-generate.exe  --generate PACKRAT_PROC Ada_Emacs re2c PROCESS ../Test/bnf/subprograms.wy
--

--  Copyright (C) 2013, 2017 - 2019 Stephen Leake.  All Rights Reserved.

--  This program is free software; you can redistribute it and/or
--  modify it under the terms of the GNU General Public License as
--  published by the Free Software Foundation; either version 3, or (at
--  your option) any later version.
--
--  This software is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

with Subprograms_Process_Actions; use Subprograms_Process_Actions;
with WisiToken.Lexer.re2c;
with subprograms_re2c_c;
with WisiToken.Parse;
package body Subprograms_Process_Packrat_Proc_Main is

   package Lexer is new WisiToken.Lexer.re2c
     (subprograms_re2c_c.New_Lexer,
      subprograms_re2c_c.Free_Lexer,
      subprograms_re2c_c.Reset_Lexer,
      subprograms_re2c_c.Next_Token);

   function Create_Parser
     (Trace     : not null access WisiToken.Trace'Class;
      User_Data : in     WisiToken.Syntax_Trees.User_Data_Access)
     return WisiToken.Parse.Base_Parser'Class
   is
      use WisiToken;
      use WisiToken.Productions;
      Grammar               : Prod_Arrays.Vector;
      Direct_Left_Recursive : constant WisiToken.Token_ID_Set (20 .. 31) :=
        (23 | 26 | 27 => True,
         others => False);
   begin
      Grammar.Set_First (20);
      Grammar.Set_Last (31);
      declare
         Prod : Instance;
      begin
         Prod.LHS := 20;
         Prod.RHSs.Set_First (0);
         Prod.RHSs.Set_Last (0);
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (2);
            To_Vector ((22, 19), RHS.Tokens);
            Prod.RHSs (0) := RHS;
         end;
         Grammar (20) := Prod;
      end;
      declare
         Prod : Instance;
      begin
         Prod.LHS := 21;
         Prod.RHSs.Set_First (0);
         Prod.RHSs.Set_Last (1);
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (6);
            To_Vector ((3, 25, 5, 11, 26, 4), RHS.Tokens);
            RHS.Action     := block_0'Access;
            Prod.RHSs (0) := RHS;
         end;
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (3);
            To_Vector ((3, 25, 4), RHS.Tokens);
            RHS.Action     := block_1'Access;
            Prod.RHSs (1) := RHS;
         end;
         Grammar (21) := Prod;
      end;
      declare
         Prod : Instance;
      begin
         Prod.LHS := 22;
         Prod.RHSs.Set_First (0);
         Prod.RHSs.Set_Last (0);
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (1);
            To_Vector ((1 => 23), RHS.Tokens);
            Prod.RHSs (0) := RHS;
         end;
         Grammar (22) := Prod;
      end;
      declare
         Prod : Instance;
      begin
         Prod.LHS := 23;
         Prod.RHSs.Set_First (0);
         Prod.RHSs.Set_Last (1);
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (2);
            To_Vector ((23, 24), RHS.Tokens);
            Prod.RHSs (0) := RHS;
         end;
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (1);
            To_Vector ((1 => 24), RHS.Tokens);
            Prod.RHSs (1) := RHS;
         end;
         Grammar (23) := Prod;
      end;
      declare
         Prod : Instance;
      begin
         Prod.LHS := 24;
         Prod.RHSs.Set_First (0);
         Prod.RHSs.Set_Last (1);
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (1);
            To_Vector ((1 => 29), RHS.Tokens);
            Prod.RHSs (0) := RHS;
         end;
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (1);
            To_Vector ((1 => 31), RHS.Tokens);
            Prod.RHSs (1) := RHS;
         end;
         Grammar (24) := Prod;
      end;
      declare
         Prod : Instance;
      begin
         Prod.LHS := 25;
         Prod.RHSs.Set_First (0);
         Prod.RHSs.Set_Last (0);
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (6);
            To_Vector ((6, 18, 8, 30, 9, 17), RHS.Tokens);
            RHS.Action     := loop_statement_0'Access;
            Prod.RHSs (0) := RHS;
         end;
         Grammar (25) := Prod;
      end;
      declare
         Prod : Instance;
      begin
         Prod.LHS := 26;
         Prod.RHSs.Set_First (0);
         Prod.RHSs.Set_Last (1);
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (3);
            To_Vector ((26, 16, 18), RHS.Tokens);
            RHS.Action     := name_0'Access;
            Prod.RHSs (0) := RHS;
         end;
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (1);
            To_Vector ((1 => 18), RHS.Tokens);
            RHS.Action     := name_1'Access;
            Prod.RHSs (1) := RHS;
         end;
         Grammar (26) := Prod;
      end;
      declare
         Prod : Instance;
      begin
         Prod.LHS := 27;
         Prod.RHSs.Set_First (0);
         Prod.RHSs.Set_Last (1);
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (3);
            To_Vector ((27, 15, 26), RHS.Tokens);
            Prod.RHSs (0) := RHS;
         end;
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (1);
            To_Vector ((1 => 26), RHS.Tokens);
            Prod.RHSs (1) := RHS;
         end;
         Grammar (27) := Prod;
      end;
      declare
         Prod : Instance;
      begin
         Prod.LHS := 28;
         Prod.RHSs.Set_First (0);
         Prod.RHSs.Set_Last (1);
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (3);
            To_Vector ((13, 18, 14), RHS.Tokens);
            RHS.Action     := parameter_list_0'Access;
            Prod.RHSs (0) := RHS;
         end;
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (2);
            To_Vector ((13, 14), RHS.Tokens);
            RHS.Action     := parameter_list_1'Access;
            Prod.RHSs (1) := RHS;
         end;
         Grammar (28) := Prod;
      end;
      declare
         Prod : Instance;
      begin
         Prod.LHS := 29;
         Prod.RHSs.Set_First (0);
         Prod.RHSs.Set_Last (2);
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (5);
            To_Vector ((7, 26, 28, 21, 17), RHS.Tokens);
            RHS.Action     := subprogram_0'Access;
            Prod.RHSs (0) := RHS;
         end;
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (4);
            To_Vector ((7, 26, 21, 17), RHS.Tokens);
            RHS.Action     := subprogram_1'Access;
            Prod.RHSs (1) := RHS;
         end;
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (6);
            To_Vector ((10, 26, 28, 4, 26, 17), RHS.Tokens);
            RHS.Action     := subprogram_2'Access;
            Prod.RHSs (2) := RHS;
         end;
         Grammar (29) := Prod;
      end;
      declare
         Prod : Instance;
      begin
         Prod.LHS := 30;
         Prod.RHSs.Set_First (0);
         Prod.RHSs.Set_Last (0);
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (1);
            To_Vector ((1 => 26), RHS.Tokens);
            RHS.Action     := subtype_0'Access;
            Prod.RHSs (0) := RHS;
         end;
         Grammar (30) := Prod;
      end;
      declare
         Prod : Instance;
      begin
         Prod.LHS := 31;
         Prod.RHSs.Set_First (0);
         Prod.RHSs.Set_Last (0);
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (3);
            To_Vector ((12, 27, 17), RHS.Tokens);
            RHS.Action     := use_clause_0'Access;
            Prod.RHSs (0) := RHS;
         end;
         Grammar (31) := Prod;
      end;
      return WisiToken.Parse.Packrat.Procedural.Create
        (Grammar, Direct_Left_Recursive, 20, Trace, Lexer.New_Lexer (Trace.Descriptor), User_Data);
   end Create_Parser;

end Subprograms_Process_Packrat_Proc_Main;
