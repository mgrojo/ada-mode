--  generated parser support file. -*- buffer-read-only:t  -*-
--  command line: wisitoken-bnf-generate.exe  --generate LALR Ada_Emacs re2c PROCESS ../test/bnf/subprograms.wy
--

--  Copyright (C) 2013, 2017 - 2021, 2023 Stephen Leake.  All Rights Reserved.

--  This program is free software; you can redistribute it and/or
--  modify it under the terms of the GNU General Public License as
--  published by the Free Software Foundation; either version 3, or (at
--  your option) any later version.
--
--  This software is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

with SAL;
with Wisi; use Wisi;
with Wisi.Subprograms; use Wisi.Subprograms;
with WisiToken.In_Parse_Actions; use WisiToken.In_Parse_Actions;
package body Subprograms_Process_LALR_Actions is

   use WisiToken.Syntax_Trees.In_Parse_Actions;
   use all type Motion_Param_Array;

   procedure block_0
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      T1 : constant SAL.Peek_Type := 1;
      T2 : constant SAL.Peek_Type := 2;
      T3 : constant SAL.Peek_Type := 3;
      T4 : constant SAL.Peek_Type := 4;
      T5 : constant SAL.Peek_Type := 5;
      T6 : constant SAL.Peek_Type := 6;
      T7 : constant SAL.Peek_Type := 7;
      T8 : constant SAL.Peek_Type := 8;
      T9 : constant SAL.Peek_Type := 9;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, ((T1, Statement_Start), (T3, Motion), (T5, Motion), (T9,
         Motion)));
      when Face =>
         null;
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, (T1 => (False, (Simple, (Label => None))), T2 => (False, (Simple,
         (Label => None))), T3 => (False, (Simple, (Label => None))), T4 => (False, (Simple, (Int, Subp_Indent))), T5
         => (False, (Simple, (Label => None))), T6 => (False, (Simple, (Int, Subp_Indent))), T7 => (False, (Simple,
         (Label => None))), T8 => (False, (Simple, (Label => None))), T9 => (False, (Simple, (Label => None)))));
      end case;
   end block_0;

   function block_0_check
    (Tree           : in     WisiToken.Syntax_Trees.Tree;
     Nonterm        : in out WisiToken.Syntax_Trees.Recover_Token;
     Tokens         : in     WisiToken.Syntax_Trees.Recover_Token_Array;
     Recover_Active : in     Boolean)
    return WisiToken.Syntax_Trees.In_Parse_Actions.Status
   is
      pragma Unreferenced (Nonterm, Recover_Active);
      T1 : constant SAL.Peek_Type := 1;
      T9 : constant SAL.Peek_Type := 9;
   begin
      return Match_Names (Tree, Tokens, T1, T9, False);
   end block_0_check;

   procedure block_1
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      T1 : constant SAL.Peek_Type := 1;
      T2 : constant SAL.Peek_Type := 2;
      T3 : constant SAL.Peek_Type := 3;
      T4 : constant SAL.Peek_Type := 4;
      T5 : constant SAL.Peek_Type := 5;
      T6 : constant SAL.Peek_Type := 6;
      T7 : constant SAL.Peek_Type := 7;
      T8 : constant SAL.Peek_Type := 8;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, ((T1, Statement_Start), (T3, Motion), (T5, Motion)));
      when Face =>
         null;
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, (T1 => (False, (Simple, (Label => None))), T2 => (False, (Simple,
         (Label => None))), T3 => (False, (Simple, (Label => None))), T4 => (False, (Simple, (Int, Subp_Indent))), T5
         => (False, (Simple, (Label => None))), T6 => (False, (Simple, (Int, Subp_Indent))), T7 => (False, (Simple,
         (Label => None))), T8 => (False, (Simple, (Label => None)))));
      end case;
   end block_1;

   procedure block_2
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      T1 : constant SAL.Peek_Type := 1;
      T2 : constant SAL.Peek_Type := 2;
      T3 : constant SAL.Peek_Type := 3;
      T4 : constant SAL.Peek_Type := 4;
      T8 : constant SAL.Peek_Type := 5;
      T9 : constant SAL.Peek_Type := 6;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, ((T1, Statement_Start), (T3, Motion), (T9, Motion)));
      when Face =>
         null;
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, (T1 => (False, (Simple, (Label => None))), T2 => (False, (Simple,
         (Label => None))), T3 => (False, (Simple, (Label => None))), T4 => (False, (Simple, (Int, Subp_Indent))), T8
         => (False, (Simple, (Label => None))), T9 => (False, (Simple, (Label => None)))));
      end case;
   end block_2;

   function block_2_check
    (Tree           : in     WisiToken.Syntax_Trees.Tree;
     Nonterm        : in out WisiToken.Syntax_Trees.Recover_Token;
     Tokens         : in     WisiToken.Syntax_Trees.Recover_Token_Array;
     Recover_Active : in     Boolean)
    return WisiToken.Syntax_Trees.In_Parse_Actions.Status
   is
      pragma Unreferenced (Nonterm, Recover_Active);
      T1 : constant SAL.Peek_Type := 1;
      T9 : constant SAL.Peek_Type := 6;
   begin
      return Match_Names (Tree, Tokens, T1, T9, False);
   end block_2_check;

   procedure block_3
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      T1 : constant SAL.Peek_Type := 1;
      T2 : constant SAL.Peek_Type := 2;
      T3 : constant SAL.Peek_Type := 3;
      T4 : constant SAL.Peek_Type := 4;
      T8 : constant SAL.Peek_Type := 5;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, ((T1, Statement_Start), (T3, Motion)));
      when Face =>
         null;
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, (T1 => (False, (Simple, (Label => None))), T2 => (False, (Simple,
         (Label => None))), T3 => (False, (Simple, (Label => None))), T4 => (False, (Simple, (Int, Subp_Indent))), T8
         => (False, (Simple, (Label => None)))));
      end case;
   end block_3;

   procedure block_4
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      T3 : constant SAL.Peek_Type := 1;
      T4 : constant SAL.Peek_Type := 2;
      T5 : constant SAL.Peek_Type := 3;
      T6 : constant SAL.Peek_Type := 4;
      T7 : constant SAL.Peek_Type := 5;
      T8 : constant SAL.Peek_Type := 6;
      T9 : constant SAL.Peek_Type := 7;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, ((T3, Motion), (T5, Motion), (T9, Motion)));
      when Face =>
         null;
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, (T3 => (False, (Simple, (Label => None))), T4 => (False, (Simple,
         (Int, Subp_Indent))), T5 => (False, (Simple, (Label => None))), T6 => (False, (Simple, (Int, Subp_Indent))),
         T7 => (False, (Simple, (Label => None))), T8 => (False, (Simple, (Label => None))), T9 => (False, (Simple,
         (Label => None)))));
      end case;
   end block_4;

   procedure block_5
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      T3 : constant SAL.Peek_Type := 1;
      T4 : constant SAL.Peek_Type := 2;
      T5 : constant SAL.Peek_Type := 3;
      T6 : constant SAL.Peek_Type := 4;
      T7 : constant SAL.Peek_Type := 5;
      T8 : constant SAL.Peek_Type := 6;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, ((T3, Motion), (T5, Motion)));
      when Face =>
         null;
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, (T3 => (False, (Simple, (Label => None))), T4 => (False, (Simple,
         (Int, Subp_Indent))), T5 => (False, (Simple, (Label => None))), T6 => (False, (Simple, (Int, Subp_Indent))),
         T7 => (False, (Simple, (Label => None))), T8 => (False, (Simple, (Label => None)))));
      end case;
   end block_5;

   procedure block_6
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      T3 : constant SAL.Peek_Type := 1;
      T4 : constant SAL.Peek_Type := 2;
      T8 : constant SAL.Peek_Type := 3;
      T9 : constant SAL.Peek_Type := 4;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, ((T3, Motion), (T9, Motion)));
      when Face =>
         null;
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, (T3 => (False, (Simple, (Label => None))), T4 => (False, (Simple,
         (Int, Subp_Indent))), T8 => (False, (Simple, (Label => None))), T9 => (False, (Simple, (Label => None)))));
      end case;
   end block_6;

   procedure block_7
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      T3 : constant SAL.Peek_Type := 1;
      T4 : constant SAL.Peek_Type := 2;
      T8 : constant SAL.Peek_Type := 3;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, (1 => (T3, Motion)));
      when Face =>
         null;
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, (T3 => (False, (Simple, (Label => None))), T4 => (False, (Simple,
         (Int, Subp_Indent))), T8 => (False, (Simple, (Label => None)))));
      end case;
   end block_7;

   function compilation_unit_0_check
    (Tree           : in     WisiToken.Syntax_Trees.Tree;
     Nonterm        : in out WisiToken.Syntax_Trees.Recover_Token;
     Tokens         : in     WisiToken.Syntax_Trees.Recover_Token_Array;
     Recover_Active : in     Boolean)
    return WisiToken.Syntax_Trees.In_Parse_Actions.Status
   is
      pragma Unreferenced (Tokens);
   begin
      return Terminate_Partial_Parse (Tree, Partial_Parse_Active, Partial_Parse_Byte_Goal, Recover_Active, Nonterm);
   end compilation_unit_0_check;

   function compilation_unit_1_check
    (Tree           : in     WisiToken.Syntax_Trees.Tree;
     Nonterm        : in out WisiToken.Syntax_Trees.Recover_Token;
     Tokens         : in     WisiToken.Syntax_Trees.Recover_Token_Array;
     Recover_Active : in     Boolean)
    return WisiToken.Syntax_Trees.In_Parse_Actions.Status
   is
      pragma Unreferenced (Tokens);
   begin
      return Terminate_Partial_Parse (Tree, Partial_Parse_Active, Partial_Parse_Byte_Goal, Recover_Active, Nonterm);
   end compilation_unit_1_check;

   procedure loop_statement_0
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      nam : constant SAL.Peek_Type := 4;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         null;
      when Face =>
         Face_Remove_Action (Parse_Data, Tree, Nonterm, (1 => nam));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, ((False, (Simple, (Int, -Subp_Indent))), (False, (Simple, (Int,
         0))), (False, (Simple, (Int, Subp_Indent - Subp_Indent_Broken))), (False, (Simple, (Int, Subp_Indent))),
         (False, (Simple, (Int, 0))), (False, (Simple, (Int, 0)))));
      end case;
   end loop_statement_0;

   procedure name_0
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      pre : constant SAL.Peek_Type := 1;
      suf : constant SAL.Peek_Type := 3;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         null;
      when Face =>
         Face_Mark_Action (Parse_Data, Tree, Nonterm, ((pre, Prefix), (suf, Suffix)));
      when Indent =>
         null;
      end case;
   end name_0;

   function name_0_check
    (Tree           : in     WisiToken.Syntax_Trees.Tree;
     Nonterm        : in out WisiToken.Syntax_Trees.Recover_Token;
     Tokens         : in     WisiToken.Syntax_Trees.Recover_Token_Array;
     Recover_Active : in     Boolean)
    return WisiToken.Syntax_Trees.In_Parse_Actions.Status
   is
      pragma Unreferenced (Recover_Active);
      pre : constant SAL.Peek_Type := 1;
      suf : constant SAL.Peek_Type := 3;
   begin
      return Merge_Names (Tree, Nonterm, Tokens, pre, suf);
   end name_0_check;

   procedure name_1
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      suf : constant SAL.Peek_Type := 1;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         null;
      when Face =>
         Face_Mark_Action (Parse_Data, Tree, Nonterm, (1 => (suf, Suffix)));
      when Indent =>
         null;
      end case;
   end name_1;

   function name_1_check
    (Tree           : in     WisiToken.Syntax_Trees.Tree;
     Nonterm        : in out WisiToken.Syntax_Trees.Recover_Token;
     Tokens         : in     WisiToken.Syntax_Trees.Recover_Token_Array;
     Recover_Active : in     Boolean)
    return WisiToken.Syntax_Trees.In_Parse_Actions.Status
   is
      pragma Unreferenced (Recover_Active);
      suf : constant SAL.Peek_Type := 1;
   begin
      return Merge_Names (Tree, Nonterm, Tokens, suf);
   end name_1_check;

   procedure name_list_0
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         null;
      when Face =>
         MMMify_Token (Wisi.Parse_Data_Type'Class (User_Data), Tree, Nonterm, (1 => 1));
      when Indent =>
         null;
      end case;
   end name_list_0;

   procedure name_list_1
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         null;
      when Face =>
         MMMify_Token (Wisi.Parse_Data_Type'Class (User_Data), Tree, Nonterm, (1 => 3));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, ((False, (Simple, (Label => None))), (False, (Simple, (Int, 0))),
         (False, (Hanging_0, (Int, 0), (Int, Java_Indent_Broken)))));
      end case;
   end name_list_1;

   procedure parameter_list_0
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      T1 : constant SAL.Peek_Type := 1;
      T2 : constant SAL.Peek_Type := 2;
      T3 : constant SAL.Peek_Type := 3;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, (1 => (T2, Misc)));
      when Face =>
         null;
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, (T1 => (False, (Simple, (Int, 0))), T2 => (False, (Simple,
         (Anchored_0, T1, 1))), T3 => (False, (Simple, (Anchored_0, T1, 0)))));
      end case;
   end parameter_list_0;

   procedure parameter_list_1
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      T1 : constant SAL.Peek_Type := 1;
      T3 : constant SAL.Peek_Type := 2;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, (1 .. 0 => (1, Motion)));
      when Face =>
         null;
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, (T1 => (False, (Simple, (Int, 0))), T3 => (False, (Simple,
         (Anchored_0, T1, 0)))));
      end case;
   end parameter_list_1;

   procedure subprogram_0
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      fun : constant SAL.Peek_Type := 1;
      nam : constant SAL.Peek_Type := 2;
      par : constant SAL.Peek_Type := 3;
      blo : constant SAL.Peek_Type := 4;
      sem : constant SAL.Peek_Type := 5;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, ((fun, Statement_Start), (nam, Name), (par, Misc), (blo, Motion),
         (sem, Statement_End)));
         Motion_Action (Parse_Data, Tree, Nonterm, (Index_ID'(fun, Invalid_Token_ID) & Index_ID'(blo, 6) &
         Index_ID'(sem, Invalid_Token_ID)));
      when Face =>
         Face_Apply_Action (Parse_Data, Tree, Nonterm, ((fun, 3, 0), (nam, 1, 2)));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, (fun => (False, (Simple, (Int, 0))), nam => (True, (Simple, (Int,
         Subp_Indent_Broken)), (Simple, (Int, Subp_Indent_Broken))), par => (False, (Simple, (Language,
         Function_1'Access, Nam & 2 * Subp_Indent_Broken))), blo => (False, (Simple, (Int, 0))), sem => (False,
         (Simple, (Int, 0)))));
      end case;
   end subprogram_0;

   procedure subprogram_1
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      fun : constant SAL.Peek_Type := 1;
      nam : constant SAL.Peek_Type := 2;
      par : constant SAL.Peek_Type := 3;
      sem : constant SAL.Peek_Type := 4;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, ((fun, Statement_Start), (nam, Name), (par, Misc), (sem,
         Statement_End)));
         Motion_Action (Parse_Data, Tree, Nonterm, (Index_ID'(fun, Invalid_Token_ID) & Index_ID'(sem,
         Invalid_Token_ID)));
      when Face =>
         Face_Apply_Action (Parse_Data, Tree, Nonterm, ((fun, 3, 0), (nam, 1, 2)));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, (fun => (False, (Simple, (Int, 0))), nam => (True, (Simple, (Int,
         Subp_Indent_Broken)), (Simple, (Int, Subp_Indent_Broken))), par => (False, (Simple, (Language,
         Function_1'Access, Nam & 2 * Subp_Indent_Broken))), sem => (False, (Simple, (Int, 0)))));
      end case;
   end subprogram_1;

   procedure subprogram_2
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      fun : constant SAL.Peek_Type := 1;
      nam : constant SAL.Peek_Type := 2;
      blo : constant SAL.Peek_Type := 3;
      sem : constant SAL.Peek_Type := 4;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, ((fun, Statement_Start), (nam, Name), (blo, Motion), (sem,
         Statement_End)));
         Motion_Action (Parse_Data, Tree, Nonterm, (Index_ID'(fun, Invalid_Token_ID) & Index_ID'(blo, 6) &
         Index_ID'(sem, Invalid_Token_ID)));
      when Face =>
         Face_Apply_Action (Parse_Data, Tree, Nonterm, ((fun, 3, 0), (nam, 1, 2)));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, (fun => (False, (Simple, (Int, 0))), nam => (True, (Simple, (Int,
         Subp_Indent_Broken)), (Simple, (Int, Subp_Indent_Broken))), blo => (False, (Simple, (Int, 0))), sem => (False,
         (Simple, (Int, 0)))));
      end case;
   end subprogram_2;

   procedure subprogram_3
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      fun : constant SAL.Peek_Type := 1;
      nam : constant SAL.Peek_Type := 2;
      sem : constant SAL.Peek_Type := 3;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, ((fun, Statement_Start), (nam, Name), (sem, Statement_End)));
         Motion_Action (Parse_Data, Tree, Nonterm, (Index_ID'(fun, Invalid_Token_ID) & Index_ID'(sem,
         Invalid_Token_ID)));
      when Face =>
         Face_Apply_Action (Parse_Data, Tree, Nonterm, ((fun, 3, 0), (nam, 1, 2)));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, (fun => (False, (Simple, (Int, 0))), nam => (True, (Simple, (Int,
         Subp_Indent_Broken)), (Simple, (Int, Subp_Indent_Broken))), sem => (False, (Simple, (Int, 0)))));
      end case;
   end subprogram_3;

   procedure subprogram_4
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      fun : constant SAL.Peek_Type := 1;
      par : constant SAL.Peek_Type := 2;
      blo : constant SAL.Peek_Type := 3;
      sem : constant SAL.Peek_Type := 4;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, ((fun, Statement_Start), (par, Misc), (blo, Motion), (sem,
         Statement_End)));
         Motion_Action (Parse_Data, Tree, Nonterm, (Index_ID'(fun, Invalid_Token_ID) & Index_ID'(blo, 6) &
         Index_ID'(sem, Invalid_Token_ID)));
      when Face =>
         Face_Apply_Action (Parse_Data, Tree, Nonterm, (1 => (fun, 3, 0)));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, (fun => (False, (Simple, (Int, 0))), par => (False, (Simple,
         (Language, Function_1'Access, Nam & 2 * Subp_Indent_Broken))), blo => (False, (Simple, (Int, 0))), sem =>
         (False, (Simple, (Int, 0)))));
      end case;
   end subprogram_4;

   procedure subprogram_5
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      fun : constant SAL.Peek_Type := 1;
      par : constant SAL.Peek_Type := 2;
      sem : constant SAL.Peek_Type := 3;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, ((fun, Statement_Start), (par, Misc), (sem, Statement_End)));
         Motion_Action (Parse_Data, Tree, Nonterm, (Index_ID'(fun, Invalid_Token_ID) & Index_ID'(sem,
         Invalid_Token_ID)));
      when Face =>
         Face_Apply_Action (Parse_Data, Tree, Nonterm, (1 => (fun, 3, 0)));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, (fun => (False, (Simple, (Int, 0))), par => (False, (Simple,
         (Language, Function_1'Access, Nam & 2 * Subp_Indent_Broken))), sem => (False, (Simple, (Int, 0)))));
      end case;
   end subprogram_5;

   procedure subprogram_6
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      fun : constant SAL.Peek_Type := 1;
      blo : constant SAL.Peek_Type := 2;
      sem : constant SAL.Peek_Type := 3;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, ((fun, Statement_Start), (blo, Motion), (sem, Statement_End)));
         Motion_Action (Parse_Data, Tree, Nonterm, (Index_ID'(fun, Invalid_Token_ID) & Index_ID'(blo, 6) &
         Index_ID'(sem, Invalid_Token_ID)));
      when Face =>
         Face_Apply_Action (Parse_Data, Tree, Nonterm, (1 => (fun, 3, 0)));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, (fun => (False, (Simple, (Int, 0))), blo => (False, (Simple, (Int,
         0))), sem => (False, (Simple, (Int, 0)))));
      end case;
   end subprogram_6;

   procedure subprogram_7
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      fun : constant SAL.Peek_Type := 1;
      sem : constant SAL.Peek_Type := 2;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, ((fun, Statement_Start), (sem, Statement_End)));
         Motion_Action (Parse_Data, Tree, Nonterm, (Index_ID'(fun, Invalid_Token_ID) & Index_ID'(sem,
         Invalid_Token_ID)));
      when Face =>
         Face_Apply_Action (Parse_Data, Tree, Nonterm, (1 => (fun, 3, 0)));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, (fun => (False, (Simple, (Int, 0))), sem => (False, (Simple, (Int,
         0)))));
      end case;
   end subprogram_7;

   procedure subprogram_8
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, ((1, Statement_Start), (2, Name), (6, Statement_End)));
      when Face =>
         Face_Apply_Action (Parse_Data, Tree, Nonterm, ((1, 3, 0), (2, 1, 2)));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, ((False, (Simple, (Int, 0))), (False, (Simple, (Int,
         Subp_Indent_Broken))), (False, (Simple, (Int, Subp_Indent_Broken))), (False, (Simple, (Int, 0))), (False,
         (Simple, (Int, 0))), (False, (Simple, (Int, 0)))));
      end case;
   end subprogram_8;

   procedure subprogram_9
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      T1 : constant SAL.Peek_Type := 1;
      T2 : constant SAL.Peek_Type := 2;
      T3 : constant SAL.Peek_Type := 3;
      T4 : constant SAL.Peek_Type := 4;
      T5 : constant SAL.Peek_Type := 5;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         null;
      when Face =>
         null;
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, (T1 => (False, (Simple, (Label => None))), T2 => (True, (Simple,
         (Language, Function_2'Access, 8 & Integer (T2))), (Simple, (Int, Subp_Indent_Broken))), T3 => (False, (Simple,
         (Language, Function_1'Access, Integer (T2) & 2 * Subp_Indent_Broken))), T4 => (False, (Simple, (Language,
         Function_2'Access, Null_Args))), T5 => (False, (Simple, (Label => None)))));
      end case;
   end subprogram_9;

   procedure subprogram_10
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      T1 : constant SAL.Peek_Type := 1;
      T2 : constant SAL.Peek_Type := 2;
      T3 : constant SAL.Peek_Type := 3;
      T5 : constant SAL.Peek_Type := 4;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         null;
      when Face =>
         null;
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, (T1 => (False, (Simple, (Label => None))), T2 => (True, (Simple,
         (Language, Function_2'Access, 8 & Integer (T2))), (Simple, (Int, Subp_Indent_Broken))), T3 => (False, (Simple,
         (Language, Function_1'Access, Integer (T2) & 2 * Subp_Indent_Broken))), T5 => (False, (Simple, (Label =>
         None)))));
      end case;
   end subprogram_10;

   procedure subtype_0
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         null;
      when Face =>
         Face_Apply_Action (Parse_Data, Tree, Nonterm, (1 => (1, 1, 2)));
      when Indent =>
         null;
      end case;
   end subtype_0;

   procedure use_clause_0
     (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
      Tree      : in out WisiToken.Syntax_Trees.Tree;
      Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Access)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      T1 : constant SAL.Peek_Type := 1;
      T2 : constant SAL.Peek_Type := 2;
      T3 : constant SAL.Peek_Type := 3;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         null;
      when Face =>
         Face_Apply_List_Action (Parse_Data, Tree, Nonterm, (1 => (T2, 1, 2)));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, (T1 => (False, (Simple, (Int, 0))), T2 => (False, (Simple, (Int,
         Subp_Indent_Broken))), T3 => (False, (Simple, (Int, 0)))));
      end case;
   end use_clause_0;

end Subprograms_Process_LALR_Actions;
