;;; Demonstrate an incorrect way to declare an empty production in a list,
;;  for an LR parser.

;; This grammar is ambiguous. Consider the following statements:
;;
;; 1) is <empty declaration> begin ;
;; 2) is is <empty declaration> begin ; begin ;
;; 3) is <empty declaration> is <empty declaration> begin ; begin ;
;;
;; In LR parsing 3), the second 'is' causes a shift/reduce conflict;
;; shift to start the nested declaration (as in 2), reduce to the
;; empty declaration. Both are correct according to the grammar; this
;; is reported as shift/reduce conflicts when compiling the grammar.
;;
;; In the actual LALR parse of empty_production_2.input, an infinite
;; number of parsers are spawned, terminating with an error when the
;; parallel parse limit is reached.
;;
;; The packrat parser succeeds on the same input.

%generate LALR Ada re2c
%generate Packrat_Gen Ada re2c
%generate Packrat_Proc Ada re2c

%keyword BEGIN "begin"
%keyword IS "is"

%token <punctuation> SEMICOLON ";"

;; Since we don't define a <new-line> token, lines are not counted;
;; all tokens are on line 1.
%non_grammar <non-reporting> WHITESPACE %[ [ \t\n] ]%
%non_grammar <comment-new-line> COMMENT %[ "--" ]%

%start declarations

%conflict SHIFT body | REDUCE declaration on token BEGIN (5)
%conflict SHIFT body | REDUCE declaration on token IS (0, 1, 3, 5)
%conflict REDUCE declaration | ACCEPT_IT wisitoken_accept on token Wisi_EOI (3)

declaration
  : body
  | ;; empty
  ;

declarations
  : declarations declaration
  | declaration
  ;

body
  : IS declarations BEGIN SEMICOLON
    %(null; -- wisi-statement-action [1 block-middle 3 block-middle 4 statement-end])%
  ;
;;; end of file
