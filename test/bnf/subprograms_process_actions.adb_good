--  generated parser support file.
--  command line: wisitoken-bnf-generate.exe  --generate LALR Ada_Emacs re2c PROCESS ../Test/bnf/subprograms.wy
--

--  Copyright (C) 2013, 2017 - 2019 Stephen Leake.  All Rights Reserved.

--  This program is free software; you can redistribute it and/or
--  modify it under the terms of the GNU General Public License as
--  published by the Free Software Foundation; either version 3, or (at
--  your option) any later version.
--
--  This software is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

with SAL;
with Wisi; use Wisi;
with Wisi.Subprograms; use Wisi.Subprograms;
package body Subprograms_Process_Actions is

   use WisiToken.Semantic_Checks;
   use all type Motion_Param_Array;

   procedure block_0
    (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     Tree      : in out WisiToken.Syntax_Trees.Tree;
     Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tokens    : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      beg : constant SAL.Peek_Type := 1;
      T2 : constant SAL.Peek_Type := 2;
      T3 : constant SAL.Peek_Type := 3;
      whe : constant SAL.Peek_Type := 4;
      T5 : constant SAL.Peek_Type := 5;
      T6 : constant SAL.Peek_Type := 6;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, Tokens, ((T2, Motion), (T3, Motion), (whe, Motion)));
      when Face =>
         null;
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, Tokens, (beg => (False, (Simple, (Label => None))), T2 => (False,
         (Simple, (Int, Subp_Indent))), T3 => (False, (Simple, (Label => None))), whe => (False, (Simple, (Int,
         Subp_Indent))), T5 => (False, (Simple, (Label => None))), T6 => (False, (Simple, (Label => None)))));
      end case;
   end block_0;

   procedure block_1
    (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     Tree      : in out WisiToken.Syntax_Trees.Tree;
     Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tokens    : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      beg : constant SAL.Peek_Type := 1;
      T2 : constant SAL.Peek_Type := 2;
      T6 : constant SAL.Peek_Type := 3;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, Tokens, (1 => (T2, Motion)));
      when Face =>
         null;
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, Tokens, (beg => (False, (Simple, (Label => None))), T2 => (False,
         (Simple, (Int, Subp_Indent))), T6 => (False, (Simple, (Label => None)))));
      end case;
   end block_1;

   function compilation_unit_0_check
    (Lexer          : access constant WisiToken.Lexer.Instance'Class;
     Nonterm        : in out WisiToken.Recover_Token;
     Tokens         : in     WisiToken.Recover_Token_Array;
     Recover_Active : in     Boolean)
    return WisiToken.Semantic_Checks.Check_Status
   is
      pragma Unreferenced (Lexer, Tokens);
   begin
      return Terminate_Partial_Parse (Partial_Parse_Active, Partial_Parse_Byte_Goal, Recover_Active, Nonterm);
   end compilation_unit_0_check;

   procedure loop_statement_0
    (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     Tree      : in out WisiToken.Syntax_Trees.Tree;
     Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tokens    : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         null;
      when Face =>
         Face_Remove_Action (Parse_Data, Tree, Nonterm, Tokens, (1 => nam));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, Tokens, ((False, (Simple, (Int, -Subp_Indent))), (False, (Simple,
         (Int, 0))), (False, (Simple, (Int, Subp_Indent - Subp_Indent_Broken))), (False, (Simple, (Int, Subp_Indent))),
         (False, (Simple, (Int, 0))), (False, (Simple, (Int, 0)))));
      end case;
   end loop_statement_0;

   procedure name_0
    (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     Tree      : in out WisiToken.Syntax_Trees.Tree;
     Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tokens    : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      pre : constant SAL.Peek_Type := 1;
      suf : constant SAL.Peek_Type := 3;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         null;
      when Face =>
         Face_Mark_Action (Parse_Data, Tree, Nonterm, Tokens, ((pre, Prefix), (suf, Suffix)));
      when Indent =>
         null;
      end case;
   end name_0;

   function name_0_check
    (Lexer          : access constant WisiToken.Lexer.Instance'Class;
     Nonterm        : in out WisiToken.Recover_Token;
     Tokens         : in     WisiToken.Recover_Token_Array;
     Recover_Active : in     Boolean)
    return WisiToken.Semantic_Checks.Check_Status
   is
      pragma Unreferenced (Lexer, Recover_Active);
      pre : constant SAL.Peek_Type := 1;
      suf : constant SAL.Peek_Type := 3;
   begin
      return Merge_Names (Nonterm, Tokens, pre, suf);
   end name_0_check;

   procedure name_1
    (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     Tree      : in out WisiToken.Syntax_Trees.Tree;
     Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tokens    : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      suf : constant SAL.Peek_Type := 1;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         null;
      when Face =>
         Face_Mark_Action (Parse_Data, Tree, Nonterm, Tokens, (1 => (suf, Suffix)));
      when Indent =>
         null;
      end case;
   end name_1;

   function name_1_check
    (Lexer          : access constant WisiToken.Lexer.Instance'Class;
     Nonterm        : in out WisiToken.Recover_Token;
     Tokens         : in     WisiToken.Recover_Token_Array;
     Recover_Active : in     Boolean)
    return WisiToken.Semantic_Checks.Check_Status
   is
      pragma Unreferenced (Lexer, Recover_Active);
      suf : constant SAL.Peek_Type := 1;
   begin
      return Merge_Names (Nonterm, Tokens, suf);
   end name_1_check;

   procedure name_list_0
    (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     Tree      : in out WisiToken.Syntax_Trees.Tree;
     Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tokens    : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      T1 : constant SAL.Peek_Type := 1;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         null;
      when Face =>
         null;
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, Tokens, (T1 => (False, (Hanging_0, (Int, 0), (Int,
         Java_Indent_Broken)))));
      end case;
   end name_list_0;

   procedure name_list_1
    (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     Tree      : in out WisiToken.Syntax_Trees.Tree;
     Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tokens    : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      T2 : constant SAL.Peek_Type := 2;
      T3 : constant SAL.Peek_Type := 3;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         null;
      when Face =>
         MMMify_Token (Wisi.Parse_Data_Type'Class (User_Data), Tree, Tokens, (1 => T3));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, Tokens, (T2 => (False, (Simple, (Int, 0))), T3 => (False,
         (Hanging_0, (Int, 0), (Int, Java_Indent_Broken)))));
      end case;
   end name_list_1;

   procedure parameter_list_0
    (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     Tree      : in out WisiToken.Syntax_Trees.Tree;
     Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tokens    : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      lef : constant SAL.Peek_Type := 1;
      nam : constant SAL.Peek_Type := 2;
      rig : constant SAL.Peek_Type := 3;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, Tokens, (1 => (nam, Misc)));
      when Face =>
         null;
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, Tokens, (lef => (False, (Simple, (Int, 0))), nam => (False,
         (Simple, (Anchored_0, 1, 1))), rig => (False, (Simple, (Anchored_0, 1, 0)))));
      end case;
   end parameter_list_0;

   procedure parameter_list_1
    (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     Tree      : in out WisiToken.Syntax_Trees.Tree;
     Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tokens    : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      lef : constant SAL.Peek_Type := 1;
      rig : constant SAL.Peek_Type := 2;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, Tokens, (1 .. 0 => (1, Motion)));
      when Face =>
         null;
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, Tokens, (lef => (False, (Simple, (Int, 0))), rig => (False,
         (Simple, (Anchored_0, 1, 0)))));
      end case;
   end parameter_list_1;

   procedure subprogram_0
    (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     Tree      : in out WisiToken.Syntax_Trees.Tree;
     Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tokens    : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      fun : constant SAL.Peek_Type := 1;
      nam : constant SAL.Peek_Type := 2;
      par : constant SAL.Peek_Type := 3;
      blo : constant SAL.Peek_Type := 4;
      sem : constant SAL.Peek_Type := 5;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, Tokens, ((fun, Statement_Start), (nam, Name), (par, Misc), (blo,
         Motion), (sem, Statement_End)));
         Motion_Action (Parse_Data, Tree, Nonterm, Tokens, ((fun, Invalid_Token_ID) & (blo, 6) & (sem,
         Invalid_Token_ID)));
      when Face =>
         Face_Apply_Action (Parse_Data, Tree, Nonterm, Tokens, ((fun, 3, 0), (nam, 1, 2)));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, Tokens, (fun => (False, (Simple, (Int, 0))), nam => (True,
         (Simple, (Int, Subp_Indent_Broken)), (Simple, (Int, Subp_Indent_Broken))), par => (False, (Simple, (Language,
         Function_1'Access, +2 * Subp_Indent_Broken))), blo => (False, (Simple, (Int, 0))), sem => (False, (Simple,
         (Int, 0)))));
      end case;
   end subprogram_0;

   procedure subprogram_1
    (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     Tree      : in out WisiToken.Syntax_Trees.Tree;
     Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tokens    : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      fun : constant SAL.Peek_Type := 1;
      nam : constant SAL.Peek_Type := 2;
      par : constant SAL.Peek_Type := 3;
      sem : constant SAL.Peek_Type := 4;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, Tokens, ((fun, Statement_Start), (nam, Name), (par, Misc), (sem,
         Statement_End)));
         Motion_Action (Parse_Data, Tree, Nonterm, Tokens, ((fun, Invalid_Token_ID) & (sem, Invalid_Token_ID)));
      when Face =>
         Face_Apply_Action (Parse_Data, Tree, Nonterm, Tokens, ((fun, 3, 0), (nam, 1, 2)));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, Tokens, (fun => (False, (Simple, (Int, 0))), nam => (True,
         (Simple, (Int, Subp_Indent_Broken)), (Simple, (Int, Subp_Indent_Broken))), par => (False, (Simple, (Language,
         Function_1'Access, +2 * Subp_Indent_Broken))), sem => (False, (Simple, (Int, 0)))));
      end case;
   end subprogram_1;

   procedure subprogram_2
    (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     Tree      : in out WisiToken.Syntax_Trees.Tree;
     Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tokens    : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      fun : constant SAL.Peek_Type := 1;
      nam : constant SAL.Peek_Type := 2;
      blo : constant SAL.Peek_Type := 3;
      sem : constant SAL.Peek_Type := 4;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, Tokens, ((fun, Statement_Start), (nam, Name), (blo, Motion),
         (sem, Statement_End)));
         Motion_Action (Parse_Data, Tree, Nonterm, Tokens, ((fun, Invalid_Token_ID) & (blo, 6) & (sem,
         Invalid_Token_ID)));
      when Face =>
         Face_Apply_Action (Parse_Data, Tree, Nonterm, Tokens, ((fun, 3, 0), (nam, 1, 2)));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, Tokens, (fun => (False, (Simple, (Int, 0))), nam => (True,
         (Simple, (Int, Subp_Indent_Broken)), (Simple, (Int, Subp_Indent_Broken))), blo => (False, (Simple, (Int, 0))),
         sem => (False, (Simple, (Int, 0)))));
      end case;
   end subprogram_2;

   procedure subprogram_3
    (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     Tree      : in out WisiToken.Syntax_Trees.Tree;
     Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tokens    : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      fun : constant SAL.Peek_Type := 1;
      nam : constant SAL.Peek_Type := 2;
      sem : constant SAL.Peek_Type := 3;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, Tokens, ((fun, Statement_Start), (nam, Name), (sem,
         Statement_End)));
         Motion_Action (Parse_Data, Tree, Nonterm, Tokens, ((fun, Invalid_Token_ID) & (sem, Invalid_Token_ID)));
      when Face =>
         Face_Apply_Action (Parse_Data, Tree, Nonterm, Tokens, ((fun, 3, 0), (nam, 1, 2)));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, Tokens, (fun => (False, (Simple, (Int, 0))), nam => (True,
         (Simple, (Int, Subp_Indent_Broken)), (Simple, (Int, Subp_Indent_Broken))), sem => (False, (Simple, (Int,
         0)))));
      end case;
   end subprogram_3;

   procedure subprogram_4
    (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     Tree      : in out WisiToken.Syntax_Trees.Tree;
     Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tokens    : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      fun : constant SAL.Peek_Type := 1;
      par : constant SAL.Peek_Type := 2;
      blo : constant SAL.Peek_Type := 3;
      sem : constant SAL.Peek_Type := 4;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, Tokens, ((fun, Statement_Start), (par, Misc), (blo, Motion),
         (sem, Statement_End)));
         Motion_Action (Parse_Data, Tree, Nonterm, Tokens, ((fun, Invalid_Token_ID) & (blo, 6) & (sem,
         Invalid_Token_ID)));
      when Face =>
         Face_Apply_Action (Parse_Data, Tree, Nonterm, Tokens, (1 => (fun, 3, 0)));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, Tokens, (fun => (False, (Simple, (Int, 0))), par => (False,
         (Simple, (Language, Function_1'Access, +2 * Subp_Indent_Broken))), blo => (False, (Simple, (Int, 0))), sem =>
         (False, (Simple, (Int, 0)))));
      end case;
   end subprogram_4;

   procedure subprogram_5
    (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     Tree      : in out WisiToken.Syntax_Trees.Tree;
     Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tokens    : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      fun : constant SAL.Peek_Type := 1;
      par : constant SAL.Peek_Type := 2;
      sem : constant SAL.Peek_Type := 3;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, Tokens, ((fun, Statement_Start), (par, Misc), (sem,
         Statement_End)));
         Motion_Action (Parse_Data, Tree, Nonterm, Tokens, ((fun, Invalid_Token_ID) & (sem, Invalid_Token_ID)));
      when Face =>
         Face_Apply_Action (Parse_Data, Tree, Nonterm, Tokens, (1 => (fun, 3, 0)));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, Tokens, (fun => (False, (Simple, (Int, 0))), par => (False,
         (Simple, (Language, Function_1'Access, +2 * Subp_Indent_Broken))), sem => (False, (Simple, (Int, 0)))));
      end case;
   end subprogram_5;

   procedure subprogram_6
    (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     Tree      : in out WisiToken.Syntax_Trees.Tree;
     Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tokens    : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      fun : constant SAL.Peek_Type := 1;
      blo : constant SAL.Peek_Type := 2;
      sem : constant SAL.Peek_Type := 3;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, Tokens, ((fun, Statement_Start), (blo, Motion), (sem,
         Statement_End)));
         Motion_Action (Parse_Data, Tree, Nonterm, Tokens, ((fun, Invalid_Token_ID) & (blo, 6) & (sem,
         Invalid_Token_ID)));
      when Face =>
         Face_Apply_Action (Parse_Data, Tree, Nonterm, Tokens, (1 => (fun, 3, 0)));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, Tokens, (fun => (False, (Simple, (Int, 0))), blo => (False,
         (Simple, (Int, 0))), sem => (False, (Simple, (Int, 0)))));
      end case;
   end subprogram_6;

   procedure subprogram_7
    (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     Tree      : in out WisiToken.Syntax_Trees.Tree;
     Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tokens    : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
      fun : constant SAL.Peek_Type := 1;
      sem : constant SAL.Peek_Type := 2;
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, Tokens, ((fun, Statement_Start), (sem, Statement_End)));
         Motion_Action (Parse_Data, Tree, Nonterm, Tokens, ((fun, Invalid_Token_ID) & (sem, Invalid_Token_ID)));
      when Face =>
         Face_Apply_Action (Parse_Data, Tree, Nonterm, Tokens, (1 => (fun, 3, 0)));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, Tokens, (fun => (False, (Simple, (Int, 0))), sem => (False,
         (Simple, (Int, 0)))));
      end case;
   end subprogram_7;

   procedure subprogram_8
    (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     Tree      : in out WisiToken.Syntax_Trees.Tree;
     Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tokens    : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, Tree, Nonterm, Tokens, ((1, Statement_Start), (2, Name), (6, Statement_End)));
      when Face =>
         Face_Apply_Action (Parse_Data, Tree, Nonterm, Tokens, ((1, 3, 0), (2, 1, 2)));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, Tokens, ((False, (Simple, (Int, 0))), (False, (Simple, (Int,
         Subp_Indent_Broken))), (False, (Simple, (Int, Subp_Indent_Broken))), (False, (Simple, (Int, 0))), (False,
         (Simple, (Int, 0))), (False, (Simple, (Int, 0)))));
      end case;
   end subprogram_8;

   procedure subtype_0
    (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     Tree      : in out WisiToken.Syntax_Trees.Tree;
     Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tokens    : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         null;
      when Face =>
         Face_Apply_Action (Parse_Data, Tree, Nonterm, Tokens, (1 => (1, 1, 2)));
      when Indent =>
         null;
      end case;
   end subtype_0;

   procedure use_clause_0
    (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     Tree      : in out WisiToken.Syntax_Trees.Tree;
     Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tokens    : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : Wisi.Parse_Data_Type renames Wisi.Parse_Data_Type (User_Data);
   begin
      case Parse_Data.Post_Parse_Action is
      when Navigate =>
         null;
      when Face =>
         Face_Apply_List_Action (Parse_Data, Tree, Nonterm, Tokens, (1 => (2, 1, 2)));
      when Indent =>
         Indent_Action_0 (Parse_Data, Tree, Nonterm, Tokens, ((False, (Simple, (Int, 0))), (False, (Simple, (Int,
         Subp_Indent_Broken))), (False, (Simple, (Int, 0)))));
      end case;
   end use_clause_0;

end Subprograms_Process_Actions;
