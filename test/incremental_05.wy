;; Leaves a syntax error, even though the edited code is legal.
;;
;; The problem is the grammar; there is no terminating token for
;; declarations, so after "%escape_delimiter_doubled " is inserted and
;; parsed, the next edit starts another identifier, which looks like
;; the start of a nonterm definition. So it is shifted, and then
;; reports an error of "missing ':'".
;;
;; Ada doesn't have this problem because it has terminating semicolons
;; for all statements and declarations.
;;
;; To fix this in the incremental parser, Edit_Tree would have to
;; always breakdown the nonterm preceding any edit; that would be far
;; from incremental. We could provide a per-language flag, and
;; possibly a per-nonterm flag so that happens only when it really
;; needs to. And also handle list nonterms with no separator or
;; terminator specially.
;;
;; For now, we just document the problem.

;;EMACSCMD: (progn (end-of-line 4)(wisi-replay-kbd-macro "\r\%escape_delimiter_doubled STRING_LITERAL"))
;;EMACSCMD: (length (wisi-parser-local-parse-errors wisi-parser-local))
;;EMACSRESULT: 1
%non_grammar <new-line> NEW_LINE

%non_grammar <comment-new-line> COMMENT "--"
;;EMACSCMD: (delete-region (line-beginning-position -2)(line-beginning-position -1))

;; end of file.
