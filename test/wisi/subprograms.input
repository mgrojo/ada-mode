--EMACSCMD: (test-face "Parent" 'font-lock-type-face)
--EMACSCMD: (test-face "Child" 'font-lock-function-name-face)
--EMACSCMD: (test-face "Sibling" 'font-lock-function-name-face)
use Parent.Child,
  Sibling;

--EMACSCMD: (test-cache-class "function" 'statement-start)
--EMACSCMD: (test-cache-class "(" 'misc)
--EMACSCMD: (test-cache-class "Func_1" 'name)
--EMACSCMD: (test-cache-class ";" 'statement-end)
--EMACSCMD: (test-cache-containing "function" "(")
--EMACSCMD: (test-face "function" 'font-lock-keyword-face)
function
  Func_1
  (a)
begin end;

--EMACSCMD: (test-cache-class "procedure" 'statement-start)
--EMACSCMD: (test-cache-class "Proc_1" 'name)
--EMACSCMD: (test-face "procedure" 'font-lock-keyword-face)
--EMACSCMD: (test-face "Proc_1" 'font-lock-function-name-face)
procedure Proc_1 end Proc_1;

--EMACSCMD: (test-face "Parent" 'font-lock-type-face)
--EMACSCMD: (test-face "Proc_1" 'font-lock-function-name-face)
procedure Parent.Proc_1
  (
   a
  --  See comment in ../ada_mode-parens.adb on hanging right paren.
  )
end Parent.Proc_1;

--EMACSCMD: (progn (forward-line 6)(forward-sexp)(looking-at "exception"))
--EMACSRESULT:t
function Func_2 ()
begin
   --EMACSCMD: (test-face "Parent" nil)
   --EMACSCMD: (test-face "Child" nil)
for I
    in
      Parent.Child
   loop;

--EMACSCMD: (progn (forward-line 4)(forward-sexp)(looking-at "when Beep"))
--EMACSRESULT:t
--EMACSCMD: (progn (forward-line 3)(back-to-indentation)(forward-sexp)(looking-at "; -- target"))
--EMACSRESULT:t
exception
   when Beep
end; -- target

-- end of file
