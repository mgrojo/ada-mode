General notes on Emacs Ada mode

(add-to-list 'load-path "/Projects/org.emacs.ada-mode")
(setq ada-xref-tool 'gnat_inspect)

run test from emacs -Q using installed elpa:
(progn
;;  (add-to-list 'exec-path "/apps/GNAT-GPL_2014/bin")
  (setenv "PATH" (mapconcat 'identity  exec-path  path-separator))
  (package-initialize)
  (setq debug-on-error t)
;;  (setq wisi-debug 1)
  (load "autoloads.el")
  (load "run-indent-test-wisi-gnatinspect")
  (setq default-directory "/Projects/org.emacs.ada-mode/build/wisi/")
  (run-test "../../test/ada_mode-nominal-child.ads"))

run test from emacs -Q using source:
(progn
  (add-to-list 'exec-path "/apps/GNAT-GPL_2014/bin")
  (setenv "PATH" (mapconcat 'identity  exec-path  path-separator))
  (add-to-list 'load-path "/Projects/org.emacs.ada-mode.stephe-1")
  (add-to-list 'load-path "/Projects/org.emacs.ada-mode.stephe-1/build")
  (setq debug-on-error t)
  (load "autoloads.el")
  (load "run-indent-test-wisi")
  (setq wisi-debug 1)
  (setq default-directory "/Projects/org.emacs.ada-mode.stephe-1/build/wisi/")
  (run-test "../../test/access_in_record.ads")
  (ada-wisi-debug-keys))

run ada_mode_wisi_parse under -Q:
    (progn
      (add-to-list 'exec-path "/apps/GNAT-GPL_2014/bin")
      (setenv "PATH" (mapconcat 'identity  exec-path  path-separator))
      (add-to-list 'load-path "/Projects/org.emacs.ada-mode.stephe-1")
      (setq wisi-ada-parse-exec "c:/Projects/org.emacs.ada-mode.stephe-1/build/wisi/ada_mode_wisi_parse.exe")
      (load "autoloads.el")
      (find-file "/Projects/org.emacs.ada-mode.stephe-1/ada_mode_wisi_parse.adb"))

install packages in -Q:
(progn
 (require 'package)
 (add-to-list 'package-archives (cons "test" "/Projects/elpa/archive/packages"))
 (list-packages))

 next release
o.e.a.stephe-1: external opentoken parser
o.e.a.stephe-2: external gps parser

5.1.c: use compiled Ada parser in background process
    (setq wisi-ada-parse-exec "/Projects/org.emacs.ada-mode.stephe-1/build/wisi/ada_mode_wisi_parse.exe")
    build/wisi/Makefile
    build/Makefile

    (setq wisi-parser 'elisp)
    (setq wisi-parser 'ada)
    (setq wisi-ada-parse-exec-opts "-v")
    (setq wisi-ada-parse-exec-opts nil)
    (setq wisi-ada-parse-debug 1)
    (setq wisi-ada-parse-debug 0)
    (setq wisi-debug 2)
    (setq wisi-debug 1)
    (setq wisi-debug 0)

    c:/Projects/org.opentoken.stephe/build/debug/Makefile

compiling ada_grammar.adb is slow, run_ada_parser is slow:
    build/wisi/ada_mode_wisi_parse.gpr
    compile time: gprbuild -p ada_mode_wisi_parse_agg.gpr run_ada_parser.adb
    parse time: run_ada_parser gnatcoll-xref.adb

    options                                 compile time    parse time
    -g -02 -fno-var-tracking-assignments    1m46.689s       0m1.513s
    -g -01 -fno-var-tracking-assignments    1m38.405s       0m1.591s
    -g -00 -fno-var-tracking-assignments    0m29.765s       0m1.763s

wisi-parse-buffer is slow:
    philippe.waroquiers@eurocontrol.int has a file that takes 10 seconds to parse with Emacs Ada mode 5.1.4
        needs to be < 1 second
        apparantly around 70,000 lines, 250,000 bytes

    time applying actions:
        (wisi-ada-parse-exec-buffer "gnatcoll-xref.actions" "gnatcoll-xref.adb" ada_grammar-names)
            lists 1.570002, 1.675002, 1.620002 seconds 20527 actions

            comment out (apply func args): 0.686401 seconds
            comment out (wisi-ada-parse-execute ): 0.260000
            comment out (read-from-string ): 0.115000

        (wisi-ada-parse-exec-buffer "ada_mode_wisi_parse.actions" "ada_mode_wisi_parse.adb" ada_grammar-names)
            lists 0.046800 seconds 699 actions

        use arrays not lists for wisi-tokens, actions
            write one action buffer by hand (translate debug.adb actions)
                test/debug.actions
            (time-it
             (lambda () (wisi-ada-parse-exec-buffer "debug.actions" "debug.adb" ada_grammar-names))
             1000)
                0.455001
                byte-compiled 0.320001, 0.180000, 0.170000, 0.165000, 0.180000
            (time-it
             (lambda () (wisi-ada-parse-exec-buffer "debug.actions-arr" "debug.adb" ada_grammar-names))
             1000)
                0.415001
                byte-compiled 0.145000, 0.150000, 0.130000, 0.140000, 0.145000

            arrays 17% faster

        testing opentoken
            need test of list arg:       (wisi-motion-action 1 5 7 '(8 block-middle EXCEPTION block-middle WHEN) 9))

time wisi-parse-buffer
    'ada:
    (progn
        (setq wisi-parser 'ada)
        (setq wisi-ada-parse-debug 1))
    or
    (progn
        (setq wisi-parser 'ada)
        (setq wisi-ada-parse-debug 0)
        (wisi-invalidate-cache)
        (time-it 'wisi-parse-buffer 1))

    (progn (profiler-start 'cpu) (time-it 'wisi-parse-buffer 10) (profiler-report) (profiler-stop))

    'command:
        time ./run_ada_parser file > parse.text

    'cat:
        (require 'extract-text-props)
        (let ((w32-pipe-read-delay 0))
           (pipe-torture "cat.exe"))
        pipe-torture is in extract-text-props.el

    'elisp:
        (progn
            (setq wisi-parser 'elisp)
            (wisi-invalidate-cache)
            (time-it 'wisi-parse-buffer 1))

    /apps/GNAT-gpl_2014/gnatcoll-1.7w-src/src/sqlite/gnatcoll-xref.adb
        7082 lines, 250780 bytes, 13570 caches
        actions: 20527  encoded actions: 78885 lines, 1393119 bytes
        coded actions saved in c:/Projects/org.emacs.ada-mode.stephe-1/gnatcoll-xref.actions

        cygwin:
            'ada: 0.995001, 0.890001, 0.845001

            'cat: 0.085000, 0.070000

            'elisp: 1.480002, 1.705002, 1.715003

        windows:
            'ada: 0.995002, 1.050001

            'command: 0m0.200s, 0m0.065s, 0m0.050s

            'cat: 0.075000, 0.075000

            'elisp: 1.615002, 1.635002

        linux:
            'ada: using gnat 2013

            'cat:

    ada_mode_wisi_parse.adb
        lines: 251 bytes: 8846
        actions: 699 encoded actions: 2709 lines, 44252 bytes
        ada_mode_wisi_parse.actions

                'command: 0m0.047s

                'ada: 0.764402

        use elp (emacs lisp profiler)?
        (with-current-buffer (find-file-noselect "~/src/xdisp.c")
          (elp-instrument-function 'c-beginning-of-defun)
          (goto-char (point-max))
          (condition-case nil
              (while (beginning-of-defun) nil)
            (error nil))
          (elp-results))

    pass integer args for elisp wisi actions
        see extract-text-props.el
        /Projects/org.opentoken.stephe/build/debug/Makefile
        /Projects/org.opentoken.stephe/build/release/Makefile

        empty_productions_1-parse.diff passing

        test with emacs
            test/debug.adb

            gnatcoll-xref 32.198457
                cpu monitor shows 0.1 cpu
                must be in time-outs somewhere

            wisi-output_ada_emacs.adb
                wisi-parse-buffer 4.x seconds
                    send takes 3.619206 seconds
                run_ada_parser 0m0.250s

            time send to cat
                (pipe-torture "c:/Projects/org.opentoken.stephe/wisi/wisi-output_ada_emacs.adb" "cat.exe")
                    0.062400 seconds

                (pipe-torture-temp "/apps/GNAT-gpl_2014/gnatcoll-1.7w-src/src/sqlite/gnatcoll-xref.adb" "cat.exe")
                    1.641275 seconds

            implement trivial Ada; test Ada IO vs emacs io
                (find-file "c:/Projects/org.opentoken.stephe/wisi/wisi-output_ada_emacs.adb")
                (pipe-torture "/Projects/org.emacs.ada-mode.stephe-1/build/wisi/debug.exe"  "4096")
                34452 bytes in file
                4096 => 0.280801 seconds
                16000 => 0.093600
                40000 => 0.062400

            time ./debug.exe 16000 < c:/Projects/org.opentoken.stephe/wisi/wisi-output_ada_emacs.adb
                1024 0m0.047s
                16000 0m0.062s, 0m0.047s

            send to run_ada_lexer with wisi lexer
                (pipe-torture "c:/Projects/org.opentoken.stephe/wisi/wisi-output_ada_emacs.adb"
                "/Projects/org.emacs.ada-mode.stephe-1/build/wisi/run_ada_opentoken_lexer.exe" "1024" "34452")
                        time ,  calls to get_more_text
                1024 => 1.872003 1.840803 1.856403, 66
                4096 => 0.468001, 16
                16000 => 0.124800, 4

                (pipe-torture "/apps/GNAT-gpl_2014/gnatcoll-1.7w-src/src/sqlite/gnatcoll-xref.adb"
                "/Projects/org.emacs.ada-mode.stephe-1/build/wisi/run_ada_opentoken_lexer.exe" "250780" "250780")
                29084 tokens
                1024 => 14.991626, 488
                16000 => 1.279202, 30
                48000 => 0.702001, 10
                250780 => 0.062000, 1

                emacs 24.3
                    lexer
                     1024 => 0.421000
                    48000 => 0.421000

                    debug
                    4096  => 0.062000 0.031000 0.047000
                    40000 => 0.047000

            time ./run_ada_opentoken_lexer.exe 1024 34452 < c:/Projects/org.opentoken.stephe/wisi/wisi-output_ada_emacs.adb
                4111 tokens
                1024  0m0.109s, 66
                16000 0m0.109s, 4

            always make lexer buffer big enough to hold the whole file
                gps does that
                should work with 24.3

            wisi-ada-parse-send use process-send-region to avoid copy of buffer

        process-send-string waits until entire string is sent
            to get fully parallel processing, actions must be in process sentinel

        use arrays not lists for tokens, actions?

    implement wisi actions in Ada
        compute a list of text properties in ada_mode_wisi_parse, and return
        that to the Emacs process to be applied.

        can leave some in elisp; send either computed text properties or encoded unrecognized actions
            leave face-action, extend-action in elisp
            start with statement-action, since that will create the data structure that the other actions need

        extract text properties from .adb, build elisp sexps, execute
            extract-text-props.el
            (load "extract-text-props")

            (progn (wisi-invalidate-cache) (time-it 'apply-text-props 1))
            gnatcoll-xref 0.310000 seconds! back in business

        need FFI
            15 Sept: sent email to Aurélien Aptel aurelien.aptel+emacs@gmail.com

    use gprof to find Ada bottleneck

    Emacs read/write is slow: bug 18626
        ~/Mail/drafts/message-20141004-010440
        http://debbugs.gnu.org/cgi/bugreport.cgi?bug=18626

> You could try playing with 2 parameters that currently are fixed: the
> size of the pipe buffer (set by pipe2 in w32.c, where we use 0 which
> AFAIK defaults to 4KB); and the delay used by send_process in
> process.c when it gets EAGAIN/EWOULDBLOCK from the 'write' call
> (currently 20 milliseconds).

        (sal-msys32)
        (shell-msys)
        cd /c/Projects/emacs/emacs-24.3.94/src
        make

        c:/Projects/org.emacs.ada-mode.stephe-1/extract-text-props.el
        c:/Projects/emacs/emacs-24.3.94/src/xdisp.c

        c:/Projects/emacs/emacs-24.3.94/src/w32.c
            pipe2 : buffer size is second parameter in call to _pipe
            (pipe-torture-read "/Projects/emacs/emacs-24.3.94/src/xdisp.c")

            (setq w32-pipe-read-delay 50)
            pipe size 0 : 11.965184
                   9192 : 12.012684
                  80000 : 12.018934

            (setq w32-pipe-read-delay 0)
            pipe size 0 : 0.180000 0.095000


        c:/Projects/emacs/emacs-24.3.94/src/process.c
            send_process : delay is second arg in wait_reading_process_output

            windows:
            (pipe-torture "/Projects/org.emacs.ada-mode.stephe-1/build/wisi/debug.exe" "4096")
            (* 0.020 (/ 974233 4096)) = 4.74
            20 * 1000 * 1000 : 4.450068
            10 * 1000 * 1000 : 2.443788
             0 * 1000 * 1000 : hangs until C-g (blocking call)
            -1 : (busy wait)

            linux:
            (require 'extract-text-props)
            (pipe-torture "/home/Projects/org.emacs.ada-mode.stephe-1/build/wisi/debug_counted" "974233" "974233")
            send_process : delay is second arg in wait_reading_process_output
            internal pipe size is 65536
            20 * 1000 * 1000 : 0.3
            10 * 1000 * 1000 : 0.29
            -1 (busy wait)   : 0.3 !?

    Emacs dead lock: see bug 18420
        c:/home/stephe/Mail/drafts/message-20140907-003138
        http://debbugs.gnu.org/cgi/bugreport.cgi?bug=18420

        fixed in 24.3.94

        will be fixed in 24.4
            protocol 2
            parallel processing

        workaround for 24.2, 24.3
            protocol 1
            queue all output in ada_mode_wisi_parse till parse completed

    split out recursive descent stuff
        avoid compile time overhead, name conflicts/confusion, build runtime overhead
        make token.enumerated abstract?
        rd child
            Parse
        lalr child
            ?

    lalr does not need to be child of production

    move Source (= analyzer) out of Token, into new abstract root
        add missing functions from analyzer

    move lookahead_queue out of analyzer, into lookahead/rd child?

    OpenToken lexer is too slow?

        replace with aflex
            time ./run_ada_lexer /apps/GNAT-gpl_2014/gnatcoll-1.7w-src/src/sqlite/gnatcoll-xref.adb
            real    0m0.359s
            user    0m0.031s
            sys     0m0.000s

            from http://sourceforge.net/projects/p2ada/files/p2ada/Sources/
            c:/Projects/aflex/build/Makefile
            time ./run_ada_lexer /apps/GNAT-gpl_2014/gnatcoll-1.7w-src/src/sqlite/gnatcoll-xref.adb > foo.text
            real	0m0.200s
            user	0m0.000s
            sys	0m0.000s
            includes file io

            edit yylex.adb to remove "ECHO" call in state 104, warm file cache:
            real	0m0.080s
            user	0m0.000s
            sys	0m0.000s

            build with optimization
            no better; dominated by io

            (/ 0.36 0.08) = 4.5

        integrate aflex as an OpenToken lexer
            not yet; time parser first

            aflex generates ada_syntax.a, containing function yylex
                change aflex to name function ada_syntax.yylex

                ECHO is an error handler?
                    writes via "Text_IO.Put (user_output_file)"

            ada_syntax_dfa -> ada_syntax-dfa.ads

        generate *.l, associated packages from *.wy

        see http://harmonia.cs.berkeley.edu/papers/twagner-lexing.pdf
            ideas on incremental lexing after edit

    factor out generic for parser_lists stack, action_token

    add container iterators to wisi.*_Lists
        use in generate

    add container iterators to Token_Lists, use in wisi_tokens

    add error recovery to parser
        insert virtual tokens to take parser from current state to next token
            compute in lalr child package; enhance parser table error action?

        incremental GLR resources (from Danial Colascione <dancol@dancol.org>):
        [1] http://harmonia.cs.berkeley.edu/papers/twagner-thesis.pdf
            ../org.emacs.ada-mode/twagner-thesis.pdf

        [2] http://fileadmin.cs.lth.se/cs/Personal/Emma_Soderberg/docs/SLE08pres.pdf

        use while-no-input to run parser in background

        Bridge parsing: perform one pass over the buffer using a
        simplified grammar that looks only at nesting constructs,
        insert virtual braces to make everything balance, and then
        apply the usual parsing algorithm (with ad-hoc error recovery)
        to the result.

    more intelligent rules in wisi when parser fails?

    still too slow?:
        free list in wisi_tokens

        recursive_lalr child
            don't allocate new tokens for stack; just store token_id
                avoid runtime allocation overhead
            pass token region, lexeme to user action

        write rd grammar from .wy?
            see asu_example_5_10
            see gpr parser

    doc git/elpa checkout, config

    clear execute bits in git
        git update-index --chmod=-x <file>

    subtitle in ada-mode.texi doesn't appear in .info, .html

    don't do syntax-propertize for font-lock, unless parsing is already done
        triggered by 'return' keyword; see ada-wisi.el ada-wisi-post-local-vars

5.1.d handle parser errors more gracefully

    continue by adding virtual tokens
        find shortest path from current state to defined action on next real token
            go thru FIRST, look for actions on next token, use first found
                provide grammar source hint for picking? (prefer semicolon, or 'then')
            if none, recurse (breadth-first search)
        can compute at grammar compile time
        add result as 'error' entry in state machine?

        cache for virtual end token (if one needed) located after last real token in sentence
            needed for 'goto end', and for setting something in 'end' field
            add space if at eob?

        no storage cache for other virtual tokens

        adding 'if then else end if' before 'foo := bar;'; just typed 'if <expression>'; add 'then'
            that will later add 'end if;' before the next 'end', which will be wrong
                no problem; it will be deleted by invalidate-cache when the new 'end if' is typed/parsed
                invalidate-cache must also delete refs to the virtual token?
                    they will be overwritten?

    don't use virtual tokens for indent
        => don't set markers to them

    show location of virtual tokens in 'show parse error'?
        could be many

can abandon parse when reach desired point (not just for errors)
    ada-indent-region parse to end of region
        avoids reparsing for every line
        or is there an indent-region hook for that?

        handle ada-gps better

    if command is 'goto-end', "desired point" is end of current statement
    in goto-end, check if end reached is virtual; if so, reparse

5.1.x: misc

if specify project file in gnat_stub_opts, gnat stub can't find it due to changed directory
    change to gnat_stub_gpr, manage directory
    or edit gnat_stub_opts, insert project dir?

skeleton refactor/cleanup

ftp://alpha.gnu.org/gnu/emacs/pretest/emacs-24.3.91.tar.xz
    better compile trunk, emacs-24 branch
    (dvc-status-one "/Projects/emacs/trunk")

gpr-skel.el
    ./gpr-skel.el:111:;; FIXME: code below should be in skeleton.el
    ./gpr-skel.el:199:	;; FIXME: hook for Ada case adjust

    move skel-expand to emacs-compat-*?
        assume will be in emacs 24.5 or 25.*
    use in ada-skel?

move stuff out of ada-mode-keys.el
    ada-make-package-spec
        skel default to (ada-name-from-file-name (buffer-file-name))?

(grep-find "find . -type f -print | \"xargs\" grep -nH \"FIXME:\"")

C-c C-d on +Normalize_Pathname
    includes + in identifier

type name after aliased doesn't have typename font:
   Force_Refresh        : aliased Boolean;

prev-statement-keyword in subprogram skips exception

ada_mode-parens.adb:214:09: (style) bad column

ada-set-point-accordingly
    use parse info to find identifier declaration instead of reference?

different casing for identifiers (uppercase) and attributes (mixed)

src_dir=/foo/bar/* for C++

ada-next-statement-keyword skip matched parens if on paren

emacs-ada-prj-mode
    or emacs-gnat-prj-mode?

./wisi.el	  ;; FIXME: insert newline in comment to create non-comment!?
    need tests for wisi-before/after-change vs comments, strings

test on debian testing?

gpr-add-log-current-function dispatch to gpr-wisi

ada-add-log-current-function

gpr log-edit-function-name
    use package.attribute:
        Source_Dirs
        Compiler.Default_Switches

parse error for legal expression function in enclosing parens
      Y : Boolean := Boolean'(if True then False);
    vs.
      Y : Boolean := Boolean'((if True then False));  -- o.K.

    LRM 4.5.7 7/3

separate color for vendor-specific aspects
    spark aspects in test/aspects.ads

completion:
    built-in pcomplete
        completion-at-point-functions

    http://elpa.gnu.org/packages/company.html
        including C++ parameters, class members

    MELPA package auto-complete

    get completion candidates from gpr_query

fix fontification of aspect names
    they are _not_ context clauses
    they are often on a different line than 'with'
    there are more than one of them
    need parser info

fix fontification across newline
    function () return access
        foo;

    set face property in parser action?

invalidate fontification when parse succeeds?
    or move 'return' fontification into parser actions

fix wisi-compile.el needing comp.el, not comp.elc
    some systems don't install emacs source by default

handle all indent options like ada-case-strict
    need case-strict, ada-indent prj-wide for aflex
    need case-strict buffer-local for ada-mode ada_tokens

    set buffer-local from prj-get in ada-mode-hook
        use an alist or auto naming rule to define prj var

    or user write cond string-match on default-dir

set face correctly for name on next line
    edited some tests
    but font-lock-add-keywords can't handle that either?
        except set limit in pre-match-form in match-anchored?
        see font-lock.el font-lock-fontify-anchored-keywords
        but that hangs emacs, and the doc says "don't do that". sigh.
        find emacs-devel thread on lexer doing faces

    use font-lock-face for parser faces?
        also fontification-functions?
        (info "Auto Faces")

use post-self-insert-hook for casing
    in 23.2?

use electric-indent-mode instead of ada-indent-newline-indent

 gpr_query
build/Makefile one

get casing from gpr file

gpr_query refs output distinguishes between read ref and write ref
    useful for "where is this var set?"
    xref filter?
    elisp filter?

use --display_progress

write tests!

implement C++ C-c ? children
    /home/Projects/GDS/work_stephe_2/common/itc/itcsb/libitcsb_1553/inc/Itcsb1553/Bus.hpp

    overridden_recursive

    child_types_recursive
        works

add Ada, C++ tests of xref
    /home/Projects/GDS/work_stephe_2/dscovr/build/x86_gnu_linux_release/Makefile
    /home/Projects/GDS/work_stephe_2/common/itc/opsim/itc_dscovr_gdsi/Gds1553/src/Gds1553.cpp


cd /home/Projects/GDS/work_stephe_2/dscovr/build/x86_gnu_linux_release/

export ADA_PROJECT_PATH=../../../makerules:../../../common/build/x86_gnu_linux_release:../../../sal/build:../../../sal/build/x86_gnu_linux_release:../../../opentoken/build/linux_release

parse linker cross reference output; -cref
    for pragma import


(require 'gpr-mode)
(gpr-set-as-project "c:/Apps/GNAT-7.1.2/gnatcoll-1.6w-src/src/gnatcoll_tools.gpr")
(browse-url "file:///c:/Apps/GNAT-7.1.2/gnatcoll-1.6w-src/docs/_build/html/xref.html")

 general
build/wisi/Makefile
build/Makefile

do C-x 5 prefix
    for Emacs 24.x
    after 24.4 feature freeze

move gpr-skel.el skel-expand to compat*.el
    use in ada-mode
    discuss on emacs-devel

need indent test of skel expansions
    verify they parse

tooltip/skel support for subprogram param names

implement secondary-error for scope in 'gnat-inspect-all'
    /Projects/GDS/work_dscovr_release/common/build/x86_gnu_windows_release/Makefile
    /Projects/GDS/work_dscovr_release/common/1553/gds-hardware-bus_1553.ads RX_Enable
    secondary-error in compilation regexp not working
        highlight can't be a function

    change ada-show-secondary-error to parse line, col from text, not text-property?

move gnat-inspect ada-* to ada-gnat-inspect.el

wisi-validate-cache should call grammar parser in a loop
    that would handle multiple compilation units; doesn't need to be in grammar
    parser needs to ignore invalid token following valid parse.

suggest jit-lock enable hook
    allow enforcing order in after-change-functions

ask about start-process vs --batch

expression functions

gpr fix errors
    gds_dscovr_utf_agg.gpr:12:19: expected "gds_dscovr_utf_agg"

add C++ tests

C-c C-d on <= use

'Access gives wrong face to following token:
     Percent_Percent & EOF + Output_Elisp'Access and

don't parse or move cache if narrowed

ada-fix-error.el
    sort 'limited private with' at end of context clause

add test for el_file

gnatprep
    the value of a preprocessor symbol is either empty, a string
    literal, or an Ada identifier/keyword; handle $symbol in lexer

    gnatprep minor mode?

manage "scenario variables" on project menu?
    GDS_DEVICE_PLATFORM

separate gpr-mode indent variables

gpr-next-statement-keyword

new align rule
    from Florian Schanda <florian.schanda@altran.com>
    >    case Foo |
    >         Some_Other_Thing |
    >         Bar |
    >         Baz =>
    >       null;
    >
    > It would be really nifty to have a macro that transforms it into this:
    >
    >    case Foo              |
    >         Some_Other_Thing |
    >         Bar              |
    >         Baz              =>

allow finding compiler libraries with no project
    define the default project search path to contain the compiler library dirs
    there is no default project!
        big change to support that.

test on debian testing?

 possible enhancements

make as much as possible work with no project
    use ada-build-require-project-file when a project is necessary

example custom indentation function for Markus Schöpflin <markus.schoepflin@comsoft.aero>
   FOOBAR.PROC (
      ARG1 => VAL1,
      ARG2 => VAL2
   );

EDE projects?
    just .el files with random code

skeleton
    see python-skeleton-autoinsert

    add else placeholders to all skeletons?
        add 'placeholder text property, before-change that deletes it/checks for "..."
        add goto-next-/prev-placeholder, kill-placeholder

    bug in skeleton handling of _; if skeleton-end-hook indents, the pos of _ moves; should be a marker.

    template system could be defined by parsing ada-grammar.wy
        for ada-skel-verbose

ada-align-paramlist
    test/ada_mode-parens.adb

    handle wrapping due to line length limit?

    handle single-line trailing comments, or longer comments, in paramlist?

parser is too slow
    try byte-compile - not enough
    see incremental LALR [dickgrune] 9.7.4
    cache parser state periodically (every 200 token caches?), resume parse from last avail cache
        won't help much; still need to parse to end of file
        won't help at all on first parse
        unless it's incremental in idle time!

    first parse is for font-lock, and is automatic; use reduced grammar/actions for that?
        so slow parse is only for user-invoked indentation, where they can more easily tolerate the delay

DEC Ada legacy code
    foo.a for spec, foo_b.a for body

share/convert case exceptions with GPS
    see email for python script

file-local case exceptions
    for -fdump-spec C imports

vhdl-wisi

ada-control.el from JP Rosen; see email

completion
    http://emacswiki.org/emacs/CategoryCompletion
    autocomplete package

http://cedet.sourceforge.net/addlang.shtml

time on long code
    get stats on GDS file sizes

put-text-property fails if read-only

 possible new options
ada-wisi-comment
    add option to match gnat comment style check
        have tests in ada_mode-conditional_expressions.adb, ada_mode-parens.adb

from Simon Wright:
   --  I'd like (the option to have) the 'is' line up with the 'type'.
   type A;
   type A_Finalizer
     (AP : access A)
   is new Ada.Finalization.Limited_Controlled with null record;

Markus Schöpflin <markus.schoepflin@comsoft.aero> wants this style (including all caps):

   FOOBAR.PROC (
      ARG1 => VAL1,
      ARG2 => VAL2
   );

    add a custom indent function, like the one for opentoken
    12 sep 2013: sent email

 relevant files, debug hints
(progn (profiler-start 'cpu) (time-it 'wisi-parse-buffer 10) (profiler-report) (profiler-stop))
    B - profiler-report-render-reversed-calltree shows low-level time hogs

attach gud-gdb to running emacs: attach <process id>
    source emacs/src/.gdbinit
    xbacktrace shows lisp backtrace

(browse-url "c:/Projects/arm_info/org.adaic.arm_form/build/html/arm2012/RM-P.html")
(info "(aarm2012)Annex P" "*info Annex P*")
(info "(elisp)Parser State" "*info syntax-ppss*")
"c:/home/stephe/Backup/eBooks/Dick Grune/BookBody.pdf" [dickgrune]

http://savannah.gnu.org/projects/emacs/

http://git.savannah.gnu.org/cgit/emacs.git/tree/README?h=elpa
http://elpa.gnu.org/

https://www.dropbox.com/sh/7jr3vbv9tm1zod0/jPuvfrJAe8
    w32 builds of cutting-edge emacs branches, pretests

ftp://alpha.gnu.org/gnu/emacs/pretest/
    untar with cygwin
    in mys32 under emacs:
        cd /c/Projects/emacs/emacs-24.3.9x
        ./configure --prefix=/mingw32
        make
        # don't make install, just run from the build dir

 access to ada-france:

anonymous (read only) access:
    mtn --db ~/monotone-dbs/ada-france.db --key '' pull www.ada-france.org "org.emacs.*"

read/write access requires a public key:
    send output of 'mtn pubkey' to Ludovic Brenta
    <ludovic@ludovic-brenta.org> or Stephe Leake
    <stephen_leake@stephe-leake.org>

    add it to monotone db via 'mtn read'
    add it to /etc/monotone/write-permissions
    /etc/init.d/monotone restart

    mtn --db ~/monotone-dbs/ada-france.db sync "mtn://www.ada-france.org?org.emacs.*"

 git config for elpa checkout
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
[remote "origin"]
	fetch = +refs/heads/master:refs/remotes/origin/master
	push  = +refs/heads/master
	url = stephen_leake@git.sv.gnu.org:/srv/git/emacs/elpa.git
[branch "master"]
	remote = origin
	merge = refs/heads/master

 release process
move to external elpa package?
    simplifies git management of elpa?
    - Push the tree you want onto a branch `externals/<pkg>' in the
      `elpa' repository.
    - Remove the packages/<pkg> directory in the `master' branch.
    - Edit `externals-list' in the `master' branch.

check for ELPA patches by others
    (dvc-pull "/Projects/elpa")
    (dvc-sync-review "/Projects/elpa")
        revert local changes
        update
        clean sync
    cd /Projects/elpa
    git log -2 -- packages/wisi
    git log -2 -- packages/ada-mode
    git log -2 -- packages/ada-ref-man
    apply changes to current

check emacs buglist
    http://debbugs.gnu.org/cgi/pkgreport.cgi?package=ada-mode

bump version
    bump if _any_ changes other than autoloads, so ELPA package handler knows to update
        (list-packages) install ada-mode, wisi from public ELPA
        build/Makefile docs pub-ada pub-ada-ref-man pub-wisi
        (ediff-directories "~/.emacs.d/elpa/wisi-1.0.5" "/Projects/elpa/packages/wisi" nil)
        (ediff-directories "~/.emacs.d/elpa/ada-mode-5.1.5" "/Projects/elpa/packages/ada-mode" nil)
        (ediff-directories "~/.emacs.d/elpa/ada-ref-man-2012.0" "/Projects/elpa/packages/ada-ref-man" nil)
        (dvc-status "/Projects/org.opentoken")
        (dvc-log "/Projects/org.opentoken")

    NEWS-ada-mode.text
        add release date
        add new features

    NEWS-wisi.text
        add release date
        add new features

    wisi.el
        Version:
    ada-mode.el
        Version:
        ada-mode-version
        package-requires wisi version
    ada-mode.texi
        Ada Mode Version
    README-ada-mode
        first line
    README-ada-ref-man
        first line
    README-wisi
        first line
    ada_mode_wisi_parse.adb
        Version
    build/Makefile
        VERSION
    build/install-elpa.el
        ada-mode-version
        ada-ref-man-version
        wisi-version

    /Projects/org.opentoken.stephe/wisi/wisi-generate.adb
        version

    /Projects/Web/stephe-leake/emacs/ada-mode/emacs-ada-mode.html
        ada-mode version
        opentoken version

    c:/Projects/Web/stephe-leake/emacs/wisi/wisi.html
        wisi-version
        wisi-generate version
        ada-mode version
        opentoken version

    /Projects/Web/stephe-leake/emacs/wisi/wisi.html

verify other metadata
    ada-mode.el
    ada-ref-man.el
    wisi.el

build/Makefile all
    # pushes to elpa workspace, builds archive, installs

Emacs 24.3, gnat 2014 (sal-standard), installed ada-mode:
    (setenv "ADA_MODE_DIR" "-f package-initialize")
    build/wisi/Makefile all
        gpr_query fail on Windows

Emacs 24.2, gnat 2014:
    build/Makefile install-elpa # deletes and recompiles, installs cl-lib

    (setenv "ADA_MODE_DIR" "-f package-initialize")
    build/wisi/Makefile clean all
        ignore byte-compile warnings about 'foo' from cl package called at runtime

    build/Makefile install-clean

Emacs 24.3

sync for Debian:
    (dvc-status ".")
    (dvc-status "/Projects/org.opentoken")
        git sets executable bit on any changed files!
    (dvc-sync-run ".")
    (dvc-sync-review ".")

Debian : emacs, gnat from stable (wheezy 4 May 2013, emacs 24.2, gnat 4.8)
    emacs.sh ;; for dvc

    ;; gds.db (dvc-sync-run "/home/Projects/org.emacs.ada-mode")
    (dvc-sync-review "/home/Projects/org.emacs.ada-mode")

    emacs-stable.sh ;; for ada-mode testing

    M-x list-packages
        # install cl-lib
    /home/Projects/org.emacs.ada-mode/build/wisi/Makefile
        debian-all

    (dvc-status)
    ;; gds.db (dvc-sync-run "/home/Projects/org.emacs.ada-mode")
    (dvc-sync-review "/home/Projects/org.emacs.ada-mode")

(dvc-sync-run ".")

build/Makefile docs pub-ada pub-ada-ref-man pub-wisi

cd /Projects/elpa
    (dvc-pull "/Projects/elpa")
    (dvc-sync-review "/Projects/elpa")
    (dvc-state-one "/Projects/elpa")
    commit ada-mode, ada-ref-man, wisi
    (dvc-push "/Projects/elpa")
    # 24 hrs for web repository to update

(dvc-state-one ".")
mtn tag h:org.emacs.ada-mode "org.emacs.ada-mode-<version>"

(dvc-sync-run ".")

build/Makefile zip

~/Web/Makefile
    edit version in ADA-MODE-GZ
    ada-mode opentoken wisi
    sync
    check

after Gnu ELPA updated, post on emacs-ada-mode mailing list, c.l.a newsgroup
    http://stephe-leake.org/emacs/ada-mode/emacs-ada-mode.html

mark fixed bugs
    http://debbugs.gnu.org/cgi/pkgreport.cgi?package=ada-mode
    http://debbugs.gnu.org/Developer.html

-- end of file
