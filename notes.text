General notes on Emacs Ada mode

build/Makefile
(load-file "build/prj-eglot.el")

o.e.a: release, in use
o.e.a.stephe-1: dead
o.e.a.stephe-2 (with o.s_l.sal.s_1, o.w.s_1, o.e.w.s_1): work
o.e.a.stephe-3 (?): emacs module parser (very old)
o.e.a.stephe-4 (?): eglot/ada_language_server
o.e.a.stephe-5 (?): libadalang backend
o.e.a.stephe-6 (o.e.w.s-2/o.w.s-2/o.s_l.sal.stephe-1): packrat

(dvc-state-multiple
'((xgit . "/Projects/org.stephe_leake.makerules")
  (xgit . "/Projects/org.stephe_leake.sal")
  (xgit . "/Projects/org.stephe_leake.aunit_ext")
  (xgit . "/Projects/org.wisitoken")
;;  (xgit . "/Projects/elpa/packages/uniquify-files")
  (xgit . "/Projects/org.emacs.wisi/")
  (xgit . "/Projects/org.emacs.ada-mode/")))

(dvc-propagate-multiple
 '(("../org.stephe_leake.sal"  . "../org.stephe_leake.sal.stephe-1")
   ("../org.wisitoken"         . "../org.wisitoken.stephe-2")
   ("../org.emacs.wisi"        . "../org.emacs.wisi.stephe-2")
   ("../org.emacs.ada-mode"    . "../org.emacs.ada-mode.stephe-6")))

(dvc-state-multiple
'((xgit . "/Projects/org.stephe_leake.makerules")
  (xgit . "/Projects/org.stephe_leake.aunit_ext")
  (xgit . "/Projects/org.stephe_leake.sal.stephe-1")
  (xgit . "/Projects/org.wisitoken.stephe-2")
  (xgit . "/Projects/org.emacs.wisi.stephe-2")
  (xgit . "/Projects/org.emacs.ada-mode.stephe-6")))

(dvc-propagate-multiple
 '(("../org.stephe_leake.sal.stephe-1" . "../org.stephe_leake.sal")
   ("../org.wisitoken.stephe-1"        . "../org.wisitoken")
   ("../org.emacs.wisi.stephe-1"       . "../org.emacs.wisi")
   ("../org.emacs.ada-mode.stephe-2"   . "../org.emacs.ada-mode")))

(setenv "GPR_PROJECT_PATH" "c:/Projects/org.wisitoken/build;c:/Projects/org.stephe_leake.sal/build;c:/Projects/org.stephe_leake.makerules")

for test/subdir/ada_mode_parent.gpr
(setenv "GPR_PROJECT_PATH" "C:\\Projects\\org.emacs.ada_mode\\test;C:\\Projects\\org.emacs.ada_mode\\test\\subdir")

for ada_mode_wisi_parse.gpr:
(setenv "GPR_PROJECT_PATH" "C:\Projects\org.emacs.ada-mode;c:/Projects/org.emacs.ada-mode;c:/Projects/org.wisitoken/build;c:/Projects/org.stephe_leake.sal/build;c:/Projects/org.stephe_leake.makerules;d:/Apps/GNAT-gpl_2019/x86_64-windows/lib/gnat;d:/Apps/GNAT-gpl_2019/x86_64-windows/share/gpr;d:/Apps/GNAT-gpl_2019/share/gpr;d:/Apps/GNAT-gpl_2019/lib/gnat;d:/apps/gnat-gpl_2019/x86_64-windows/share/gpr;d:/apps/gnat-gpl_2019/x86_64-windows/lib/gnat;d:/apps/gnat-gpl_2019/share/gpr;d:/apps/gnat-gpl_2019/lib/gnat")

(setq gpr-query-exec "c:/Projects/org.emacs.ada-mode/gpr_query")
 current work
merge most of wisitoken.parse.parser back to wisitoken.parse
    make merge to/from main better
    packrat-error_recover derive from lr.parser?

copy some changes to main:
    generate declare partial_parse_active in *-actions.ads
    -- in .wy Ada code blocks
    don't commit _bnf.wy
    wisi.parse_context factory
    generate declare create_parser
    wisi.put_errors

translate libadalang_grammar.py to ada_adacore.wy
    done, compiling


packrat mckenzie error recover
    requires eliminating conflicts in LR grammar
    trying libadalang grammar


time packrat_gen parse
        gnatcoll-xref.adb: gnatcoll-xref.adb:40:1: parse failed
            but verbosity parse=3 says it gets much further, and doesn't say why it fails!

maybe on line 1265:          Lines.Lines (Tmp'Range) := Tmp.all;

            packrat_proc says gnatcoll-xref.adb:1265:27: parse failed
                so packrat_gen is not updating max_examined_pos properly
                add wisitoken test
                add verbosity in update.

        copies lots of stream_index; all ref counted.

    packrat lists
        optimizes Undo_Reduce; used in error recover sometimes
            always used in lr edit_tree.

    optimize rhs order; most common first


GNAT Community going away
    https://blog.adacore.com/a-new-era-for-ada-spark-open-source-community
    get gnat fsf from alire https://alire.ada.dev/
    simplest way is to package ada-mode code as Alire crates
    use tarball on savannah

update wisitoken.grammar/wisitoken_grammar_01.wy to match

run parser on ACATS

generate tree-sitter parse table
    see if tree-sitter error recover is good enough

time %lr1_hash_table_size

GNAT Community going away
    https://blog.adacore.com/a-new-era-for-ada-spark-open-source-community
    get gnat fsf from alire https://alire.ada.dev/

editing syntax_Trees.adb line_at_byte_pos
    no parse errors, fresh reset; new_line on 'if child_regions' => 0 indent.

need test for ada-find-file
    it is currently broken
    also broken in ada-mode 7.2.0 with latest projects.el from ELPA

review FIXMEs
    (grep-find "find c:/Projects/org.emacs.wisi.stephe-1 -type f -print | \"xargs\" grep  -nH --null FIXME:")
    c:/Projects/org.emacs.wisi.stephe-1/build/Makefile

    (grep-find "find c:/Projects/org.emacs.ada-mode -type f -print | \"xargs\" grep  -nH --null FIXME")
    (grep-find "find c:/Projects/org.emacs.wisi -type f -print | \"xargs\" grep  -nH --null FIXME")

respond to https://rust-analyzer.github.io/blog/2020/09/16/challeging-LR-parsing.html
   https://github.com/tree-sitter/tree-sitter-rust

test/ada_mode-interactive_2.adb
    virtual 'null;' inserted on blank line,
        but wisi-repair-error puts it on the next line
        position in error message is wrong
            because set before Insert_Token changed it?

change set_parents to be incremental
    notes in o.w.s-1/notes.text

delete elpa branches, push o.e.*
    so users can test elpa-devel packages
    don't change versions to prevent release
        change version everywhere except :version header, so users can keep track
        how does elpa-admin check for that?
            must store last-release-version somewhere; in name of tarball?
        ask Stefan if there's another way?

    set :url in elpa/elpa-packages; see other savannah

README-ada-ref-man moved to org.adaic.arm_form
    change elpa to push from there.

wisitoken-grammar-mode
    change to push to elpa

push to elpa
    advertize alpha testing on comp.lang.ada, ada-mode mailing list
    doc how to use elpa HEAD

visiting large files pauses emacs for longer than expected
    not due to debug settings
    d:/Apps/GNAT-gpl_2021/include/libadalang/libadalang-implementation.adb
    buffer not shown until source sent to process
        move that to background when :nowait?

ada-mode-hook runs before initial parse
    because we want to allow it to set debug etc that affect initial parse
    if user puts a function on ada-mode-hook that requires parse, it signals file-not-found
        that confuses things, get extra messages because of nowait
        distinguish between context-not-found and need-text?
        need command sequence numbers. sigh.
        or process extra messages if nowait?
            need test
            run-test sets wisi-parse-full-background; it should not

    need another hook that runs after initial parse started

first parser operation after opening a large file is slow
    waiting for full parse to complete
    do partial parse on visible part for font-lock
    then incremental parse expand tree.
    meanwhile separate thread does full parse
    wait until get user requests for it

    or maybe packrat is faster?

 after incremental
test/ada_mode-recover_51.adb
    error is on "=>"; tree.others is an expression  (could be tree.foo)
    Desired solution: (Undo_Reduce, undo_reduce ..., push_back 'others', push_back '.', delete '.')
    fails after first undo_reduce, doesn't try a second.
        not clear why

    other solution: delete '=> <>' cost 6
        that's interrupted by minimal_complete; ((DELETE, EQUAL_GREATER, 2), (INSERT, RIGHT_PAREN, 3)) cost 3
            that keeps going, inserting more right_parens; bug
        cost 6 not dequeued in 10_000 enqueue
        need separate minimal_complete queue.

mmm-mode
    need one parse_context per region
    other use case; one parse_context for each submode, with contiguous text from each region
        text is in a "rope", not a flat buffer.
        elisp can handle the rope aspect.

language specific function for name face?

review this file!

classify errors as local/long distance
    in Edit_Tree, only undo long distance if not affected by a change.

trying to copy c:/Projects/org.wisitoken.stephe-1/test/test_incremental.adb:623 Edit_Comment_14
    wisi-validate-cache-current-statement cancels active region highlight
    but leaves mark-active t!
    even when no parsing needed due to cache valid
    c:/Projects/org.emacs.wisi/wisi-process-parse.el wisi-parse-tree-query cancels it
        recompile that body, now it does not cancel!
        reproduces on restart emacs
        explicitly byte-compile that file: no help
        delete wisi-process-parse.elc: no help
        delete c:/Projects/org.emacs.wisi/*.elc: no help
           recompiling wisi-parse-tree-query does not fix.
           recompiling debug, step thru => not canceled
              go => still cancels

        call wisi-parse-tree-query explicitly, not from wisi-forward-sexp
           (wisi-parse-tree-query wisi--parser 'containing-statement (point))
           => cancels

        call (wisi-process-parse--send-query wisi--parser 'containing-statement (point))
           => no cancel
           must be in wisi-process-parse--handle-messages-file-not-found
           call
           (progn (wisi-process-parse--send-query wisi--parser 'containing-statement (point))
                  (wisi-process-parse--handle-messages wisi--parser))
              => no cancel

        call (wisi-process-parse--prepare wisi--parser 'containing-statement)

        wisi-reset-parser fixes it!?
            not in fresh emacs, only after something else.
            got "parser busy" error during last try.
            can't reproduce.

    how is highlight displayed?
        and therefore how is it removed
        transient-mark-mode
        applies region face
        (redisplay--update-region-highlight (selected-window))
        calls redisplay-unhighlight-region-function, which is some lambda, which calls delete-overlay

    doing any paste fixes it!


it should be easier to change the skeleton inserted in a newly created
file
    from Tony Brown on ada-mode-users

auto-insert.el references old ada-mode stuff
    from Tony Brown on ada-mode-users

move string, placeholder face to parser
    syntax-table processing does not respect new-line

test/ada_mode-recover_27.adb
    incremental recover for extra 'begin' has only one solution (insert begin)
    full also has (push_back ...) (delete begin), which would be the best solution
    possibly because incremental doesn't enounter 'renames' during recover, while full does?

    delete end loop needs undo_reduce handled_sequence_of_statements
    undo_reduce not valid? because must be done before delete
    ((PUSH_BACK, END, 1), (UNDO_REDUCE, handled_sequence_of_statements, 1, -70) not continued
    because check returns abandon
    because check would undo it
        so don't run check?
            otherwise try_undo_reduce is pointless; it can only be used by language_fixes
        need test_mckenzie_recover test

new refactor:
    expression_function <> subprogram_body

test/ada_mode-recover_45.adb
    bad solution to "mixed logical ops" error
    minimal complete went too far
    need language fix for 'expression and then expression or expression'.
        error on 'or'; insert left paren before prev expression

ada_mode-recover_44.adb
    matching_begin return list of token arrays, so insert '(if foo' is cheap
        also '(case foo' before 'when'
        '(declare' before 'begin'
        look thru ada_annex_p.wy for more.

uniquify-files should not set project-read-file-name-function
    https://debbugs.gnu.org/cgi/bugreport.cgi?bug=52167
    set or let-bind it in ada-mode
    also make uniquify-files a "recommends" (in README? in .info), not a hard dependency

xref workaround
    use "summary", not ":summary"
    "oref", "with-slots" work with cl-defstruct on master
        test on 28.

incremental parse does full reparse every time if FAIL_ENQUEUE_LIMIT
    test/ada
    every char for font-lock
    wait til user complains

    automatically disable parsing
        re-enable on wisi-reset-parser

font-lock use separate partial_parse process while incremental parse is busy with full parse?

if open another file while first parsing full, need queue
   parser process use threads, one per command/parse_context?
       from thread pool?

test Manuel Gomez use case
    his former invocation: (ada-set-default-project-file "project.gpr")
    test with installed elpa version:

        emacs -Q  -l "c:/Projects/org.emacs.ada-mode/test/Example_2/test.el"
        => (wrong-type-argument stringp nil)
            wisi-prj-select-cache calls wisi-proj-current-parse with wisi-prj--current-file nil; should not call?
                normally project-find-functions has more stuff, so (current-project) is not nil
            need to set :init-prj to ada-default-prj
            add that to wisi-prj--default with file nil? dangerous, not scalable to multiple modes
            add with 'ada-mode?

    minimal recipe/patch with ada-mode 7.1.8:
  (package-initialize)
  (require 'wisi-prj)
  (setq project-find-functions '(wisi-prj-current-parse) debug-on-error t)
  (wisi-prj-parse-file :prj-file "hello.gpr" :init-prj (ada-prj-default))
  (wisi-prj-select-file "hello.gpr" (ada-prj-default))

    add filename arg to wisi-prj-dtrt-parse-file, doc in wisi.info

improve compilation-error-regexp-alist; see FIXME in gnat-core.el

see ELPA pdf-tools for automatic compile, install
    (pdf-tools-install)
    (pdf-loader-install) in user .emacs

include wisi-run-indent-test.el, wisi-tests.el in elpa
    for running with old installed elpa, allow users to write tests

send bug report on wisitoken keeps binding wisitoken-bnf-generate

wisi-prj-delete needs to kill gpr-query buffers for local process-env

add Ada code to decrement byte_pos by one char, use in emacs_common, run_common FIXMEs
    just reference wikipedia

move Trace from Parser to Lexer
    use in Find_Next
    no separate param in tree operations

ada_mode_wisi_lr1_parse --version
    would be helpful

set comment-auto-fill-only-comments

try adding wisi-refresh-prj-cache to compilation-finish-functions.

send bug report on wisitoken keeps binding wisitoken-bnf-generate

turn off undo in *gpr_query-* buffers

define ada-prj-default in ada-mode.texi project files section

mention wisi-size-threshold in wisi & ada-mode user guides

doc ada-indent-record, other ada indent functions, in ada-mode.texi

add option ada-record-end-names-optional, default t?
    requires specifying option in each match-names action

don't use navigate text_properties cache?
    just get pos of destination from tree
    requires general tree query

implement wisi parser for java using tree-sitter grammar
    find a large java file, compare command-line parse times
    compare eglot font-lock times?
    post to emacs-devel

    also try https://codeberg.org/FelipeLema/tree-sitter-indent.el

multi-major-mode
    separate parse_context for each sub-mode region
        => need a region # in addition to file-name
    initial parse needs start text bound

test/ada_mode-recover_partial_02_lr1.adb
    recover finds too many solutions (see benchmark data)

c:/Eurocontrol/matreshka-internals-unicode-ucd-colls.ads
    84,168 lines, 3,418,945 chars
    full parse => storage_error
        probably traversing the tree using recursion

    partial parse doesn't help, because of large aggregates?
        first aggregate is 30,000 lines, => storage_error
        need limit on partial_parse size?

Line_char take start_at or return array for line_region

Store indent in buffer-local array, not text property?
    Property moves with insert, but text properties are slow

gpr_query failing because sal/build/devel_obj does not exist
    when are the obj directories created?
    apparently by something that also emitted that error; wisi-referesh-prj-cache succeeds on second try.

don't add "previous parse failed ..." and other messages to *wisi syntax errors*

test/ada_mode-nested_parens.adb
    number of parsers required grows with paren nesting level
    fix grammar

wisi package should contain wisi.gpr, so modes that use it don't need to build it
    only gnatprep variable is ELPA

indent bug:
   procedure Find_New_Line_1
     (Tree     : in     Syntax_Trees.Tree;
      Ref      : in out Stream_Node_Parents;
      Line     : in     Line_Number_Type;
      Char_Pos :    out Buffer_Pos)
   with Pre => Line > Line_Number_Type'First and Ref.Ref.Element /= Invalid_Stream_Index,
     Post => Ref.Ref.Element = Ref.Ref.Element'Old and
             (Ref.Ref.Node = Invalid_Node_Access or else
                (Ref.Ref.Node.Label in Terminal_Label))
                --  Update Ref to node under Ref.Node in Ref.Stream that ends Line -
                --  1. Set Char_Pos to the position of the first character on Line. If
                --  not found, Ref.Ref.Node is Invalid_Node_Access, Char_Pos is
                --  Invalid_Buffer_Pos.
   is

    comment should align with 'is'

test/mixed_unix_dos_line_ends.adb
      coding conversion in send-string strips stray ^M
        only in emacs 28?
        change to utf-8-emacs; still strips.
        change to binary!?
            not in elisp manual list of coding conventions?
            doesn't work

        write bug report
        change to use null-terminated string?
            then byte, char pos wrong.
            if emacs buffer contains null, it's not valid text (even less valid than stray ^M)

in gpr_query, add output line stating query:
  References to Debug at flight.ads:25:5
  plus blank line when append

initial parse first do partial parse on visible region, for faster fontification
    also spawn a parser thread to run the full parse.
    if more fontification is required before full parse done, do partial parse on the new visible region.

    on file open:
        start asynchronous full parse, and mark buffer read-only
        if font-lock is requested while full parse is busy, call synchronous partial parse on the requested region
        when full parse is done, clear read-only

error recover fail:
   case Label is
   when virtual_label =>
     case Virtual_Label'(Label) is -- must be a discriminant direct_name, not an expression
         when Virtual_Terminal =>
            null;
         when Virtual_Identifier =>
            Identifier : Identifier_Index; -- index into user data
     end case;
   when nonterm =>
   end case;

incremental error recover requires higher enqueue limit
    test/ada_mode-recover_43.adb
    try lr1 - same error
    simplified; get mckenzie log
        desired solution: (delete '=')(insert ':=') cost 6
        minimal complete is too cheap
            nesting means there is more to complete
            separate minimal_complete heap; always do one from there, one from other.

    test/ada_mode-recover_partial_13.adb
        solution requires one delete, then expensive minimal_complete
        would also benefit from separate min_complete heap (or queue? not many on it)

    ./ada_mode-recover_43.adb.diff
        need separate minimal_complete queue?

    test/ada_mode-recover_partial_07.adb

    test/ada_mode-recover_24.adb
        Fast_Forward not found in config stack, because previous error correction completed too much.
        (delete 'loop') is not one of the language_fix solutions
        it is found by explore, but at cost 4 it is never dequeued.
            separate heap for minimal_complete and language_fixes


indent (point)(point) should work for indent-line

lexer_error that is not unbalanced quote is probably an indication of loss of file edit sync
    due to bug in code; don't work around!

Try_insert_quote computes line_region for every dequeue. Check time diff if disable - ada95.ads.
    test lexer_error.length > 0 and in parse_region?

move global indent/user vars to parse_context?
    or parse_data?
    don't send in every parse command, just when they change

log to file, not stdout; don't overload emacs process_io

Debug_parser_count abort on too many parsers

incremental parse
    wisi-show-errors show _all_ errors in buffer
        if parse succeeds, delete errors in regions parsed
        could do that in ada, send current list of errors (aka diagnostics) on request?

    see wisitoken notes, FIXMEs

    redesign navigation?
        on another branch
        don't compute text properties
        always get destination from parser; query-tree
        same for names

    never need begin_indent; compute it from line_begin_char_pos, line_begin_token

    error recover try prev solution
        edit it?

    store shared_stream_index in parse stream element, for faster "continue search in shared_stream"
        or just shared_stream_index for stack_top
            may be broken down?

    nonterm node_ids are not unique
        don't reset in start_parse
            add_nonterm_1 uses tree.nodes.last_index
                which is condensed in Clear_Parse_Streams
                use tree.next_nonterm_node_id, with wrap at 4 chars

    narrow-to-defun
        make everything work, if possible


GNAT CE 2021
    sal, wisitoken tests pass
    ada-mode waiting on gnatcoll-sql/xref accessiblity error fix; AdaCore ticket U618-052

insert_after
    could use active_region to distinguish:
        indent single line - continue code
        indent multiple lines - correct 'end' position

gnat-get-paths called more than once for ada-mode project

Ada-mode add newbie test
    no project
    VC project
    no gpr_query.exe

split org.emacs.ada-mode into .wisi, .ada-mode to match elpa

Make wisitoken compatible with debian stable?

for wisi.texi:
    ----------------------
    gpr-query relies on the cross reference information output by the
    compiler; it assumes the code is compiled.

    When gpr-query reads the compiler output, it caches the results in a
    database.

    This error message indicates that the cached cross reference database does not
    contain the requested symbol. This is due to one of three things:

    - the code has never been compiled, or changed but not compiled

        solution; compile it and try again

    - the code has been changed and compiled since the database was
    refreshed

        solution: refresh the database with C-c C-q (wisi-refresh-prj-cache)

    - the compiler does not output information for this symbol.

        give up

    AdaCore is moving to a different cross reference system, so they are not
    likely to make changes in the compiler output info to support new
    features.
    -----------


    if package install complains about wisi--lexer-error undefined,
    check for old copies of wisi or ada-mode on your load-path.

testimonial:
    Jonty Needham Feb 2021 ada-mode 7.1.4 Ada-mode is even better than it used to be and a real pleasure to use.

Add child menu on prj select - close buffers, select, close project

indent bug:
   procedure Find_New_Line
     (Tree     : in     Syntax_Trees.Tree;
      Ref      : in out Stream_Node_Parents;
      Line     : in     Line_Number_Type;
      Char_Pos :    out Buffer_Pos)
   with Pre => Line > Line_Number_Type'First and Ref.Parents.Is_Empty and
               Ref.Ref.Element = Tree.Streams (Ref.Stream.Cur).Elements.First and
               Ref.Ref.Node = Stream_Element_Lists.Constant_Ref (Ref.Ref.Element.Cur).Node
   --  On entry, Ref.Ref should be Stream_First (Ref.Stream)
   --  Update Ref to node in Ref.Stream that ends Line - 1. Set Char_Pos
   --  to the position of the first character on Line. If not found,
   --  Ref.Ref is Invalid_Stream_Node_Ref, Char_Pos is
   --  Invalid_Buffer_Pos.
   is begin

    comment wrong; ok if precondition is only one line

'with unreferenced' in parameter list
    in gnat pro 21.1
    > So I'd guess that you can put the aspect directly on the parameters in the
    > usual way (but that may require a compiler not available yet; the change was
    > approved in Sept [AI12-0395-1] and Oct [AI12-0398-1]). So, I'd expect the
    > following to work (eventually):
    >
    >  overriding function Expand_Tabs
    >      (This   : Dummy_Editor_Buffer with Unreferenced;
    >       Line   : Editable_Line_Type with Unreferenced;
    >       Column : Character_Offset_Type with Unreferenced) return
    > Visible_Column_Type is (0);
    While you're at it, you probably ought to add any other contexts where
    aspect_specifications are now allowed:

        parameter_specification
        discriminant_specification
        extended_return_object_declaration
        entry_index_specification


    do another diff between annex P and my grammar

find better hippie function for completion-at-point, add to recommended settings

wisi-skel expand
    'if trace': 'if' does not take a block name, so don't expand.

better error message for devault vc project
    "select an ada-mode project"
    or use default ada-mode project?

test completion with ada-mode default project
    joakim@verona.se
    > cl-no-applicable-method: No applicable method:
    > wisi-xref-completion-at-point-table, #s(gnatxref-xref nil
    > "*gnatxref-/home/joakim/pub/all-the-hellos/ada/hello-world/default_.adp*"
    need better error message "no project defined, so can't complete on Ada identifiers"

savannah support tickets work; mention in readme

delete ada-language-version

provide binary for windows and Debian on Savannah as an aide to new users
    AdaCore gnat distributions only have two flavors
    build.sh can just download those
    or some elisp code can

build.sh provide helpful error for missing gnatcoll
    refer to ada-mode.info

use case-fold instead of downcase; turkish locale

merge sal-ada-goto-declaration-start, java-wisi-goto-declaration-start into wisi

gpr_query process symbols in background thread, yeild periodically
    avoid pausing user interface

test/ada_mode-recover_44.adb
    fails with ENQUEUE_LIMIT
        never dequeues the obvious solution (delete =) (insert :=); cost 7
            don't just decrease the cost!
        minimal_complete runs away into the weeds
            limit via solution_count?

    smaller file with just the failing if statement finds a solution
        presence of larger shared_stream gives more to push_back?

in ada_annex_p.wy, wisitoken-grammar-mode:
    wisi-parse-buffer indent doesn't use lisp-indent-buffer

indent recover bug:
               (case Shared_Parser.Tree.Label (Parser_State.Shared_Token.Node) is
               when Shared_Terminal => Shared_Parser.Tree.Shared_Stream --  Missing comma
          when others => raise SAL.Programmer_Error)


.all fix doesn't work with Fedora gcc gnat
    try debian

navigate bug
    need test
        add 'use type' for 'delete > 0': wisitoken-parse.adb
        ada-declarative-region-start-p handle block_label
            Delete_Non_Grammar :
            declare
               Containing : Base_Token_Array_Var_Ref renames Parser.Tree.Non_Grammar_Var (Parser.Last_Grammar_Node);
               Delete : SAL.Base_Peek_Type := 0;
            begin
               for I in Containing.First_Index .. Containing.Last_Index loop
                  if not Overlaps (Containing (I).Byte_Region, Inserted_Region) then
                     Delete := I;
                     exit;
                  end if;
               end loop;
               if Delete > 0 then

indent bug
    need test
    wisitoken-parse.adb
                       not (Overlaps (Token.Byte_Region - Shift_Bytes, Stable_Region) or
                              (KMN.Inserted_Bytes > 0 and then (Overlaps (Token.Byte_Region, Inserted_Region))) or
                              (KMN.Inserted_Bytes = 0 and then

doc wisi-enable-parse in skeleton-end-hook?


ada2020
    recursion reduces power of Minimal_Complete in error recover too much
        handle recursion in minimal_complete at runtime?

wisi.texi
    $FOO only sees vars defined in the current project
        workaround:
    :compile-env
     (list
       (concat "HOME=" (getenv "HOME")))

    also add comments to code; 'process-environment' specifically excluded.
        $BAR declared in .prj only affect that project, not others.

add .prj syntax: import_env_var=HOME

ada-process.el missing TICK_2 on debian o.e.a.s-5
    because generated by External
    should be ada-process-external.el!

compare_ada_annex_p
    arm_texi use bold underscore for bold, to distinguish keywords
    write arm-info-mode, to apply faces

ada-which-function fails in wisi-ada_annex_p-format_parameter_list.adb

output min_complete fraction in .parse_table - changed when recursion blew up?

navigate bug
    wisitoken-bnf-output_ada_emacs.adb
    point on 'begin' of Create_Ada_Action
    wisi-reset-parser
    sal-ada-next-declaration; ok

    point on 'procedure Translate_Sexp (Line : in String)'
    wisi-reset-parser
    sal-ada-next-declaration; on 'begin'
    sal-ada-next-declaration; no declaration-start found
        nav cache not being overwritten!?

navigate in .wy buffer
    can always parse locally
    only need global for completion list
        background that, like in gpr-query

need better homepage for wisi
    point to user guide, show some screen shots
    populate Savannah 'docs' page?
    extend http://www.nongnu.org/ada-mode/? = savannah
    set savannah devel status to 'in production'

indent bugs
    State.Kernel (I) :=
      (Production        => Item.Prod,
       Recursion         =>
       --  Item.Recursion is used by at generate time by Delete_Non_Minimal
         ((case To_Index (Item.Dot) is

        comment should align with expression, not discrete_choice
            which is _not_ what wisi-hanging Indenting_Comment True does
            semantics of Indenting_Comment are confused
                Indenting_Token should be the token to which wisi-hanging applies, not the one containing the comment?
                they are the same when there is a comment-pair
                    so keep what we have for consistency?

        test/ada_mode-generic_package.ads
            preceding comment moved when wisi-hanging added to name.

        test/ada_mode-recover_30.adb
            comment after aspect_specification in subprogram_body
                should be indented with 'is'

Don't put name properties - just accum completion list. Set name prop only for which func, add-log - in small region.
    More detailed parse-action?

Separate set of McKenzie params for face parse

ada-format-param-list take option to convert from single line to multi-line
    and vice-versa?
    requires passing that option to Ada reformat code; changes elisp-ada API

gpr-query: mode line Symbols > 100%
    maybe fixed that, but now symbols % is not showing

eldoc
    use gpr_query to provide info
    see eglot

wisi-prj.el use project-switch-project?
    stores projects in a file

test/ada_mode-recover_partial_02_lr1.adb
    add language_fix to push_back to before '('
    add paren to descriptor, add this in -explore?

language_fixes; duplicate test_mckenzie_recover test cases here, to test this code
    selected_component 1

test/ada_mode-recover_06, _10.adb
    not _24
    'end' not inserted on blank line so indent is correct for adding another statement
    could be inserted on comment line.

ada-mode language_fix 'extra begin'
    PRAGMA_ID | USE_ID should be First (declaration)
    output First in ada_process_actions?

LEFT_SQUARE_BRACKET is equiv to LEFT_PAREN at least for aggregates
    update all refs to paren in wisi.adb? wisi-ada.adb? -mckenzie_recover-ada.adb?

when move to new gnat, need to fix compilation errors
    assume wisitoken is broken
    need different compile-env for compiler, xref
    improve wisi-prj

fix "string not terminated by end of line" bug
    use parser to fontify strings

    same for unterminated placeholder; use parser to fontify comments
        ada_mode-placeholders.adb

move EXE_EXT, GNAT_EXE, INSTALL_BIN into makefile.conf

fix blinking fringe mark when type "--"
    delay the display of the fringe mark (using a timer), without delaying font-lock itself

paper_2019.latex
    ada-mode use of wisitoken parser
    metric for comparing error correction
        argh. redo using lr1 for wisitoken-tokens
            really slow loading lr1 table for each file; loop on files in dump_wisitoken_corrected

        sum_diff_lengths.adb
        file_count: 55
        correct-wisitoken:  total size: 14325
        correct-libadalang: total size: 52040

    excellent examples:
        recover_02: wisitoken inserts "end; end;" prematurely
        recover_05: libadalang deletes entire partial record type declaration; wisitoken finishes it
        recover_07: libadalang splits an assignment rather than insert a semicolon.
        recover_08: wisitoken inserts "end;" prematurely
        recover_15; wisitoken inserts "end loop;" just right.
        recover_16; wisitoken inserts "end if;" just right.
        recover_18; libadalang deletes start of two loops; can't get indentation right.
        recover_21: libadalang deletes 'elsif', 'else' instead of inserting 'if then'; can't get indentation right.
        recover_deleted_procedure_1: libadalang deletes lots of code
        recover_end_1: libadalang deletes 'procedure'
        recover_string_quote_1, 2, 3: libadalang does better

Do spark on mckenzie-base

other ada 202x syntax
    http://www.ada-auth.org/standards/ada2x.html /5
    http://www.ada-auth.org/standards/2xrm/html/RM-0-2.html Language Changes
        test/ada_mode-ada2020.adb
        put features not supported in Ada Community 2020 (if any?) in ada_mode-ada2020_more.adb,
            move them to -ada2020.adb when Ada Community 2021 available

        parallel
             parallel loops 5.5 3/5, 4/5 [parallel [chunck]] for
             iterator_filter 5.5 :== when condition
             parallel blocks 5.6.1
             parallel container iteration

             parallel reduction
                subset of parallel container/array iteration

        container aggregate 4.3.5 []

        lightweight iteration => procedure iterators

        reduction expression 4.5.10 attributes Reduce, Parallel_Reduce
            no new syntax, just new semantics

        iterator filter

    declare_expression
        http://www.ada-auth.org/cgi-bin/cvsweb.cgi/ai12s/ai12-0236-1.txt?rev=1.10

    process all acats tests?
        http://www.ada-auth.org/acats.html
        not avail for 202x yet
        d:/Archive/GNAT/ACATS41.ZIP

present spark counter example info
    c:/Projects/org.stephe_leake.sal/build/obj/gnatprove/prove_bounded_definite_vectors_sorted.spark
        JSON format
    <gnat>share/gps/plug-ins/spark2014.py

bugs/suboptimal:
    ada_mode-recover_02.adb
        inserts 'end; end;' prematurely, ending package; next statement is legal
            but there's no way to know that without looking farther ahead.
        minimal complete is too cheap?
        review all error corrections to see if there's a way to optimize?

    ada_mode-recover_09,adb
        inserts 'if then if then end if;' instead of 'if then'

    ada_mode-recover_10.adb
        allow "of" where "in" should be; common mistake
            produce warning?

        missing 'end' inserted _after_ 'end check_rhs_order'; should be before

ada-build.el
    add spark commands: prove { project | file | function/procedure | assertion at point}

gpr_query.adb process_overridden should return method def for all ancestor types, not just parent

figure out how gnatfind finds ada_mode-separate_procedure body
    report bug: -f not respected (test/ada_mode.ads)
    improve gpr_query to find separate body

move dvc-kill-all-review/workspace to wisi?
    add delete projects in the workspace?
    delete project call wisi-kill-xref, wisi-kill-parser

gpr_query does not see libraries?
    need clear example; libadalang mains vs langkit?
    compare to GPS, gnatinspect

align region too large:
   case A is
      when 0            =>
         --  plain identifier
         RHS.Tokens.Append
           ((Label      => +"",
             Identifier => +Get_Text (Data, Tree, Tree.Child (I, 1))));
   end case;

    ada-align groups preceding comment lines with declarations

    lsp language server can do align as part of "format"

    add wisi refactor case (similar to format_param_list)

libadalang/lsp backend
    o.e.a.stephe-4 on Debian, for gnatpro 20
    use ada_language_server via lsp?

    gnu elpa eglot
        eglot-x has extended xref for ccls server

    lsp can't do grammar actions or org source blocks; no associated file!
        eglot issue #523

    https://github.com/microsoft/language-server-protocol/issues/18 semantic info for highlight = face

    use lang server infrastructure as wrapper around wisitoken ada parser/wisi post-process

    better error correction; parse with wisitoken parser, apply corrections, feed that to libadalang

AdaCore tickets:
    Q406-078 2017-Aug : AdaCore (Nicolas Setton, Arnaud Charlet)
        mentions not fixing old GPS engine in favor of libadalang;
        wait for libadalang to introduce new config flags. Phippe
        Waroquiers wants GPS & Emacs indentation to be the same,
        and match Eurocontrol style.

    R801-052 2018-Aug : Stephe mentions transforming libadalang
        tree to wisitoken tree, using wisitoken indent code.
        AdaCore says GPS not using libadalang for indentation yet.

    R821-023 2018-Aug .. 2018-Dec : gnatpp using libadalang, but it is not ready for indent.

    SA31-041 2019-Oct

time on huge eurocontrol files c:/eurocontrol
    if need more than one source file, use current buffer or disk file?
    keep one context active, for the current project?
        see playground.adb in libadalang source

pp-command_lines.ads Name_Casing Name_Case_As_Declared - requires name resolution
    too slow?

compute reverse parse lr table, use that to extend parse backwards to find reasonable start point

improve test/ada_mode-recover_32.adb
    recover gets CONSTRAINT_ERROR, config ops full

speed up lalr compile
    decrease subprog size?

replace ada.wy with ada_annex_p.wy
    too many conflicts
    ada.wy:774: ;; FIXME: | digits_constraint
    ada.wy:775: ;; FIXME: | delta_constraint
    ada.wy:1015:;; FIXME: leaving out [renaming] [aspect_specification]
    ada.wy:1245:      ;; FIXME: indentation of comment after 'is' (and 'with' in
    ada.wy:1929: ;; allocator, FIXME: leaving out subpool_specification.

Adjust-indent loop on each token, handle 'end <keyword>'

Eurocontrol/debbugs bugs
https://debbugs.gnu.org/cgi/pkgreport.cgi?package=emacs;include=subject:ada-mode
    33744 indentation of subexpressions
        https://debbugs.gnu.org/cgi/bugreport.cgi?bug=33744
        need to identify subexpressions
        test/hanging.adb need more test cases
        waiting for money
            procedure Operator_Indentation is
            begin
              if B
                   or else C
                     > 2 -- indented relative to "or else"
              then
                null;
              end if;
            end Operator_Indentation;

do module interface
    see if it's faster; should be

    add re2c_emacs lexer, that handles emacs raw buffer text
        that lets the emacs buffer be the text buffer, avoiding copy/encode/bookkeeping

    use partial and incremental parse
        _only_ parse on demand, mininal amount of text
        maintain list of parse trees

    add parser task, one per buffer
        parse ada_mode.ads for face while finishing indent ada_mode.adb

        queue parse requests for one buffer
            first parse builds syntax tree
            use it for all post-parse actions

    emacs on windows uses a custom malloc
        use storage pool to specify that?
        run in a separate OS thread, so we don't care?
        why do we care?
            because tree-sitter integration is trying to expose TSNode directly to lisp?
            if wisi doesn't do that, do we care?
            Emacs allocator xmalloc calls memory_full on error
                that releases some reserved memory, prompts the user to save and exit

                so wisi should signal memory-full on Ada allocator fail, let elisp call memory_full

packrat
    need to override wisitoken.parse.put_errors for emacs process interface
        derive an Emacs_Parser type?

        or add abstract error_list, change wisi_runtime.put_errors to use that

        using Parser.Put_Errors for now

    langkit packrat is significantly faster than wisitoken lalr
        because of generated code, not table interpreter?
            try generated code for lalr
                lose error correction?
        use non-error-correcting packrat as primary parser, error-correcting lalr as fallback

    generate, compile packrat speed?
        ada_packrat_process_main.adb (31347 lines) compiles _way_ faster than ada_process_main.adb (13692 lines)

make-subprogram-body should strip aspects.

compute align in grammar actions
    align-list action on ':', '=>' etc

support variable pitch fonts
    for indent use (put-text-property 118 120 'display '(space :width (10))))

add wisi-forward-anchor, use for comments after 'is', 'when' in record type

disable or use electric-indent-post-self-insert-function
    called during ada-indent-newline-indent
    on post-self-insert-hook
        use that for ada-mode capitalization?

ada-goto-declaration-start
    fails on task declaration
        only a problem if misusing C-c C-b ada-make-subprogram-body to make a task body
        C-x C-e skeleton expand works fine

        ada-make-subprogram-body should throw an error if it's not on a
        _subprogram_ spec, and recommend C-c C-e in the error message.

        but also fails on
        task body TA is
        begin
           null;
        end TA;

        fix the latter, see if it fixes ada-make-subprogram-body
            if not, make it throw an error.

    fails on separate (P) procedure X;
        C-c C-e works

        but also fails on
        separate (P)
        procedure X;
        is
        begin
        end X;

        fix the latter, see if it fixes ada-make-subprogram-body
            if not, obsolete that.

add "show all overloads" in navigate
    leave out file, line, col from gpr-query id

refactoring
    rename entity:
        use xref to rename all uses (with/without confirm)

    change parameter_result_profile
        make same change in all overrides
        offer to walk thru all uses

    promote primitive subprogram-local variable to type component

    move primitive from parent to child class

    extract subprogram
        from Eclipse
        highlight lines of source
        prompt for name
        it guesses parameter_result_profile

 debug hints, relevant files
https://debbugs.gnu.org/Developer.html
https://debbugs.gnu.org/server-control.html
https://debbugs.gnu.org/cgi/pkgreport.cgi?package=emacs;include=subject:ada-mode

wisitoken keeps binding wisitoken-bnf-generate, thus regenerating ada_annex_p* from .wy
    - see obj/*.bexch; hash of *.gpr is wrong, one updated on each run, eventually ok.
    first happened in gnat community 2020
    still there in 2021

(wisi-process-parse-save-text wisi--parser "c:/Projects/org.emacs.ada-mode.stephe-2/real_edited" t)
(wisi-process-parse-compare-tree-text wisi--parser :disable t)
(setq jit-lock-defer-time 1.5)

one ELISP="(setq save-parser-log \"../debug-2.log\" save-edited-text \"../edited\")" ONE_TEST_FILES=ada_mode-*.adb
    wisi-parser-transaction-log-buffer-size-default most-positive-fixnum
    compare-tree-text t

test-ada-lalr-incremental-process-gpr_query ELISP="(setq-default wisi-process-time-out 30.0)"

two RUN_ARGS="command_file debug.cmd &> debug.log"

*.debug RUNTEST=run-indent-test-lalr-incremental-process-gpr_query.el ELISP="(setq-default wisi-mckenzie-task-count 1 save-parser-log \"../debug-2.log\" wisi-parser-verbosity \"debug=1\")"

ada-mode option defaults:
--lang_params "3 2 0 0 -3 3 2 0 2 3 2 2 1"

end-name-optional nil:
--lang_params "3 2 0 0 -3 3 2 0 2 3 2 2 0"

to change process executable for all current and future buffers:

    in any *.adb buffer:
    (setf (wisi-process--parser-exec-file wisi--parser)
      "c:/Projects/org.emacs.ada-mode.stephe-2/ada_mode_wisi_parse.exe")
    M-x wisi-kill-parser

    to undo:
      (setf (wisi-process--parser-exec-file wisi--parser)
        "ada_mode_wisi_parse.exe")
    M-x wisi-kill-parser

    if *-process.el has changed:
    in *-process.el: M-x eval-buffer
    in *.<lang> buffer:
    (wisi-kill-parser
    (setq wisi-process--alist nil)
    M-x <lang>-mode


use elp (emacs lisp profiler)?
    (with-current-buffer (find-file-noselect "~/src/xdisp.c")
      (elp-instrument-function 'c-beginning-of-defun)
      (goto-char (point-max))
      (condition-case nil
          (while (beginning-of-defun) nil)
        (error nil))
      (elp-results))

(progn (profiler-start 'cpu) (time-it 'wisi-parse-buffer 10) (profiler-report) (profiler-stop))
    B - profiler-report-render-reversed-calltree shows low-level time hogs

attach gud-gdb to running emacs: attach <process id>
    source emacs/src/.gdbinit
    xbacktrace shows lisp backtrace

call wisitoken.parse.lr.mckenzie_recover.put ("", shared_parser.tree, Super.parser_Status (Parser_Index).parser_state.stream, config, false)

"kill -USR2 <emacspid>" which should also drop you into the (elisp?) debugger.

(browse-url "c:/Projects/arm_info/org.adaic.arm_form/build/html/arm2012/RM-P.html")
(info "(aarm2012)Annex P" "*info Annex P*")
http://www.ada-auth.org/standards/
(info "(elisp)Parser State" "*info syntax-ppss*")

 git config for elpa checkout
in ~/.gitconfig:
    # 15 Feb 2016: ELPA has an object that fails this check; only need
    # to disable (set to false) when pull a full repository (that includes that
    # object)
        fsckObjects = false

[core]
	repositoryformatversion = 0
	filemode = false # don't set exec bits
	bare = false
	logallrefupdates = true
	ignorecase = true
[remote "origin"]
	fetch = +refs/heads/master:refs/remotes/origin/master
	push  = +refs/heads/master
	url = stephen_leake@git.sv.gnu.org:/srv/git/emacs/elpa.git
[branch "master"]
	remote = origin
	merge = refs/heads/master

 elpa hints
to test compiling info files:
    in *.texi[nfo], F5 makeinfo *.texi[nfo]

 release process
keep status in ~/projects.text
do wisitoken release ../org.wisitoken/build/release_process.text

update benchmark_results.text

add wisitoken grammar doc to wisi package
    doc Ada grammar actions

find info cross reference checker; ref to wisi from ada-mode was wrong.

(dvc-status ".")

check for ELPA patches by others
    (dvc-status "/Projects/elpa")
    (dvc-state-multiple "/Projects/elpa/packages")
        revert local changes in ada, wisi, ada-ref-main; commit in uniquify
    (dvc-pull "/Projects/elpa")
    (dvc-sync-review "/Projects/elpa")
        update
        clean, quit sync
    cd c:/Projects/elpa
    git log -2 -- packages/wisi
    git log -2 -- packages/ada-mode
    git log -2 -- packages/ada-ref-man
    git log -2 -- packages/uniquify-files
    if changes:
        (dvc-log "/Projects/elpa/packages/<dir>/<file>")
        apply changes to current

check emacs buglist
    http://debbugs.gnu.org/cgi/pkgreport.cgi?package=ada-mode
    to update a bug: nnn@debbugs.gnu.org
        subject: from bug title, for people who rely on that.
    if fixed in devel sources, add 'pending' tag:
        control@debbugs.gnu.org
        tags nnn + pending

check for latest Emacs release
    http://ftp.gnu.org/gnu/emacs/windows/

update to current emacs master
    (dvc-pull "/Projects/emacs/master")
    (dvc-sync-review "/Projects/emacs/master")
    exit emacs; in mingw shell:
        cd /c/Projects/emacs/master
        make

run all tests without elpa:
    build/Makefile byte-compile test byte-compile-clean

    - Windows Emacs master, current gnat
    - Windows Emacs 25.3, current gnat
    - Windows Emacs 26.1, current gnat
    - Windows Emacs 27.1, current gnat
    - Windows Emacs 28.1, current gnat

    #dvc-state-multiple above
    (dvc-push)
    - Debian testing, Emacs master, current gnat (community or pro)
    - Debian testing, Emacs master, Debian gnat
        su -l root
            aptitude update
            aptitude full-upgrade --without-recommends
        gnat
        libgnatcoll-xrefnn-dev
        gprbuild

compare:
    build stuff to compare with previous release in elpa:
        build/Makefile pub
        ../org.emacs.wisi/build/Makefile pub

    ~/.emacs.d/early-init.el
        reset package-load-list to '(all) to allow installing ada-mode

    (list-packages)
        install previous ada-mode, wisi, ada-ref-man from public ELPA for diffs
        change versions in compares below to match installed versions.

    (ediff-directories "~/.emacs.d/elpa/wisi-3.1.7" "/Projects/elpa/packages/wisi" nil)
        ../org.emacs.wisi/NEWS
            copyright date
            add release date
            add new features

    (ediff-directories "~/.emacs.d/elpa/ada-mode-7.2.0" "/Projects/elpa/packages/ada-mode" nil)
        NEWS
            add release date
            add new features
            list fixed bugs

    (ediff-directories "~/.emacs.d/elpa/ada-ref-man-2012.5" "/Projects/elpa/packages/ada-ref-man" nil)
        /Projects/org.adaic.arm_form/NEWS
            add release date, new features

build in elpa; /Projects/elpa/packages/ada-mode/Makefile
    check for unused sources in wisi; no .o => edit Makefile pub-*

Check copyright on files in elpa
    c:/Projects/elpa/GNUMakefile check-all
    if any ada/wisi files added to output, fix them (add or change to FSF)

bump versions
    Gnu ELPA requires single digits between dots in versions
    add ".alpha" ".beta" ".rc" for devel version
        use .alpha for Debian testing

        alpha test: add .alpha in elpa Version header only

        beta test: add .beta everywhere
            for follow-on, add/change n in elpa Version header only

        release candidate; .rc everywhere
            for follow-on, add/change n in elpa Version header only

    bump if _any_ changes other than autoloads, so ELPA package handler knows to update
        bump third digit for bug fixes, minor features, no user-incompatible changes
        bump second digit for major features, mostly backward-compatible
            or if third digit gets to 10
            - GPS indentation engine add/delete
            - partial parse
            - delete elisp lexer
            - wisi use virtual tokens in indent
            - ada-mode 7.3 incremental parse
            - ? module?

        bump first digit for really major elisp user-visible changes:
            ada-mode:
            - 5 use parser
            - 6 compute indentation in grammar actions, external parser with error correction
            - 7 move lots of stuff to wisi; many ada-* variables, functions deleted.

            wisi:
            - 3 project.el integration
            - 4 incremental parse

    ../org.emacs.wisi/emacs_wisi_common_parse.ads
        (should have been changed already, but verify;
         should match last mention of protocol version in NEWS)
        Protocol_Version if this file changed, or
        wisi-process-parse.el -send-parse, -send-refactor, -execute
        changed; ie, if installed parser must be replaced on upgrade or downgrade

    wisi-ada.ads
        (should have been changed already, but verify;
         should match last mention of language protocol version in NEWS)
        Language_Protocol_Version if this file changed
        ie, if installed parser must be replaced on upgrade or downgrade

    ../org.emacs.wisi/wisi.el
        copyright date
        Version:

    ../org.emacs.wisi/NEWS
        if not done above

    ../org.emacs.wisi/wisi.texi
        copyright date
        @title
        @node top

    ../org.emacs.wisi/README
        first line

    ada-mode.el
        Version:
        package-requires wisi version
        ada-mode-version

    NEWS
        if not done above

    ada-mode.texi
        @title
        @node top

    README
        first line

    build.sh
        if -d ../wisi-, WISI_DIR (twice)

    install.sh
        if -d ../wisi-, WISI_DIR (twice)

    ada-ref-man.el
        Version:

    build/Makefile
        run uninstall-elpa with old values before changing!
        ADA_MODE_VERSION
        ADA_REF_MAN_VERSION
        WISI_VERSION

    d:/Web/savannah/ada-mode/index.html
        find-replace ada-mode i.j.k
        wisi version does not appear
        _not_ WisiToken (done in wisitoken release)

        echoed to savannah web page on CVS commit.
        other files in that dir updated by ~/web/Makefile
        FIXME; need a savannah wisi package

    _not_ d:/Web/stephe-leake/ada/wisitoken.html - done in wisitoken release

    ~/Web/Makefile
        ADA_MODE_VERSION
        _not_ WISITOKEN_ZIP_VERSION

verify other metadata
    ada-mode.el
    ada-ref-man.el
    wisi.el

if doing beta test:
    (ediff-directories "/Projects/org.emacs.ada-mode" "/Projects/elpa/packages/ada-mode" nil)
    (ediff-directories "/Projects/org.emacs.wisi" "/Projects/elpa/packages/wisi" nil)

    (dvc-state-multiple "/Projects/elpa/packages" t)
    (dvc-push "/Projects/elpa")

    ask for beta testers
        edit notice below
        mailing list
        comp.lang.ada


prep for elpa tests:
    build/Makefile byte-compile-clean pub
    # pushes to elpa workspace
    # commit: (dvc-state-multiple "c:/Projects/elpa/packages")
    build/Makefile pub-install
    # builds local elpa archive, installs it

Emacs 25.3, current gnat
    ~/bin/emacs-25.sh
    build/Makefile install-elpa
    (gpr-query-kill-all-sessions)
    (list-processes)
    # 'd' = kill; gpr_mode_wisi_parse.exe, ada_mode_lr1_wisi_parse.exe
    cd ~/.emacs.d/elpa/ada-mode-7.1.0*
    ./build.sh
    cd .. # allow uninstall-elpa

    restart Emacs to set load-path

    build/Makefile compile-ada-test test-clean
    build/Makefile test TEST_DIR=elpa

    build/Makefile uninstall-elpa
    (gpr-query-kill-all-sessions)
    build/Makefile recursive-clean clean # if changing compilers

push for Debian
    current Emacs for dvc
    # dvc-state-multiple above
    # only uniquify-files in elpa ; commit ada-mode, wisi elpa on Debian for file permissions
    (dvc-push "/Projects/elpa")
    (dvc-push "/Projects/org.emacs.ada-mode")

Debian testing has elpa checkout
    build/Makefile uninstall-elpa
        # before versions change

    (dvc-pull ".")
    (dvc-sync-review ".")

    upgrade debian (to avoid eventually needing to reinstall from scratch)

    FIXME: test with the latest Debian gnat release
        bugs to https://gcc.gnu.org/bugzilla/buglist.cgi?quicksearch=comp%3Aada

    if new machine, install gnat CE 2019, gnatcoll
        http://libre.adacore.com
        ada-mode.texi

    (dvc-pull "/Projects/elpa")
    (dvc-sync-review "/Projects/elpa")

    build/Makefile
        # no ARM_INFO on Debian
        docs pub-ada pub-wisi clean-elpa
        # build-elpa uses latest commit; FIXME: change that?
        (dvc-state-multiple "/Projects/elpa/packages")
        build-elpa uninstall-elpa
        install-elpa
            # byte-compile errors, warnings show in *compile-log*

    check for bogus execute permissions in elpa
        $ cd /Projects/elpa/
        $ ls -R -l packages/ada-mode | grep -- -rwx
        $ ls -R -l packages/wisi | grep -- -rwx
        $ chmod -x *.el *.adb
        # keep execute on *.sh

    commit elpa:
    (dvc-state-multiple "/Projects/elpa/packages")
        add/delete, stage, commit ada-mode, wisi

    (dvc-push "/Projects/elpa")

    # dvc-state-multiple above
    (dvc-push ".")

On Windows
(dvc-pull)
(dvc-sync-review ".")

delete changes in elpa:
    $ cd c:/Projects/elpa/
    $ git checkout .

update elpa, commit elpa/ada-ref-man (not done on Debian)
    (dvc-pull "/Projects/elpa")
    (dvc-sync-review "/Projects/elpa")

    check version ada-ref-man.el

    build/Makefile pub-ada-ref-man

    (dvc-state-one "/Projects/elpa")
        add, stage, commit

    (dvc-push "/Projects/elpa")
    (dvc-sync-review "/Projects/elpa")

    # 24 hrs for web repository to update

after Gnu ELPA updated, test install from GNU ELPA
    first install current version, to be sure upgrade requires new versions
        ada-mode 7.1.5 should have required wisi 3.1.5

    (list-packages)
    5.1.8 crashed emacs for me
    see 'build.sh; install.sh' above for compiling

    also wisitoken-grammar-mode

(dvc-state-one ".")
build/Makefile tag zip

in cygwin console for gpg prompts:
    cd /Projects/org.emacs.ada-mode/build/
    ls *.tar*
    rm <old>.tar*
    gpg -b *.tar.*

    scp *.tar.* stephen_leake@dl.sv.nongnu.org:/releases/ada-mode/

~/Web/Makefile
    # no 'sync' here; all on savannah via cvs, scp
    ada-mode

commit savannah
    if emacs cvs-examine fails, do 'cvs status' in shell to see real error message (probably IP address confusion)
        # see projects.text "conflicting keys for savannah"
        $ cd /d/Web/savannah/ada-mode
        $ cvs status
        # edit ~/.ssh/known_hosts, delete offending one, repeat 'cvs status'
    (cvs-examine "d:/Web/savannah/ada-mode" nil)
    mark all 'm'
    commit   'c'
    edit commit message "release version i.j.k"
    C-c C-c

    takes ~ 10 min for http://www.nongnu.org/ada-mode/ to reflect cvs commit

List in FSF/UNESCO free software directory?
    https://directory.fsf.org/

publish on Alire?
    https://alire.ada.dev/
    https://blog.adacore.com/announcing-the-2022-ada-spark-crate-of-the-year-award

create release branches

checkout reference copy in c:/Projects/ada-mode-releases
    cd c:/Projects/ada-mode-releases
    mkdir ada-mode-i.j.k
    mkdir -p ada-mode-i.j.k/org.emacs.ada-mode
    mkdir -p ada-mode-i.j.k/org.wisitoken
    mkdir -p ada-mode-i.j.k/org.stephe_leake.sal
    mkdir -p ada-mode-i.j.k/org.stephe_leake.makerules
    cd c:/Projects/org.emacs.ada-mode
    git archive ada-mode-i.j.k | tar -x -C /c/Projects/ada-mode-releases/ada-mode-i.j.k/org.emacs.ada-mode
    cd c:/Projects/org.wisitoken
    git archive wisitoken-i.j.k | tar -x -C c:/Projects/ada-mode-releases/ada-mode-i.j.k/org.wisitoken
    cd c:/Projects/org.stephe_leake.sal
    git archive sal-i.j.k | tar -x -C c:/Projects/ada-mode-releases/ada-mode-i.j.k/org.stephe_leake.sal
    cd c:/Projects/org.stephe_leake.makerules
    git archive HEAD | tar -x -C c:/Projects/ada-mode-releases/ada-mode-i.j.k/org.stephe_leake.makerules
    aunit_ext?

post on emacs-ada-mode mailing list, c.l.a newsgroup, https://savannah.nongnu.org/news/submit.php?group_id=11631:

-------------------
Gnu Emacs Ada mode 7.3.beta released.
-------------------

Gnu Emacs Ada mode 7.3.beta is now available in GNU ELPA devel for
beta testing.

ada-mode and wisi are now compatible with recent gnat versions. The
grammar is updated to the proposed Ada 2022 version.

Incremental parse is provided. It still has some bugs, so it is not
enabled by default. To try it: (setq-default
wisi-incremental-parse-enable t).

To access the beta version via Gnu ELPA, add the devel archive to
package-archives:

(add-to-list 'package-archives (cons "gnu-devel" "https://elpa.gnu.org/devel/"))

Then M-x list-packages; the beta release shows as ada-mode version
7.3beta0.20220710.165208, wisi version 4.0beta0.20220710.165321.

See the NEWS files in ~/.emacs.d/elpa/ada-mode-7.3.beta and wisi-4.0.beta,
or at http://www.nongnu.org/ada-mode/, for more details.

The required Ada code requires a manual compile step, after the normal
list-packages installation:

cd ~/.emacs.d/elpa/ada-mode-7.3.beta
./build.sh
./install.sh

This requires AdaCore gnatcoll packages which you may not have
installed; see ada-mode.info Installation for help in installing them.

build.sh will take longer than in previous releases; the ada-mode LR1
parse table is now too big to store in ELPA, so build.sh generates it.
-------------------


-------------------
Gnu Emacs Ada mode 7.1.6 released.
-------------------

Gnu Emacs Ada mode 7.1.6 is now available in GNU ELPA.

This is a bug fix release.

ada-mode and wisi are now compatible with gnat FSF 11, Pro 22,
Community 2021.

See the NEWS files in ~/.emacs.d/elpa/ada-mode-7.1.6 and wisi-3.1.3,
or at http://www.nongnu.org/ada-mode/, for more details.

The required Ada code requires a manual compile step, after the normal
list-packages installation ('install.sh' is new in this release):

cd ~/.emacs.d/elpa/ada-mode-7.1.6
./build.sh
./install.sh

This requires AdaCore gnatcoll packages which you may not have
installed; see ada-mode.info Installation for help in installing them.
-------------------

-------------------
Ada Reference Manual info format 2020.1 released.
-------------------

ada-ref-man 2020.1 is now available in GNU ELPA.

This includes Ada 202x draft 25, as well as Ada 2012. GNAT Community
2020 has some support for some of the new language features in Ada
202x.

There is also now a searchable info index, containing the entries in
the ARM Index.
-------------------

mark fixed bugs
    http://debbugs.gnu.org/cgi/pkgreport.cgi?package=ada-mode
    http://debbugs.gnu.org/Developer.html
    email to nnn-close@debbugs.gnu.org
        subject: copy from bug report
        body: closed by ada-mode version 7.2.1
        don't include Version: header; that's an Emacs version
    debbugs updates ada-mode summary page within half an hour; no emails

not found by search:
    https://debbugs.gnu.org/cgi/bugreport.cgi?bug=56236

check https://www.emacswiki.org/emacs/AdaMode
    https://www.emacswiki.org/emacs/StephenLeake

-- end of file
