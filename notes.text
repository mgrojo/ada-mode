build/Makefile

branches:
org.wisitoken          - working, used by o.e.a.s-2
org.wisitoken.stephe-1 - available

(dvc-state-multiple
'((xmtn . "/Projects/org.stephe_leake.makerules")
  (xmtn . "/Projects/org.stephe_leake.aunit_ext")
  (xmtn . "/Projects/org.stephe_leake.sal.stephe-1")
  (xmtn . "/Projects/org.wisitoken.stephe-1")))

(dvc-propagate-multiple
 '(("../org.stephe_leake.sal" . "../org.stephe_leake.sal.stephe-1")
   ("../org.wisitoken"        . "../org.wisitoken.stephe-1")))

update-wisi_grammar
(dvc-propagate-multiple
 '(("../org.stephe_leake.sal.stephe-1" . "../org.stephe_leake.sal")
   ("../org.wisitoken.stephe-1"        . "../org.wisitoken")))

 current work
speed up lr1 generate
    build/generate_ada_lite_lr1.gprof
  6.38      3.42     0.31 14273399     0.00     0.00  wisitoken__lr__lr1_items__include
    can't improve - dictated by boolean array

  4.73      3.65     0.23 128987208     0.00     0.00  wisitoken__lr__lr1_items__item_greater
    call it less; binary search

  2.47      3.77     0.12  4608786     0.00     0.00  wisitoken__lr__lr1_generate__lr1_goto_transitions
    uses above

  2.06      3.87     0.10  7454674     0.00     0.00  wisitoken__lr__lr1_items__item_lists__find
    binary search

  1.85      3.96     0.09  4821257     0.00     0.00  wisitoken__lr__lr1_items__to_lookahead
    can't improve - dictated by boolean array

  1.65      4.04     0.08 38812715     0.00     0.00  wisitoken__token_id_arrays__element__2
    for item.dot; store index?
        started to, requires passing array everywhere

  1.65      4.12     0.08   141101     0.00     0.00  wisitoken__lr__lr1_items__find__4
    already red-black tree

  1.03      4.17     0.05 14150083     0.00     0.00  wisitoken__lr__lr1_items__goto_item_lists__finalize
    copied with Item_Set.
    don't need goto_set until all item_sets computed? don't bother freeing?

    use binary search for find in item_lists

    multi-cpu

    wisi-generate --time ../wisi/test/ada_lite.wy

    baseline
        LALR re2c generate time: 0.383392342
        LR1  re2c generate time: 8.180992139

    factor out "find node" in lists_sorted; smarter use of element_equal
        LALR re2c generate time: 0.217569506
        LR1  re2c generate time: 3.573353531

    -O3
        LALR re2c generate time: 0.208679748
        LR1  re2c generate time: 3.137268302

    binary search
        LALR re2c generate time: 0.164738803
        LR1  re2c generate time: 2.999708130

        Ada:
        LALR elisp generate time: 3.086812959
        LALR re2c generate time: 3.118595052
        LR1 re2c generate time: 1086.665714660

compare to bison

set lines_per_subr on wisitoken command line
    optimize for ada_lite, ada

LR1 Ada 1092.640 = 18 min, barely tolerable
    has 1 exccess known conflict;
    101_484 states, 1_367_186 parse actions
    ada_lr1_re2c.parse_table is 2_145_051 lines, 150.5MB
    ada_process_lr1_main.adb 72.7MB, 1_406_676 lines

gnat deadly slow compiling ada_process_lr1_main.adb; too many lines in one subroutine
    o.e.a.s-2 ada_process_lalr_main.adb has 14_089 lines in create_parser - deadly slow
    o.e.a.s-4 ada_process_lalr_main.adb has 16640 lines in create_parser declare, 1280 build_state_n calls
        ~ 13 lines per subr; not worth it.

    in lr1, only 2 lines per state subr in large majority of states; not worth it

    just split lines arbitrarily, at 1000 lines; don't pass State

    lr1 still doesn't compile; strange memory error
        ada_process_lr1_main.adb:696429:30: "" is undefined

    table is already compressed; it's an array of lists
        might be able to share some list tails

    write table to text file
        not Ada syntax; just space separated within one field, semicolon between fields, newline between states



distinquish between reset for lex, reset for execute_actions.
    wisi_grammar don't reset command line args?

review fixmes

propagate to main

better constrain_terminals:
    o.w.s-1
    when constrain_Terminals_Pred True, map (state) => (set of terminals to insert)
    store kernel (set of prod with dot)
    store set of first terminal of minimial_completing_terminal_sequence for each kernel

    apply when error token is :=
        language predicate for when to apply?

add delete to config heap, use when configuration_access is abandoned?

can generate code for LR parser, rather than using table
    see Google drive/Parsing/notes

try packrat indirect recursion solution
    adding head, grow_set to Parser
        must be on a stack for nested recursion?

    docs/indirect_recursion_in_packrat.latex

    add "run grammar.wy input" main for -procedural_*?

    Solution to left recurse is merge into one expression. See how
    that evaluates, make recursive do the same - use memo instead of
    apply rule.

    Need recurse_pos in case possibly empty nonterm is not empty -
    call apply rule if memo empty.

    test with optional unary minus

    warth_left_recurse_expr_1.adb : Test_Parse_Proc

    trying to implement full warth, but it's missing stuff, and some makes no sense
        try https://github.com/alexwarth/ometa-js
        or figure out what it must do; ie understand the algorithm

    try S Medeiros, F Mascarenhas, R Ierusalimschy 2014 Left recursion in parsing expression grammars.pdf
        very similar, mentions "memoization scope", doesn't say how to detect recursion

    or adapt langkit with pre-computed indirect


Implement Redziejowski language hiding check

add packrat to ada-mode s-4
    time, compare to langkit

propagate to main

compare to bison times

implement IELR?
    merges states like LALR, but only if that doesn't introduce new conflicts
        => faster than LR1
        for Ada, would only add 1 state

    IELR and LALR merge states with different lookaheads; it is the lookaheads that determine error correction
        define some other state merging criteria for error correction?

effect of lr1/lalr on mckenzie
    wisi/ada_lite_lalr_run.exe -v 0 -m 1 ../wisi/test/ada_lite_recover.input > ada_lite_lalr_recover.log
    wisi/ada_lite_lr1_run.exe  -v 0 -m 1 ../wisi/test/ada_lite_recover.input > ada_lite_lr1_recover.log

    lr1 finds significantly better solutions significantly quicker

packrat space use
    can free low level derivs; they will never be evaled
        derive condition
        use free list in syntax tree

Wisi syntax is not bison-like; it is BNF augmented with declarations, regexp, actions

add packrat error recover

compile ada_process_main still very slow on Debian
    compare to libadalang; larger files!
    one subprogram per state?w

dragon_4_43_packrat_gen.adb
    --  FIXME: why does Trace need a Descriptor?
    if it's just a convenient place to put it, move up to Parser
        check mckenzie first

delete action from tree.node?
    use table.productions.action
        table.productions not present in lalr no_recover, packrat
        may change to kernels in lalr recover?

    decouples actions from tree
        action params are tree nodes, but action can be declared in wisitoken.parse.

    adacore langkit_support.packrat implements one row of the derivs table
        it only stores 16 most recently computed items; enough to compute a typical subroutine?
            slows down error recovery if have to go back more than 16 (not likely)
            clearly adequate given fast performance
            compare performance to a sparse vector
        libadalang.analysis.parsers Parser_Private_Part_Type stores all the rows

add *, +, ? to wisi_grammar?
    re-write to current syntax?
    closer to Ada appendix P

    * does not need recursion; shorter syntax tree
        require lalr, packrat generate same syntax tree so actions are the same
        option to violate that if not doing one or the other.

reorganize package hierarchy?
    wisitoken - truly common stuff
    wisitoken.parse - parser runtime
        .glr
        .packrat
            https://pdos.csail.mit.edu/~baford/packrat/thesis/
            http://bford.info/packrat/

    wisitoken.generate - represent grammar as production list, generate parse table
        .lalr
        .lr1 (still need to make it faster)
        .ll ?
    wisitoken.wisi - translate .wy files into production list, source code

    wisitoken.lexer - as now

    wisitoken.syntax_tree

constrain_terminals
    cache shift, reduce counts in table
    use dot
        store dot with productions in parse_state; lr1_item
    handle conflicts

    derive from LALR formalism?

update-wisi_grammar

change configure_access to persistent_ref record with container, node components;
    allow ref.delete to abort config; saves copying

use wisi-gen_output_ada_common.adb Append in wisi-output_ada, _emacs.

update NEWS.text

do google search for "ada parser generator"
    add wisitoken to those sites

Fixed size stack speed mckenzie?
    init current to 50 was slightly slower

if full parse fails, go back to successful error recover and find more expensive solutions
    save full config_heap after successful error recover

do multi-cpu parsing?
    benefit depends on density, duration of conflicts
    errors are when speed is noticeable
    make shared_terminals task-safe; protected object for access to .Last_Index, Add
    move lexer data to shared_terminals


cache recover for subsequent parse?

still losing memory?
    possibly Augmented_Token_Array
        deallocation thru root class type?

    run_ada_lite_parser wisi/test/ada_lite.input with gnatmem
        no change in leaks from repeat count 1 to repeat count 2

    run ada on gnatcoll-xref
        allocation root 1 increased by (- 167.88 165.12) = 2.76 kilobytes

    run ada_mode_wisi_parse on test/gnatcoll-xref.adb
        (setq ada-process-parse-exec "c:/Projects/org.emacs.ada-mode.stephe-2/exec_pro/ada_mode_wisi_parse.exe")
        (setq wisi-process--alist nil)
        (setq ada-process-parse-exec "ada_mode_wisi_parse")
        doesn't create gmem.out; using wrong exec!
            need to rerun ada-mode, not just parse
            still wrong! using cached parser wisi-process--alist on label Ada
            still no gmem.out

        running wisi-parse-buffer and watching task manager shows no memory increase. sigh.
        watch memory while editing other files
        wait for compute indent in ada

improve mckenzie
    focus on real use cases that are slow; document in ada-mode/test

    exec_pro/ada_lite_run.exe 10 c:/Projects/org.emacs.ada-mode.stephe-2/test/slow_recover_1.adb
         1: mckenzie enqueue 540, check  69; succeed : 8, (18 : IDENTIFIER, )|OR|/THEN, IF, IDENTIFIER/
         1: mckenzie enqueue 1373, check  181; succeed : 8, (196 : END, )|IDENTIFIER|/IF, SEMICOLON, END, IF, SEMICOLON, END/
        ada_lite-slow_recover_1.profile
            top total time functions:
  0.00      0.09     0.00   231856     0.00     0.00  wisitoken__parser__lr__parser_stacks__element_arrays__finalize__2
  0.00      0.09     0.00   231855     0.00     0.00  wisitoken__parser__lr__parser_stacks__stack_typeDF__2

    try lr1 ada_lite
        slow but tolerable wisi-generate time
            83 rules, 1 actions, 2612 states, 20615 table entries
            0 accept/reduce conflicts, 3 shift/reduce conflicts, 6 reduce/reduce conflicts
        gcc gives up; gnat1.exe: out of memory allocating 4072 bytes
            need to read table from file.

    include current state and current token in cost function:
        cost of "125 | then | elsif" = 0
        125 implied by trying 'then' without preceding 'if'

    config_queue:
        Fibonacci heap

    for each state, pre-compute shortest list of tokens (term/nonterm) to finish each nonterm
        test/terminal_sequences_1.adb
        If any contain next token, queue that fragment.
        use case: start typing a statement, hit enter
            => error correction finishes statement with minimum token count.
            but this case is not slow now;
                'if a = 5 then' => queue 90

    prune duplicate/higher cost configs?
        only needed for higher cost levels

    cost for pop empty nonterm should be zero
        need byte_range in parser
            could get it from semantic_state, unless pending.
        wait til we find a test case that needs it


new test cases:

    ----------
    target : constant string := "
        triggers face parse

    ----------
    Target : constant Unbounded_Wide_String := To_Unbounded_Wide_String "&ndash;";
        two errors close together?


    ----------
   procedure Process_Text_File (File_Name ; in String);
   is
   begin
   end Process_Text_File;
   noticeable delay: mckenzie (max cost 12) enqueue 138756, check  10931; fail
    correct solution is delete ';', insert ':' - cost 8, then later delete ;
    two errors too close together
    check_limit = 2 fixes it; set that in projects.text


----------

some tokens don't count towards check_limit, because we should always check the next token:
    END, DOT
    covers 'end if/loop/case/return/name', name.name

if hit enqueue_limit, use config that has highest check_token_count
    save in config

Emacs_ada does not need descriptor.image?

next change in wisi/test/*.good_parse_table
    don't output mckenzie if default

Merge cursor, parser_node_access

replace wisitoken.token.list with token_array
    or not; changes generate?
    ditto production.list

rename mckenzie to dpa_explore?
    dpa = deterministic parsing automata (McKenzie)
        = Deterministic Pushdown Automata (Wikipedia, Grune)

    aflex uses "dfa" deterministic finite automata
    grune also uses 'deterministic fs automata' (Finite State)

    includes special rules


other mckenzie stuff
    search dpa backwards from elsif; insert 'if then'
        same result as Grune 326 graph search; do that?

        terminal_sequences_2.adb
        states that shift ELSIF:
            168 if_statement <= IF expression_opt THEN sequence_of_statements_opt ^ elsif_statement_list
            187 elsif_statement_list <= elsif_statement_list ^ elsif_statement_list
            need list/tree/hash of states that shift ID, sorted on ID

        'goto state 187' is in 168 on elsif_statement_list

        'goto state 168' is in
            159 if_statement <= IF expression_opt THEN ^ sequence_of_statements_opt * on sequence_of_statements_opt
            need list/tree/hash of states that goto state, sorted on goto state

        'goto state 159' is in 128 'if_statement <=' on shift THEN => insert THEN
            ditto

        'goto state 128' is in 100 'if_statement <= IF ^ ' on expression_opt
            ditto

        'goto state 100' is in many, on 'shift IF' => insert IF, terminate

        search all productions in 'declarations', 'statements'?
            start with final terminal, work backward to first

    test lr1 vs lalr tables
        ada_lite.lr1_parse_table
        10 times the states, table entries

    include actual token count in nonterminal pop cost?
        requires cumulative token count on parser stack

speed up
    profile parsing gnatcoll-xref

    stack compare
        override "=" to start comparison at stack top; most likely to be different

    replace look on ID calling action_for with iterate action list for state

    use tasks for multi-processor?

    compress parser table via default reduce?

    set initial capacity on stacks

    check_reduce does not need to copy stack
        just keep track of current top separately, pointer into reduced top

    during parallel error recovery, if one parser finds a solution, limit cost of others to solution cost + 2?
        doesn't help if first parser fails

automatically augment grammar with empty productions
    anything not a keyword is optional
    may create too many conflicts

wisi-generate accept two output languages
    a lot is shared
    only need ada_output, but it doesn't hurt

wisi-generate lr1 way too slow for Ada
    time lalr generating Ada
    time lr1 generating ada_lite
    time lr1 generating Ada to first 1000 states; increase as it gets better

    implement profile, get data

    lookahead list vs boolean array:

    closure needs:
        use multiple CPUs?

    LR1_Item_Sets needs:
        fast find (set, states)
            => Store state_index in red/black tree sorted on concat prod_count/LHS/RHS/dot position
                first try done; need better key?
                get histogram of full closure set

    need more warm-fuzzy
    command line option
    dots for "adding state n", n every 100
    dots for "lookaheads state n", n every 100?
    dynamically monitor how long things take, keep dot time period constant
        everything slows down as more states added

integrate with emacs module

 build/release_process.text

# end of file
