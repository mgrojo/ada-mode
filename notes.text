General notes on Emacs Ada mode

build/Makefile

o.e.a: release, in use
o.e.a.stephe-1: dead
o.e.a.stephe-2 (with o.w.s-2/o.s_l.sal): work;
o.e.a.stephe-3 (?): emacs module parser (very old)
o.e.a.stephe-4 (?): eglot/ada_language_server
o.e.a.stephe-5 (?): libadalang backend
o.e.a.stephe-6 (with o.w.s-2/o.s_l.sal.stephe-1): incremental parse

(dvc-state-multiple
'((xgit . "/Projects/org.stephe_leake.makerules")
  (xgit . "/Projects/org.stephe_leake.sal")
  (xgit . "/Projects/org.stephe_leake.aunit_ext")
  (xgit . "/Projects/org.wisitoken")
;;  (xgit . "/Projects/elpa") ;; for uniquify-files
  (xgit . "/Projects/org.emacs.ada-mode/")))

(dvc-propagate-multiple
 '(("../org.stephe_leake.sal"  . "../org.stephe_leake.sal.stephe-1")
   ("../org.wisitoken"         . "../org.wisitoken.stephe-2")
   ("../org.emacs.ada-mode"    . "../org.emacs.ada-mode.stephe-6")))

(dvc-state-multiple
'((xgit . "/Projects/org.stephe_leake.makerules")
  (xgit . "/Projects/org.stephe_leake.aunit_ext")
  (xgit . "/Projects/org.stephe_leake.sal.stephe-1")
  (xgit . "/Projects/org.wisitoken.stephe-2")
  (xgit . "/Projects/org.emacs.ada-mode.stephe-6")))

(dvc-propagate-multiple
 '(("../org.stephe_leake.sal.stephe-1" . "../org.stephe_leake.sal")
   ("../org.wisitoken.stephe-2"        . "../org.wisitoken")
   ("../org.emacs.ada-mode.stephe-6"   . "../org.emacs.ada-mode")))

(setenv "GPR_PROJECT_PATH" "c:/Projects/org.wisitoken/build;c:/Projects/org.stephe_leake.sal/build;c:/Projects/org.stephe_leake.makerules")

for test/subdir/ada_mode_parent.gpr
(setenv "GPR_PROJECT_PATH" "C:\\Projects\\org.emacs.ada_mode\\test;C:\\Projects\\org.emacs.ada_mode\\test\\subdir")

for ada_mode_wisi_parse.gpr:
(setenv "GPR_PROJECT_PATH" "C:\Projects\org.emacs.ada-mode;c:/Projects/org.emacs.ada-mode;c:/Projects/org.wisitoken/build;c:/Projects/org.stephe_leake.sal/build;c:/Projects/org.stephe_leake.makerules;d:/Apps/GNAT-gpl_2019/x86_64-windows/lib/gnat;d:/Apps/GNAT-gpl_2019/x86_64-windows/share/gpr;d:/Apps/GNAT-gpl_2019/share/gpr;d:/Apps/GNAT-gpl_2019/lib/gnat;d:/apps/gnat-gpl_2019/x86_64-windows/share/gpr;d:/apps/gnat-gpl_2019/x86_64-windows/lib/gnat;d:/apps/gnat-gpl_2019/share/gpr;d:/apps/gnat-gpl_2019/lib/gnat")

(setq gpr-query-exec "c:/Projects/org.emacs.ada-mode/gpr_query")
 current work
%partial_recursion ;; FIXME: faster compile time while debugging

benchmark

do release of elpa head

publish to elpa
    doc how to use elpa HEAD
    advertize on comp.lang.ada, ada-mode mailing list


incremental parse rationale
    have to compute absolute buffer_pos, line_number for tokens involved in post-parse action at some point
        either shift all during edit_tree, or sum previous during action

    store length in each token
        plus trailing whitespace
        to compute byte_region in post-parse, sum all previous nodes, and cache it
            also cache in nonterms?

    shift approach avoids caching, but we already cache parent links
    cache approach avoids computing nodes after region required for post-parse action => some gain in compute time


Reset-parser only reset current file = delete parse_context

move Trace from Parser to Lexer
    use in Find_Next
    no separate param in tree operations



new test case; insert comment line between two comment lines

consider comments in recover?
    in edit_tree, don't delete virtuals with comments before edit point
    in recover, don't consider delete for tokens with comments

add test case for extra 'end;' that is later matched by user inserted 'begin;'
    'end;' deleted by error recovery in initial parse; correctly restored in final parse?
    mckenzie_recover use parser.deleted_nodes?
    start with ada_mode-extra_end_loop.adb

move wisi.change .. edit_source to wisi_parse_context


add Ada code to decrement byte_pos by one char, use in emacs_common, run_common FIXMEs
    just reference wikipedia

rewrite ada-which-function to use incremental
    test/ada_mode-nominal.ads
        don't set ada-which-func-parse-size if incremental


test/ada_mode-interactive_2.adb
    virtual 'null;' inserted on blank line,
        but fix-error puts it on the next line
        position in error message is wrong
            because set before Insert_Token changed it?

change set_parents to be incremental
    descend tree; if find a parent link, no need to descend that branch
    insert_token also needs to set parents?

build/test.log


 after incremental
test/mixed_unix_dos_line_ends.adb
      coding conversion in send-string strips stray ^M
        only in emacs 28?
        change to utf-8-emacs; still strips.
        write bug report
        change to use null-terminated string?
            then byte, char pos wrong.
            if emacs buffer contains null, it's not valid text (even less valid than stray ^M)

initial parse first do partial parse on visible region, for faster fontification
    also spawn a parser thread to run the full parse.
    if more fontification is required before full parse done, do partial parse on the new visible region.

    on file open:
        start asynchronous full parse, and mark buffer read-only
        if font-lock is requested while full parse is busy, call synchronous partial parse on the requested region
        when full parse is done, clear read-only

error recover fail:
   case Label is
   when virtual_label =>
     case Virtual_Label'(Label) is -- must be a discriminant direct_name, not an expression
         when Virtual_Terminal =>
            null;
         when Virtual_Identifier =>
            Identifier : Identifier_Index; -- index into user data
     end case;
   when nonterm =>
   end case;

incremental error recover requires higher enqueue limit
    test/ada_mode-recover_43.adb
    try lr1 - same error
    simplified; get mckenzie log
        desired solution: (delete '=')(insert ':=') cost 6
        minimal complete is too cheap
            nesting means there is more to complete
            separate minimal_complete heap; always do one from there, one from other.

    test/ada_mode-recover_partial_13.adb
        solution requires one delete, then expensive minimal_complete
        would also benefit from separate min_complete heap (or queue? not many on it)

    ./ada_mode-recover_43.adb.diff
        need separate minimal_complete queue?

    test/ada_mode-recover_partial_07.adb

indent (point)(point) should work for indent-line

lexer_error that is not unbalanced quote is probably an indication of loss of file edit sync
    due to bug in code; don't work around!

Try_insert_quote computes line_region for every dequeue. Check time diff if disable - ada95.ads.
    test lexer_error.length > 0 and in parse_region?

move global indent/user vars to parse_context?
    or parse_data?
    don't send in every parse command, just when they change

log to file, not stdout; don't overload emacs process_io

Debug_parser_count abort on too many parsers

incremental parse
    wisi-show-errors show _all_ errors in buffer
        if parse succeeds, delete errors in regions parsed
        could do that in ada, send current list of errors (aka diagnostics) on request?

    see wisitoken notes, FIXMEs

    redesign navigation?
        on another branch
        don't compute text properties
        always get destination from parser; query-tree
        same for names

    never need begin_indent; compute it from line_begin_char_pos, line_begin_token

    error recover try prev solution
        edit it?

    store shared_stream_index in parse stream element, for faster "continue search in shared_stream"
        or just shared_stream_index for stack_top
            may be broken down?

    nonterm node_ids are not unique
        don't reset in start_parse
            add_nonterm_1 uses tree.nodes.last_index
                which is condensed in Clear_Parse_Streams
                use tree.next_nonterm_node_id, with wrap at 4 chars

    narrow-to-defun
        make everything work, if possible


GNAT CE 2021
    sal, wisitoken tests pass
    ada-mode waiting on gnatcoll-sql/xref accessiblity error fix; AdaCore ticket U618-052

insert_after
    could use active_region to distinguish:
        indent single line - continue code
        indent multiple lines - correct 'end' position

gnat-get-paths called more than once for ada-mode project

Ada-mode add newbie test
    no project
    VC project
    no gpr_query.exe

split org.emacs.ada-mode into .wisi, .ada-mode to match elpa

Make wisitoken compatible with debian stable?

for wisi.texi:
    ----------------------
    gpr-query relies on the cross reference information output by the
    compiler; it assumes the code is compiled.

    When gpr-query reads the compiler output, it caches the results in a
    database.

    This error message indicates that the cached cross reference database does not
    contain the requested symbol. This is due to one of three things:

    - the code has never been compiled, or changed but not compiled

        solution; compile it and try again

    - the code has been changed and compiled since the database was
    refreshed

        solution: refresh the database with C-c C-q (wisi-refresh-prj-cache)

    - the compiler does not output information for this symbol.

        give up

    AdaCore is moving to a different cross reference system, so they are not
    likely to make changes in the compiler output info to support new
    features.
    -----------


    if package install complains about wisi--lexer-error undefined,
    check for old copies of wisi or ada-mode on your load-path.

testimonial:
    Jonty Needham Feb 2021 ada-mode 7.1.4 Ada-mode is even better than it used to be and a real pleasure to use.

Add child menu on prj select - close buffers, select, close project

indent bug:
   procedure Find_New_Line
     (Tree     : in     Syntax_Trees.Tree;
      Ref      : in out Stream_Node_Parents;
      Line     : in     Line_Number_Type;
      Char_Pos :    out Buffer_Pos)
   with Pre => Line > Line_Number_Type'First and Ref.Parents.Is_Empty and
               Ref.Ref.Element = Tree.Streams (Ref.Stream.Cur).Elements.First and
               Ref.Ref.Node = Stream_Element_Lists.Constant_Ref (Ref.Ref.Element.Cur).Node
   --  On entry, Ref.Ref should be Stream_First (Ref.Stream)
   --  Update Ref to node in Ref.Stream that ends Line - 1. Set Char_Pos
   --  to the position of the first character on Line. If not found,
   --  Ref.Ref is Invalid_Stream_Node_Ref, Char_Pos is
   --  Invalid_Buffer_Pos.
   is begin

    comment wrong; ok if precondition is only one line

'with unreferenced' in parameter list
    in gnat pro 21.1
    > So I'd guess that you can put the aspect directly on the parameters in the
    > usual way (but that may require a compiler not available yet; the change was
    > approved in Sept [AI12-0395-1] and Oct [AI12-0398-1]). So, I'd expect the
    > following to work (eventually):
    >
    >  overriding function Expand_Tabs
    >      (This   : Dummy_Editor_Buffer with Unreferenced;
    >       Line   : Editable_Line_Type with Unreferenced;
    >       Column : Character_Offset_Type with Unreferenced) return
    > Visible_Column_Type is (0);
    While you're at it, you probably ought to add any other contexts where
    aspect_specifications are now allowed:

        parameter_specification
        discriminant_specification
        extended_return_object_declaration
        entry_index_specification


    do another diff between annex P and my grammar

find better hippie function for completion-at-point, add to recommended settings

wisi-skel expand
    'if trace': 'if' does not take a block name, so don't expand.

better error message for devault vc project
    "select an ada-mode project"
    or use default ada-mode project?

test completion with ada-mode default project
    joakim@verona.se
    > cl-no-applicable-method: No applicable method:
    > wisi-xref-completion-at-point-table, #s(gnatxref-xref nil
    > "*gnatxref-/home/joakim/pub/all-the-hellos/ada/hello-world/default_.adp*"
    need better error message "no project defined, so can't complete on Ada identifiers"

savannah support tickets work; mention in readme

delete ada-language-version

provide binary for windows and Debian on Savannah as an aide to new users
    AdaCore gnat distributions only have two flavors
    build.sh can just download those
    or some elisp code can

build.sh provide helpful error for missing gnatcoll
    refer to ada-mode.info

use case-fold instead of downcase; turkish locale

merge sal-ada-goto-declaration-start, java-wisi-goto-declaration-start into wisi

gpr_query process symbols in background thread, yeild periodically
    avoid pausing user interface

test/ada_mode-recover_44.adb
    fails with ENQUEUE_LIMIT
        never dequeues the obvious solution (delete =) (insert :=); cost 7
            don't just decrease the cost!
        minimal_complete runs away into the weeds
            limit via solution_count?

    smaller file with just the failing if statement finds a solution
        presence of larger shared_stream gives more to push_back?

in ada_annex_p.wy, wisitoken-grammar-mode:
    wisi-parse-buffer indent doesn't use lisp-indent-buffer

indent recover bug:
               (case Shared_Parser.Tree.Label (Parser_State.Shared_Token.Node) is
               when Shared_Terminal => Shared_Parser.Tree.Shared_Stream --  Missing comma
          when others => raise SAL.Programmer_Error)


.all fix doesn't work with Fedora gcc gnat
    try debian

bug#43742:
    https://www.gnu.org/software/emacs/manual/html_mono/ada-mode.html#Installation
        for core ada-mode; should be deleted, since emacs 27 is current and no longer has ada-mode
            or replace with manual from elpa


    add 'for Driver ("C") use "gcc";' in wisi.gpr.gp package Compiler


navigate bug
    need test
        add 'use type' for 'delete > 0': wisitoken-parse.adb
        ada-declarative-region-start-p handle block_label
            Delete_Non_Grammar :
            declare
               Containing : Base_Token_Array_Var_Ref renames Parser.Tree.Non_Grammar_Var (Parser.Last_Grammar_Node);
               Delete : SAL.Base_Peek_Type := 0;
            begin
               for I in Containing.First_Index .. Containing.Last_Index loop
                  if not Overlaps (Containing (I).Byte_Region, Inserted_Region) then
                     Delete := I;
                     exit;
                  end if;
               end loop;
               if Delete > 0 then

indent bug
    need test
    wisitoken-parse.adb
                       not (Overlaps (Token.Byte_Region - Shift_Bytes, Stable_Region) or
                              (KMN.Inserted_Bytes > 0 and then (Overlaps (Token.Byte_Region, Inserted_Region))) or
                              (KMN.Inserted_Bytes = 0 and then

doc wisi-enable-parse in skeleton-end-hook?


ada2020
    recursion reduces power of Minimal_Complete in error recover too much
        handle recursion in minimal_complete at runtime?

wisi.texi
    $FOO only sees vars defined in the current project
        workaround:
    :compile-env
     (list
       (concat "HOME=" (getenv "HOME")))

    also add comments to code; 'process-environment' specifically excluded.
        $BAR declared in .prj only affect that project, not others.

add .prj syntax: import_env_var=HOME

ada-process.el missing TICK_2 on debian o.e.a.s-5
    because generated by External
    should be ada-process-external.el!

compare_ada_annex_p
    arm_texi use bold underscore for bold, to distinguish keywords
    write arm-info-mode, to apply faces

ada-which-function fails in wisi-ada_annex_p-format_parameter_list.adb

output min_complete fraction in .parse_table - changed when recursion blew up?

navigate bug
    wisitoken-bnf-output_ada_emacs.adb
    point on 'begin' of Create_Ada_Action
    wisi-reset-parser
    sal-ada-next-declaration; ok

    point on 'procedure Translate_Sexp (Line : in String)'
    wisi-reset-parser
    sal-ada-next-declaration; on 'begin'
    sal-ada-next-declaration; no declaration-start found
        nav cache not being overwritten!?

navigate in .wy buffer
    can always parse locally
    only need global for completion list
        background that, like in gpr-query

need better homepage for wisi
    point to user guide, show some screen shots
    populate Savannah 'docs' page?
    set savannah devel status to 'in production'

indent bugs
    State.Kernel (I) :=
      (Production        => Item.Prod,
       Recursion         =>
       --  Item.Recursion is used by at generate time by Delete_Non_Minimal
         ((case To_Index (Item.Dot) is

        comment should align with expression, not discrete_choice
            which is _not_ what wisi-hanging Indenting_Comment True does
            semantics of Indenting_Comment are confused
                Indenting_Token should be the token to which wisi-hanging applies, not the one containing the comment?
                they are the same when there is a comment-pair
                    so keep what we have for consistency?

        test/ada_mode-generic_package.ads
            preceding comment moved when wisi-hanging added to name.

        test/ada_mode-recover_30.adb
            comment after aspect_specification in subprogram_body
                should be indented with 'is'

Don't put name properties - just accum completion list. Set name prop only for which func, add-log - in small region.
    More detailed parse-action?

Separate set of McKenzie params for face parse

ada-format-param-list take option to convert from single line to multi-line
    and vice-versa?
    requires passing that option to Ada reformat code; changes elisp-ada API

gpr-query: mode line Symbols > 100%
    maybe fixed that, but now symbols % is not showing

eldoc
    use gpr_query to provide info
    see eglot

wisi-prj.el use project-switch-project?
    stores projects in a file

test/ada_mode-recover_partial_02_lr1.adb
    add language_fix to push_back to before '('
    add paren to descriptor, add this in -explore?

language_fixes; duplicate test_mckenzie_recover test cases here, to test this code
    selected_component 1

test/ada_mode-recover_06, _10.adb
    not _24
    'end' not inserted on blank line so indent is correct for adding another statement
    could be inserted on comment line.

ada-mode language_fix 'extra begin'
    PRAGMA_ID | USE_ID should be First (declaration)
    output First in ada_process_actions?

LEFT_SQUARE_BRACKET is equiv to LEFT_PAREN at least for aggregates
    update all refs to paren in wisi.adb? wisi-ada.adb? -mckenzie_recover-ada.adb?

when move to new gnat, need to fix compilation errors
    assume wisitoken is broken
    need different compile-env for compiler, xref
    improve wisi-prj

fix "string not terminated by end of line" bug
    use parser to fontify strings

    same for unterminated placeholder; use parser to fontify comments
        ada_mode-placeholders.adb

move EXE_EXT, GNAT_EXE, INSTALL_BIN into makefile.conf

fix blinking fringe mark when type "--"
    delay the display of the fringe mark (using a timer), without delaying font-lock itself

paper_2019.latex
    ada-mode use of wisitoken parser
    metric for comparing error correction
        argh. redo using lr1 for wisitoken-tokens
            really slow loading lr1 table for each file; loop on files in dump_wisitoken_corrected

        sum_diff_lengths.adb
        file_count: 55
        correct-wisitoken:  total size: 14325
        correct-libadalang: total size: 52040

    excellent examples:
        recover_02: wisitoken inserts "end; end;" prematurely
        recover_05: libadalang deletes entire partial record type declaration; wisitoken finishes it
        recover_07: libadalang splits an assignment rather than insert a semicolon.
        recover_08: wisitoken inserts "end;" prematurely
        recover_15; wisitoken inserts "end loop;" just right.
        recover_16; wisitoken inserts "end if;" just right.
        recover_18; libadalang deletes start of two loops; can't get indentation right.
        recover_21: libadalang deletes 'elsif', 'else' instead of inserting 'if then'; can't get indentation right.
        recover_deleted_procedure_1: libadalang deletes lots of code
        recover_end_1: libadalang deletes 'procedure'
        recover_string_quote_1, 2, 3: libadalang does better

Do spark on mckenzie-base

other ada 202x syntax
    http://www.ada-auth.org/standards/ada2x.html /5
    http://www.ada-auth.org/standards/2xrm/html/RM-0-2.html Language Changes
        test/ada_mode-ada2020.adb
        put features not supported in Ada Community 2020 (if any?) in ada_mode-ada2020_more.adb,
            move them to -ada2020.adb when Ada Community 2021 available

        parallel
             parallel loops 5.5 3/5, 4/5 [parallel [chunck]] for
             iterator_filter 5.5 :== when condition
             parallel blocks 5.6.1
             parallel container iteration

             parallel reduction
                subset of parallel container/array iteration

        container aggregate 4.3.5 []

        lightweight iteration => procedure iterators

        reduction expression 4.5.10 attributes Reduce, Parallel_Reduce
            no new syntax, just new semantics

        iterator filter

    declare_expression
        http://www.ada-auth.org/cgi-bin/cvsweb.cgi/ai12s/ai12-0236-1.txt?rev=1.10

    process all acats tests?
        http://www.ada-auth.org/acats.html
        not avail for 202x yet
        d:/Archive/GNAT/ACATS41.ZIP

present spark counter example info
    c:/Projects/org.stephe_leake.sal/build/obj/gnatprove/prove_bounded_definite_vectors_sorted.spark
        JSON format
    <gnat>share/gps/plug-ins/spark2014.py

bugs/suboptimal:
    ada_mode-recover_02.adb
        inserts 'end; end;' prematurely, ending package; next statement is legal
            but there's no way to know that without looking farther ahead.
        minimal complete is too cheap?
        review all error corrections to see if there's a way to optimize?

    ada_mode-recover_09,adb
        inserts 'if then if then end if;' instead of 'if then'

    ada_mode-recover_10.adb
        allow "of" where "in" should be; common mistake
            produce warning?

        missing 'end' inserted _after_ 'end check_rhs_order'; should be before

ada-build.el
    add spark commands: prove { project | file | function/procedure | assertion at point}

gpr_query.adb process_overridden should return method def for all ancestor types, not just parent

figure out how gnatfind finds ada_mode-separate_procedure body
    report bug: -f not respected (test/ada_mode.ads)
    improve gpr_query to find separate body

move dvc-kill-all-review/workspace to wisi?
    add delete projects in the workspace?
    delete project call wisi-kill-xref, wisi-kill-parser

gpr_query does not see libraries?
    need clear example; libadalang mains vs langkit?
    compare to GPS, gnatinspect

align region too large:
   case A is
      when 0            =>
         --  plain identifier
         RHS.Tokens.Append
           ((Label      => +"",
             Identifier => +Get_Text (Data, Tree, Tree.Child (I, 1))));
   end case;

    ada-align groups preceding comment lines with declarations

    lsp language server can do align as part of "format"

    add wisi refactor case (similar to format_param_list)

libadalang/lsp backend
    o.e.a.stephe-4 on Debian, for gnatpro 20
    use ada_language_server via lsp?

    gnu elpa eglot
        eglot-x has extended xref for ccls server

    lsp can't do grammar actions or org source blocks; no associated file!
        eglot issue #523

    https://github.com/microsoft/language-server-protocol/issues/18 semantic info for highlight = face

    Convert wisitoken syntax tree to adalang - plug in to Lang server

    use lang server infrastructure as wrapper around wisitoken ada parser/wisi post-process

    use wisitoken parser with GPS
        add incremental parsing
        ebooks/Parsing/Wager, Graham 1998 Efficient and Flexible Incremental Parsing.pdf
        new error correction metric; minimize tree change span

AdaCore tickets:
    Q406-078 2017-Aug : AdaCore (Nicolas Setton, Arnaud Charlet)
        mentions not fixing old GPS engine in favor of libadalang;
        wait for libadalang to introduce new config flags. Phippe
        Waroquiers wants GPS & Emacs indentation to be the same,
        and match Eurocontrol style.

    R801-052 2018-Aug : Stephe mentions transforming libadalang
        tree to wisitoken tree, using wisitoken indent code.
        AdaCore says GPS not using libadalang for indentation yet.

    R821-023 2018-Aug .. 2018-Dec : gnatpp using libadalang, but it is not ready for indent.

    SA31-041 2019-Oct

time on huge eurocontrol files c:/eurocontrol
    if need more than one source file, use current buffer or disk file?
    keep one context active, for the current project?
        see playground.adb in libadalang source

pp-command_lines.ads Name_Casing Name_Case_As_Declared - requires name resolution
    too slow?

compute reverse parse lr table, use that to extend parse backwards to find reasonable start point

improve test/ada_mode-recover_32.adb
    recover gets CONSTRAINT_ERROR, config ops full

speed up lalr compile
    decrease subprog size?

replace ada.wy with ada_annex_p.wy
    too many conflicts
    ada.wy:774: ;; FIXME: | digits_constraint
    ada.wy:775: ;; FIXME: | delta_constraint
    ada.wy:1015:;; FIXME: leaving out [renaming] [aspect_specification]
    ada.wy:1245:      ;; FIXME: indentation of comment after 'is' (and 'with' in
    ada.wy:1929: ;; allocator, FIXME: leaving out subpool_specification.

Adjust-indent loop on each token, handle 'end <keyword>'

Eurocontrol/debbugs bugs
https://debbugs.gnu.org/cgi/pkgreport.cgi?package=emacs;include=subject:ada-mode
    33744 indentation of subexpressions
        https://debbugs.gnu.org/cgi/bugreport.cgi?bug=33744
        need to identify subexpressions
        test/hanging.adb need more test cases
        waiting for money
            procedure Operator_Indentation is
            begin
              if B
                   or else C
                     > 2 -- indented relative to "or else"
              then
                null;
              end if;
            end Operator_Indentation;

do module interface
    see if it's faster; should be

    add re2c_emacs lexer, that handles emacs raw buffer text
        that lets the emacs buffer be the text buffer, avoiding copy/encode/bookkeeping

    use partial and incremental parse
        _only_ parse on demand, mininal amount of text
        maintain list of parse trees

    add parser task, one per buffer
        parse ada_mode.ads for face while finishing indent ada_mode.adb

        queue parse requests for one buffer
            first parse builds syntax tree
            use it for all post-parse actions

packrat
    need to override wisitoken.parse.put_errors for emacs process interface
        derive an Emacs_Parser type?

        or add abstract error_list, change wisi_runtime.put_errors to use that

        using Parser.Put_Errors for now

    langkit packrat is significantly faster than wisitoken lalr
        because of generated code, not table interpreter?
            try generated code for lalr
                lose error correction?
        use non-error-correcting packrat as primary parser, error-correcting lalr as fallback

    generate, compile packrat speed?
        ada_packrat_process_main.adb (31347 lines) compiles _way_ faster than ada_process_main.adb (13692 lines)

make-subprogram-body should strip aspects.

compute align in grammar actions
    align-list action on ':', '=>' etc

support variable pitch fonts
    for indent use (put-text-property 118 120 'display '(space :width (10))))

add wisi-forward-anchor, use for comments after 'is', 'when' in record type

 benchmarks:
    FIXME: measure speed of small file
    update only in o.e.a

    build/Makefile
        comment out 'export Standard_Common_Build := Debug'
        make recursive-clean build_ada_executables

d:/Apps/GNAT-gpl_2016/gnatcoll-gpl-2016-src/src/sqlite/gnatcoll-xref.adb
    copied to c:/eurocontrol/gnatcoll-xref.adb
    7252 lines, 29461 tokens, 254989 characters

wisitoken-bnf-generate
    $WISITOKEN/wisitoken-bnf-generate.exe --time ada_annex_p.wy

    04 mar 2018
        o.e.a.s-2 12.919s
        o.e.a.s-4 24.398s, 24.625s

    12 Apr 2018
        o.e.a.s-4 16.136s

    23 May 2018
        11.967s, 12.035s

    25 Jul 2018
        trees in lr1_items search, -O3
        LALR elisp generate time: 3.290167687
        LALR re2c generate time: 3.309398246
        LR1 re2c generate time: 602.235431713
        lr1 text_rep size:

    26  Jul 2018
        don't loop on all token_ids; loop on set
        LALR elisp generate time: 0.445727505
        LALR re2c generate time: 0.450525800
        LR1 re2c generate time: 31.202567095
        lr1 text_rep size:

    1 Aug 2018 replace Constrain_Terminals with Minimal_Complete_Actions
        LALR elisp generate time: 0.472614643
        LALR re2c generate time: 0.480273867
        LR1 re2c generate time: 31.820868201
        lr1 text_rep size:

    30 Jan 2020 ada-mode 7.0.1
        LALR re2c generate time: 0.689046474
        LR1 re2c generate time: 37.564196185
        lr1 text_rep size: 50_322_028

    14 May 2020 ada-mode 7.1.1
        GNAT Community 2019
        LALR re2c generate time: 0.520925872
        LR1 re2c generate time: 62.148224014
        lr1 text_rep size:
        LALR   0 accept/reduce conflicts, 34 shift/reduce conflicts, 17 reduce/reduce conflicts
             224 rules, 230 user actions, 37 checks, 1293 states
        LR1    0 accept/reduce conflicts, 4750 shift/reduce conflicts, 24 reduce/reduce conflicts
             224 rules, 230 user actions, 37 checks, 119354 states

    25 Jun 2020 Ada 2020 grammar, hash-table/red-black tree for collisions
        GNAT Community 2019
        before hash table, tree depth was log_2 (states) ~ 18, not bad.
        LR1 hash table states: 469463 rows: 124087 max_row_depth: 9 average_row_depth: 2
        LR1 initial item_sets time: 163.506717162

    29 Jun 2020 parallelize LR1_Item_Sets
        initial item_sets time: 103.791729848, 108.724074927

    ada_annex_p.wy LR1:
    4 Jul 2020 all Ada 2020, no actions:
        states: 444034, 22107 states with conflicts
        0 accept/reduce conflicts, 41267 shift/reduce conflicts, 1616 reduce/reduce conflicts
        initial item_sets time: 126.852255667

    27 Nov 2020 removed some conflicts, restore full recursion, cache recursion between LALR, LR1
        translate to bnf time: 0.076125248
        compute full recursion time: 27.081835029
        compute parse table time: 0.491019990
        compute minimal actions time: 0.005436412
        LALR re2c generate time: 48.579241802
        initial item_sets time:-5.803985594
        add_actions time: 8.118982585
        compute minimal actions time: 1.863305087
        compute conflicts time: 0.311614998
        LR1 re2c generate time: 121.018392728

mckenzie recover
    ./run_ada_lr1_parse.exe parse indent test/ada_mode-recover_partial_02_lr1.adb --enqueue_limit 120_000 --check_delta 20_000 --verbosity "debug=1 time=1 mckenzie=1" --task_count 8
        record all recover sessions
            start all parsers
            end all parsers 'succeed/fail' line
        subtract times: post-recover - pre-recover

    12 Jul 2019 ada-mode 6.1.1
        0: succeed 2, enqueue 110, check  14, cost:  2
        time 0.003358967

        1: fail; enqueue limit ( 120000 cost 11)
        1: fail, enqueue 120063, check  11824, max shared_token  64
        0: succeed 2, enqueue 73734, check  7599, cost:  8
        time 0.680450032

    o.e.a-m just_pushed_back_or_inlined expanded
        0.671804168, 0.673667911, 0.671176628

    "", drop token_index compare
        0.678247599, 0.670705783, 0.678376354

    o.e.a-m.s-4 config_heap.pre_add
        0: succeed 2, enqueue 110, check  14, cost:  2
        time 0.003585515

        0: fail; enqueue limit ( 120000 cost 10)
        1: succeed 2, enqueue 73734, check  7599, cost:  8
        time 0.665732656, 0.661565665, 0.660932083, 0.668397249 - not worth it

    o.e.a-m.s-4, o.w.s-2 binary search action_for
        0: succeed 2, enqueue 110, check  14, cost:  2
        time: 0.003279674

        0: fail; enqueue limit ( 120000 cost 11)
        1: succeed 2, enqueue 73734, check  7599, cost:  8
        time: 0.665491758

        after propagate:
        0.695314665, 0.691568300, 0.714005333

    binary search goto_for
        0.696081911, 0.727982272, 0.692549635 -- no slower, no faster; keep for clean

    sal.list in sal.unbounded_queue
        0.679426409, 0.703120410, 0.711440799

    use spark bounded_queue; no controlled
        0.703130227, 0.677916459, 0.674938851

    in bounded_queue, add suppress (all_checks), explicit check for full
        0.768971400, 0.677694819, 0.699692724, 0.680185725

    spark bounded_stack, suppress (all_checks)
        0.475089053, 0.471345331, 0.470334167 yes!

    14 Jun 2020 ada-mode 7.1.3
    ;;  1: fail; total enqueue limit ( 120000 cost 9)
    ;;  1: fail, enqueue 57219, check  5433, max shared_token  64
    ;;  0: succeed 2, enqueue 62819, check  6409, cost:  7
        0.315512031

    13 Jul 2020 devel branch:
        increase to enqueue_limit 500_000, check_delta 100_000
        LR1:
            task_count 1
            ;; 2020-07-13 21:11:34.04 pre-recover 2 active
            ;;  1: fail; total enqueue limit ( 500000 cost 11)
            ;;  1: succeed 7, enqueue 441907, check  41699, cost:  11
            ;;  0: succeed 2, enqueue 58102, check  5805, cost:  7
            ;; 2020-07-13 21:11:36.43 post-recover 9 active, 2.387545121
            2.39 seconds

            ;; 2020-07-13 22:15:10.49 pre-recover 2 active
            ;;  8 parallel tasks
            task_count 8
            ;;  0: fail; total enqueue limit ( 500000 cost 10)
            ;;  0: succeed 8, enqueue 441988, check  41725, cost:  11
            ;;  1: succeed 2, enqueue 58102, check  5805, cost:  7
            ;; 2020-07-13 22:15:11.97 post-recover 13 active, 1.480531181
            1.48 seconds, 1.07 seconds

            (/ (- 2.39 1.48) 2.39) = 0.389 not very good.

        LALR:
            task_count 1:
                ;; 2020-07-13 22:43:09.05 pre-recover 1 active
                ;;  0: succeed 2, enqueue 118, check  14, cost:  2
                ;; 2020-07-13 22:43:09.05 post-recover 2 active, 0.001850146
                ;; 2020-07-13 22:43:09.05 pre-recover 4 active
                ;;  4: fail; total enqueue limit ( 500000 cost 11)
                ;;  1: fail; total enqueue limit ( 500000 cost 11)
                ;;  4: fail, enqueue 283434, check  26607, max shared_token  64
                ;;  1: fail, enqueue 122328, check  11820, max shared_token  64
                ;;  0: succeed 1, enqueue 43714, check  4420, cost:  7
                ;;  5: succeed 2, enqueue 50538, check  5087, cost:  7
                ;; 2020-07-13 22:43:11.54 post-recover 5 active, 2.491979429
                0 seconds + 2.49 seconds

            task_count 8
                ;; 2020-07-13 22:46:15.31 pre-recover 4 active
                ;;  4: fail; total enqueue limit ( 500000 cost 11)
                ;;  1: fail; total enqueue limit ( 500000 cost 11)
                ;;  5: succeed 2, enqueue 50538, check  5087, cost:  7
                ;;  4: fail, enqueue 283458, check  26708, max shared_token  64
                ;;  1: fail, enqueue 122328, check  11820, max shared_token  64
                ;;  0: succeed 1, enqueue 43714, check  4420, cost:  7
                ;; 2020-07-13 22:46:16.47 post-recover 5 active, 1.159587153
                1.16 seconds, 1.12 seconds

    13 Jul 2020 incremental parse devel branch (main branch similar):
        --debug_mode does not show time; use --repeat_count 2
        ;; parser 0: State 14545 Current_Token (LEFT_PAREN, (859 . 859)) Resume_Token_Goal 51
        ;;  0: succeed 2, enqueue 217, check  21, cost:  2

        ;; parser 1: State 2649 Current_Token (RIGHT_PAREN, (906 . 906)) Resume_Token_Goal 66
        ;; parser 0: State 1439 Current_Token (RIGHT_PAREN, (906 . 906)) Resume_Token_Goal 66
        ;;  1: succeed 2, enqueue 1616, check  148, cost:  1
        ;;  0: succeed 2, enqueue 2528, check  204, cost:  1

        ;; parser 0: State 14545 Current_Token (LEFT_PAREN, (859 . 859)) Resume_Token_Goal 51
        ;;  0: succeed 2, enqueue 217, check  21, cost:  2

        ;; parser 1: State 2649 Current_Token (RIGHT_PAREN, (906 . 906)) Resume_Token_Goal 66
        ;; parser 0: State 1439 Current_Token (RIGHT_PAREN, (906 . 906)) Resume_Token_Goal 66
        ;;  1: succeed 1, enqueue 1394, check  123, cost:  1
        ;;  0: succeed 2, enqueue 2533, check  216, cost:  1
        total parse time per iteration 0.022099088

    27 Nov 2020 incremental parse branch, syntax_trees never copies nodes, ada-mode tests pass
        ;; parser 2: State 20013 Current_Token (-1, 47:(LEFT_PAREN, (978 . 978))) Resume_Token_Goal 51
        ;;  2: succeed 2, enqueue 183, check  19, cost:  2
        time : 0.01 seconds

        ;; parser 5: State 3141 Current_Token (-1, 62:(RIGHT_PAREN, (1025 . 1025))) Resume_Token_Goal 66
        ;;  5: succeed 6, enqueue 7649, check  628, cost:  5
        ;; parser 4: State 3108 Current_Token (-1, 62:(RIGHT_PAREN, (1025 . 1025))) Resume_Token_Goal 66
        ;;  4: succeed 2, enqueue 1772, check  141, cost:  3
        ;; parser 3: State 3107 Current_Token (-1, 62:(RIGHT_PAREN, (1025 . 1025))) Resume_Token_Goal 66
        ;;  3: succeed 2, enqueue 1769, check  141, cost:  3
        ;; parser 2: State 3140 Current_Token (-1, 62:(RIGHT_PAREN, (1025 . 1025))) Resume_Token_Goal 66
        ;;  2: succeed 6, enqueue 7554, check  622, cost:  5
            time: 0.22 seconds

navigate, face, indent
    make -r benchmark
        copy per iteration values here
        uses gnatcoll-xref.adb

    27 Nov 2017 - compute actions in Ada
        1.377199 seconds 3 gcs 6560 responses 0.509915 wait
        1.523548 seconds 2 gcs 6560 responses 0.518090 wait

    12 Apr 2018 - syntax table
        navigate 1.411872 seconds 4 gcs 6560 responses 0.352224 wait
        face     1.507372 seconds 5 gcs 2145 responses 0.319860 wait
        indent   1.447788 seconds 1 gcs 7251 responses 0.350474 wait

    23 May 2018
        navigate 1.542892 seconds 4 gcs 6560 responses 0.473158 wait
        face     1.645698 seconds 4 gcs 2145 responses 0.452539 wait
        indent   1.603725 seconds 1 gcs 7251 responses 0.491922 wait

    2 Sep 2018
    using lalr
        navigate 0.985181 seconds 4 gcs 6568 responses 0.248143 wait
        face     1.119776 seconds 4 gcs 2145 responses 0.246759 wait
        indent   1.033525 seconds 1 gcs 7251 responses 0.251972 wait
    lr1:
        navigate 0.968994 seconds 4 gcs 6568 responses 0.231818 wait
        face     1.085459 seconds 4 gcs 2145 responses 0.219220 wait
        indent   1.020811 seconds 1 gcs 7251 responses 0.237752 wait

    12 Jul 2019 ada-mode 6.1.1
        navigate 1.383730 seconds 6 gcs 7431 responses 0.241632 wait
        face     1.490733 seconds 8 gcs 2151 responses 0.215659 wait
        indent   1.382439 seconds 3 gcs 7252 responses 0.241366 wait

    4 Jun 2020 ada-mode 7.1.3
        navigate 1.292225 seconds 5 gcs 6249 responses 0.254697 wait
        face     1.401879 seconds 7 gcs 2151 responses 0.215092 wait
        indent   1.286356 seconds 2 gcs 7252 responses 0.223322 wait

    28 Sep 2020 ada_annex_p, allocated syntax tree
        navigate 1.411824 seconds 5 gcs 6240 responses 0.362340 wait
        face     1.567617 seconds 7 gcs 2149 responses 0.345864 wait
        indent   1.435476 seconds 2 gcs 7252 responses 0.366811 wait

    27 Nov 2020 syntax tree never copies nodes
        navigate 1.093543 seconds 5 gcs 6240 responses 0.186905 wait
        face     1.334711 seconds 8 gcs 2149 responses 0.182050 wait
        indent   1.229119 seconds 2 gcs 7252 responses 0.204471 wait

incremental parse
    25 Feb 2021 not fully working
    build/benchmark-incremental.el
    deindent/indent one line

    in debug.adb (5 lines, 1 declaration):                      0.001135 seconds
    in gnatcoll-xref.adb (7252 lines, 250 declarations):        0.057797 seconds
    in regulation-iflight.adb (11251 lines, 189 declarations):  0.098231 seconds


 wisi work

disable or use electric-indent-post-self-insert-function
    called during ada-indent-newline-indent
    on post-self-insert-hook
        use that for ada-mode capitalization?

ada-goto-declaration-start
    fails on task declaration
        only a problem if misusing C-c C-b ada-make-subprogram-body to make a task body
        C-x C-e skeleton expand works fine

        ada-make-subprogram-body should throw an error if it's not on a
        _subprogram_ spec, and recommend C-c C-e in the error message.

        but also fails on
        task body TA is
        begin
           null;
        end TA;

        fix the latter, see if it fixes ada-make-subprogram-body
            if not, make it throw an error.

    fails on separate (P) procedure X;
        C-c C-e works

        but also fails on
        separate (P)
        procedure X;
        is
        begin
        end X;

        fix the latter, see if it fixes ada-make-subprogram-body
            if not, obsolete that.

add "show all overloads" in navigate
    leave out file, line, col from gpr-query id

refactoring
    rename entity:
        use xref to rename all uses (with/without confirm)

    change parameter_result_profile
        make same change in all overrides
        offer to walk thru all uses

    promote primitive subprogram-local variable to type component

    move primitive from parent to child class

    extract subprogram
        from Eclipse
        highlight lines of source
        prompt for name
        it guesses parameter_result_profile

 debug hints, relevant files
https://debbugs.gnu.org/Developer.html
https://debbugs.gnu.org/server-control.html
https://debbugs.gnu.org/cgi/pkgreport.cgi?package=emacs;include=subject:ada-mode

one ELISP="(setq-default wisi-incremental-parse-enable t save-parser-log \"../debug-2.log\" wisi-parser-verbosity \"debug=1\")" ONE_TEST_FILES=ada_mode-*.adb

RUNTEST=run-indent-test-lalr-process-gpr_query.el ELISP="(setq-default wisi-incremental-parse-enable t wisi-mckenzie-task-count 1 save-parser-log \"../debug-2.log\" wisi-parser-verbosity \"debug=1\" debug-on-error t)" ada_mode-interactive_2.adb.debug

test-ada-lalr-process-gpr_query ELISP="(setq-default wisi-incremental-parse-enable t wisi-process-time-out 10.0)"

two RUN_ARGS="command_file debug.cmd > debug.log"

    *.debug RUNTEST=run-indent-test-lalr-process-gpr_query.el ELISP="(setq-default wisi-incremental-parse-enable t wisi-mckenzie-task-count 1 save-parser-log \"../debug-2.log\" wisi-parser-verbosity \"debug=1\")"

in debug.cmd:
mckenzie_options task_count=1
save_text_auto debug_edited
verbosity debug=1 action=3
verbosity mckenzie=1 parse=2 incremental=3 lexer=1

ada-mode option defaults:
--lang_params "3 2 0 0 -3 3 2 0 2 3 2 2 1"

end-name-optional nil:
--lang_params "3 2 0 0 -3 3 2 0 2 3 2 2 0"

wisi.adb insert_token
    p data.descriptor.image (tree.shared_tree.nodes.elements (token).id).all

gdb run_ada_parse
    syntax_trees.adb
        Find_New_Line
        show_id node.id
        show_id child.id
        p line
        p child.line
        p child.line_last
        p child.byte_region

        Update_Cache
        show_id node.id
        show_id child.id
        p child.byte_region
        p child.line
        p child.line_last

    wisi.adb
        reduce
        show_id nonterm.id
        show_id token.base.id
        p token.base.byte_region
        p token.aug

    in wisitoken-wisi_runtime.adb Indent_Action_0:
        break on 'if token.first_indent_line then' line 1050
        call wisitoken.syntax_trees.id (tree, nonterm)
        p data.descriptor.image ($)
        p i
        p data.descriptor.image (token.id)
        p token.line
        p token.col
        p pair
        p data.indents.elements.ea(token.line)

    in wisitoken-semantic_state.adb Reduce
        break on 'nonterm.paren_state := ' line 334
        p descriptor.image (nonterm.id)
        p i
        p descriptor.image (aug_token.id)
        p aug_token
        p nonterm

to change process executable for all current and future buffers:

    in any *.adb buffer:
    (setf (wisi-process--parser-exec-file wisi--parser)
      "c:/Projects/org.emacs.ada-mode.stephe-2/ada_mode_wisi_parse.exe")
    M-x wisi-kill-parser

    to undo:
      (setf (wisi-process--parser-exec-file wisi--parser)
        "ada_mode_wisi_parse.exe")
    M-x wisi-kill-parser

    if *-process.el has changed:
    in *-process.el: M-x eval-buffer
    in *.<lang> buffer:
    (wisi-kill-parser
    (setq wisi-process--alist nil)
    M-x <lang>-mode

Edebug displays

in wisi-process-parse--Reduce_Stack:


in wisi-parse-reduce:
(setq edebug-eval-list
 '(nonterm
   tok
   first
   ))

in wisi--indent-token-1:
(setq edebug-eval-list
 '((wisi-ind-indent wisi--indent)
   wisi-nterm
   i
   delta
   indent
   ))

in wisi-indent-action:
(setq edebug-eval-list
 '((wisi-ind-indent wisi--indent)
   wisi-nterm
   wisi-tokens
   deltas
   wisi-token-index
   tok
   token-delta
   comment-delta
   ))

wisi-indent-region:
(setq edebug-eval-list
 '((wisi-ind-indent wisi--indent)
   anchor-indent
   i
   indent
   new-indent
   ))

use elp (emacs lisp profiler)?
    (with-current-buffer (find-file-noselect "~/src/xdisp.c")
      (elp-instrument-function 'c-beginning-of-defun)
      (goto-char (point-max))
      (condition-case nil
          (while (beginning-of-defun) nil)
        (error nil))
      (elp-results))

(progn (profiler-start 'cpu) (time-it 'wisi-parse-buffer 10) (profiler-report) (profiler-stop))
    B - profiler-report-render-reversed-calltree shows low-level time hogs

attach gud-gdb to running emacs: attach <process id>
    source emacs/src/.gdbinit
    xbacktrace shows lisp backtrace

"kill -USR2 <emacspid>" which should also drop you into the (elisp?) debugger.

(browse-url "c:/Projects/arm_info/org.adaic.arm_form/build/html/arm2012/RM-P.html")
(info "(aarm2012)Annex P" "*info Annex P*")
http://www.ada-auth.org/standards/
(info "(elisp)Parser State" "*info syntax-ppss*")
"c:/home/stephe/Backup/eBooks/Dick Grune/Parsing.pdf" [dickgrune]

http://savannah.gnu.org/projects/emacs/

http://git.savannah.gnu.org/cgit/emacs.git/tree/README?h=elpa
http://elpa.gnu.org/

https://www.dropbox.com/sh/7jr3vbv9tm1zod0/jPuvfrJAe8
    w32 builds of cutting-edge emacs branches, pretests

ftp://alpha.gnu.org/gnu/emacs/pretest/
    untar with cygwin
    in mys32 under emacs:
        cd /c/Projects/emacs/emacs-24.3.9x
        ./configure --prefix=/mingw32
        make
        # don't make install, just run from the build dir

 git config for elpa checkout
in ~/.gitconfig:
    # 15 Feb 2016: ELPA has an object that fails this check; only need
    # to disable (set to false) when pull a full repository (that includes that
    # object)
        fsckObjects = false

[core]
	repositoryformatversion = 0
	filemode = false # don't set exec bits
	bare = false
	logallrefupdates = true
	ignorecase = true
[remote "origin"]
	fetch = +refs/heads/master:refs/remotes/origin/master
	push  = +refs/heads/master
	url = stephen_leake@git.sv.gnu.org:/srv/git/emacs/elpa.git
[branch "master"]
	remote = origin
	merge = refs/heads/master

 release process
split org.emacs.ada-mode into .wisi, .ada-mode to match elpa
    delete files that are not used; wisi packrat, libadalang, etc

keep status in ~/projects.text
do wisitoken release ../org.wisitoken/build/release_process.text

update benchmarks above

generate ada.wy LR1 with --task_count 1 in build.sh; not in git

https://en.wikipedia.org/wiki/Comparison_of_parser_generators

add wisitoken grammar doc to wisi package
    doc Ada grammar actions

provide wisitoken_rules.make
    for %.re2c etc

find info cross reference checker; ref to wisi from ada-mode was wrong.

(dvc-status ".")

# uninstall elpa packages before change version
build/Makefile uninstall-elpa

elpa builds info; don't check them into .git
    specify .texi files in elpa-packages

to test local elpa tarball, elpa make build/ada-mode should work


check for ELPA patches by others
    (dvc-status "/Projects/elpa")
        revert local changes in ada, wisi, ada-ref-main; commit in uniquify
    (dvc-pull "/Projects/elpa")
    (dvc-sync-review "/Projects/elpa")
        update
        clean, quit sync
    cd c:/Projects/elpa
    git log -2 -- packages/wisi
    git log -2 -- packages/ada-mode
    git log -2 -- packages/ada-ref-man
    git log -2 -- packages/uniquify-files
    if changes:
        (dvc-log "/Projects/elpa/packages/<dir>/<file>")
        apply changes to current

check emacs buglist
    http://debbugs.gnu.org/cgi/pkgreport.cgi?package=ada-mode
    to update a bug: nnn@debbugs.gnu.org
        subject: from bug title, for people who rely on that.
    if fixed in devel sources, add 'pending' tag:
        control@debbugs.gnu.org
        tags nnn + pending

check for latest Emacs release
    http://ftp.gnu.org/gnu/emacs/windows/

run all tests without elpa:
    build/Makefile elisp
    build/Makefile byte-compile-clean

    - Windows Emacs master, current gnat
    - Windows Emacs 25.3, current gnat
    - Windows Emacs 26.1, current gnat
    - mingw64 gnat

    #dvc-state-multiple above
    (dvc-push)
    - Debian testing, Emacs master, current gnat (community or pro)
    - Debian testing, Emacs master, Debian gnat
        su -l root
            aptitude update
            aptitude full-upgrade --without-recommends
        gnat
        libgnatcoll-xrefnn-dev
        gprbuild

compare:
    build stuff to compare with previous release in elpa:
        build/Makefile pub

    (list-packages)
        install previous ada-mode, wisi, ada-ref-man from public ELPA for diffs
        change versions in compares below to match installed versions.

    (ediff-directories "~/.emacs.d/elpa/wisi-3.1.1" "/Projects/elpa/packages/wisi" nil)
        NEWS-wisi.text
            copyright date
            add release date
            add new features

    (ediff-directories "~/.emacs.d/elpa/ada-mode-7.1.2" "/Projects/elpa/packages/ada-mode" nil)
        NEWS-ada-mode.text
            add release date
            add new features
            list fixed bugs

    (ediff-directories "~/.emacs.d/elpa/ada-ref-man-2012.5" "/Projects/elpa/packages/ada-ref-man" nil)
        /Projects/org.adaic.arm_form/NEWS
            add release date, new features

bump versions
    Gnu ELPA requires single digits between dots in versions

    bump if _any_ changes other than autoloads, so ELPA package handler knows to update
        bump third digit for bug fixes, minor features, no user-incompatible changes
        bump second digit for major features
            - GPS indentation engine add/delete
            - partial parse
            - delete elisp lexer
            - wisi use virtual tokens in indent

        bump first digit for really major changes
            ada-mode:
            - 5 use parser
            - 6 compute indentation in grammar actions, external parser with error correction
            - 7 move lots of stuff to wisi; many ada-* variables, functions deleted.

            wisi:
            - 3 project.el integration

    emacs_wisi_common_parse.ads
        (should have been changed already, but verify)
        Protocol_Version if this file changed, or
        wisi-process-parse.el -send-parse, -send-refactor, -execute
        changed; ie, if installed parser must be replaced on upgrade
        or downgrade

    wisi-ada.ads
        (should have been changed already, but verify)
        Language_Protocol_Version if this file changed
        ie, if installed parser must be replaced on upgrade or downgrade

    wisi.el
        Version:

    wisi.texi
        @title
        @node top

    README-wisi
        first line

    build.sh
        WISI_DIR wisi version

    install.sh
        WISI_DIR wisi version

    ada-mode.el
        Version:
        package-requires wisi version
        ada-mode-version

    ada-mode.texi
        @title
        @node top

    README-ada-mode
        first line

    ada-ref-man.el
        Version:

    build/Makefile
        run uninstall-elpa with old values before changing!
        ADA_MODE_VERSION
        ADA_REF_MAN_VERSION
        WISI_VERSION

    d:/Web/savannah/ada-mode/index.html
        find-replace ada-mode i.j.k
        wisi version does not appear
        _not_ WisiToken (done in wisitoken release)

    _not_ d:/Web/stephe-leake/ada/wisitoken.html - done in wisitoken release

    ~/Web/Makefile
        ADA_MODE_VERSION
        _not_ WISITOKEN_ZIP_VERSION

verify other metadata
    ada-mode.el
    ada-ref-man.el
    wisi.el

prep for elpa tests:
    build/Makefile byte-compile-clean pub
    # pushes to elpa workspace, builds archive

Check copyright on files in elpa
    c:/Projects/elpa/GNUMakefile check_copyrights
    if any ada/wisi files added to output, fix them (add or change to FSF)

Emacs 25.3, current gnat
    ~/bin/emacs-25.sh
    (add-to-list 'package-archives (cons "test" "/Projects/elpa/archive/packages"))
    build/Makefile install-elpa
    (gpr-query-kill-all-sessions)
    (list-processes)
    # 'd' = kill; gpr_mode_wisi_parse.exe, ada_mode_lr1_wisi_parse.exe
    cd ~/.emacs.d/elpa/ada-mode-7.1.0; ./build.sh; ./install.sh
    cd ~/.emacs.d/elpa/wisi-3.1.0; ./build-wisitoken-bnf-generate.sh

    restart Emacs to set load-path

    build/Makefile compile-ada-test autoloads test-clean
    build/Makefile test TEST_DIR=elpa

    build/Makefile uninstall-elpa
    (gpr-query-kill-all-sessions)
    build/Makefile recursive-clean clean # if changing compilers

sync for Debian check bogus execute permissions:
    current Emacs for dvc
    # dvc-state-multiple above
    # only uniquify-files in elpa ; commit ada-mode, wisi elpa on Debian for file permissions
    (dvc-push)

Debian testing has elpa checkout
    build/Makefile uninstall-elpa
        # before versions change

    (dvc-pull ".")
    (dvc-sync-review ".")

    upgrade debian (to avoid eventually needing to reinstall from scratch)

    FIXME: test with the latest Debian gnat release
        bugs to https://gcc.gnu.org/bugzilla/buglist.cgi?quicksearch=comp%3Aada

    if new machine, install gnat CE 2019, gnatcoll
        http://libre.adacore.com
        ada-mode.texi

    (dvc-pull "/Projects/elpa")
    (dvc-sync-review "/Projects/elpa")

    build/Makefile
        # no ARM_INFO on Debian
        docs pub-ada pub-wisi clean-elpa build-elpa uninstall-elpa
        install-elpa
            # byte-compile errors, warnings show in *compile-log*

    check for bogus execute permissions in elpa
        $ cd /Projects/elpa/
        $ ls -R -l packages/ada-mode | grep -- -rwx
        $ ls -R -l packages/wisi | grep -- -rwx
        $ chmod -x *.el *.adb
        # keep execute on *.sh

    commit elpa:
    (dvc-state-one "/Projects/elpa")
        add/delete, stage, commit ada-mode, wisi

    (dvc-push "/Projects/elpa")

    # dvc-state-multiple above
    (dvc-push ".")

On Windows
(dvc-pull)
(dvc-sync-review ".")

delete changes in elpa:
    $ cd c:/Projects/elpa/
    $ git checkout .

update elpa, commit elpa/ada-ref-man (not done on Debian)
    (dvc-pull "/Projects/elpa")
    (dvc-sync-review "/Projects/elpa")

    check version ada-ref-man.el

    build/Makefile pub-ada-ref-man

    (dvc-state-one "/Projects/elpa")
        add, stage, commit

    (dvc-push "/Projects/elpa")
    (dvc-sync-review "/Projects/elpa")

    # 24 hrs for web repository to update

after Gnu ELPA updated, test install from GNU ELPA
    5.1.8 crashed emacs for me
    see 'build.sh; install.sh' above for compiling
    also wisitoken-grammar-mode

(dvc-state-one ".")
build/Makefile tag zip

in cygwin console for gpg prompts:
    cd /Projects/org.emacs.ada-mode/build/
    ls *.tar*
    rm <old>.tar*
    gpg -b *.tar.*

    scp *.tar.* stephen_leake@dl.sv.nongnu.org:/releases/ada-mode/

~/Web/Makefile
    # no 'sync' here; all on savannah via cvs, scp
    ada-mode

add elpa .tar.gz to savannah?

commit savannah
    if emacs cvs-examine fails, do 'cvs status' in shell to see real error message (probably IP address confusion)
        # see projects.text "conflicting keys for savannah"
        $ cd /d/Web/savannah/ada-mode
        $ cvs status
        # edit ~/.ssh/known_hosts, delete offending one, repeat 'cvs status'
    (cvs-examine "d:/Web/savannah/ada-mode" nil)
    mark all 'm'
    commit   'c'
    edit commit message "release version i.j.k"
    C-c C-c

    takes ~ 10 min for http://www.nongnu.org/ada-mode/ to reflect cvs commit

update gnu ada-mode manual?
     https://www.gnu.org/software/emacs/manual/html_mono/ada-mode.html

publish on Alire?
    https://alire.ada.dev/
    https://blog.adacore.com/announcing-the-first-ada-spark-crate-of-the-year-award

post on emacs-ada-mode mailing list, c.l.a newsgroup:

-------------------
Gnu Emacs Ada mode 7.1.3 released.
-------------------

Gnu Emacs Ada mode 7.1.3 is now available in GNU ELPA.

Relative to the previous Ada mode release (7.1.2), this is a
bug fix release.

Changed default of ada-end-name-optional; t is better for newbies,
and nil is pre-mature optimization



See the NEWS files in ~/.emacs.d/elpa/ada-mode-7.1.3 and wisi-3.1.3,
or at http://www.nongnu.org/ada-mode/, for more details.

The required Ada code requires a manual compile step, after the normal
list-packages installation ('install.sh' is new in this release):

cd ~/.emacs.d/elpa/ada-mode-7.1.1
./build.sh
./install.sh


This requires AdaCore gnatcoll packages which you may not have
installed; see ada-mode.info Installation for help in installing them.
-------------------

-------------------
Ada Reference Manual info format 2020.1 released.
-------------------

ada-ref-man 2020.1 is now available in GNU ELPA.

This includes Ada 202x draft 25, as well as Ada 2012. GNAT Community
2020 has some support for some of the new language features in Ada
202x.

There is also now a searchable info index, containing the entries in
the ARM Index.
-------------------

mark fixed bugs
    http://debbugs.gnu.org/cgi/pkgreport.cgi?package=ada-mode
    http://debbugs.gnu.org/Developer.html
    email to nnn-close@debbugs.gnu.org
        subject: closed by ada-mode version 7.1.3
        don't include Version: header; that's an Emacs version
    debbugs updates ada-mode summary page within half an hour; no emails

post news on https://savannah.nongnu.org/news/submit.php?group_id=11631

check https://www.emacswiki.org/emacs/AdaMode
    https://www.emacswiki.org/emacs/StephenLeake

-- end of file
