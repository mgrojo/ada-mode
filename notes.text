build/Makefile

branches:
org.wisitoken          - working, used by o.e.a.s-4
org.wisitoken.stephe-1 - development

 current work
propagate

new test cases:

    ----------
    if Trace_Parse > 1 then
      if Keep_going -- missing 'then'; inserts '(' (needs check_limit 5)
         Trace.Put_Line ("check :" & Integer'Image (Check_Count - 1) & " conflicts: success"; -- missing )

    ----------
    type Item_Type is record

    ---------------
    if foo then
    declare
    ...
    begin
    ...
    end;
        missing 'end if' because adding 'if' around block.

        add pattern for "if then ... end IDENTIFIER;"

    ---------------
     if and
        Expecting (Pattern.Expecting) and
        Count (Expecting) = 1
     then
            missing 'expr'; invoked forward-sexp from 'if'
                not expr_opt to avoid conflicts?
                need insert nonterm!
                or delete 'and' :)

    ---------------------
         if Item (I) then
            Result := Result + 1;
         end if;
            start typing from begining, parse after each line

    ------------------
    'if **'

want to use Π in sal.gen_graphs (because reference does) but Aflex can't handle it
    so can't use run_ada_parser to debug indent/parse issues
    use Quex lexer (recommended by AdaCore/langkit)
        https://sourceforge.net/projects/quex/
        windows installer in d:/Archive/Emacs
        installed to d:/Apps/quex-0.67.5
        example lexer : d:/Apps/quex/quex-0.67.5/demo/C/000/Makefile
            edited Makefile so it runs
            needs iconv
            d:/msys64/mingw32/include/iconv.h
            ./mingw32/lib/libiconv.a
            use mingw32 compiler
                use mingw32-make
                creates lexer.exe
                lexer.exe example.txt works

        look in libadalang for Ada bindings to quex output

        hand transform build/case_expression.l => build/case_expression.qx
        d:/Apps/quex/quex-0.67.5/quex-exe.py -i case_expression.qx -o case_expression
            C main in lexer-wchar.c
            generated case_expression.cpp -token_ids -token -configuration case_expression
            includes dedent, indent; option to turn that off?
            needs libiconv

    emacs lexer can't handle Π π either?

if hit enqueue_limit, use config that has highest check_token_count
    save in config

use iterator on action_for, not loop on all terminals.

add iterator on goto_for
    poor man's kim-choe graph search

debug_kim_choe.adb
    use sal.gen_graph
        write test_graphs in sal, with example from CLRS 22.2
        c:/Projects/org.stephe_leake.sal/build/Makefile
        add nonterm weights = shortest terminal count (+ 1 for empty?)

    generate graph from action_for, goto_for

Emacs_ada does not need descriptor.image?

next change in wisi/test/*.good_parse_table
    don't output mckenzie if default

Merge cursor, parser_node_access

replace wisitoken.token.list with token_array
    or not; changes generate?
    ditto production.list

rename mckenzie to dpa_explore?
    dpa = deterministic parsing automata (McKenzie)
        = Deterministic Pushdown Automata (Wikipedia, Grune)

    aflex uses "dfa" deterministic finite automata
    grune also uses 'deterministic fs automata' (Finite State)

    includes special rules

better syntax error handling
    new algorithm 0:
        Grune 326 Kim, Choe 2001
        Definition 3.5 Lookback is just reduce
        faster because it searches grammar graph including nonterminals, not dpa with only terminals
        just implement the algorithms, see if that makes it clearer.
            appears to be just Dijkstra
                https://en.m.wikipedia.org/wiki/Dijkstra%27s_algorithm#Specialized_variants
                    change costs to non-negative integers
                not clear where the difference is
            not clear how to compute S(A) for nonterminals?
                Fischer Mauney 1989 ? no
                fischer, dion, mauney 1979?
                or dion, fischer, 1978? not in google scholar
                or it's "just obvious"; terminal_sequences_1

        Annotate grammar to eliminate cycles for least-cost search?

        Precompute list of forced paths to shift terminal - shortens path search?
            terminal_sequences_2 below

    new algorithm 1:
        if error symbol is in a terminal sequence:
                need fast lookup; use linear search for now
            find first terminal in sequence that is in follow (current state), or equiv
            insert that sequence subset, do McKenzie

        process grammar to generate shortest terminal sequences for each nonterm
            same as Grune 326 S(A)

            that does _not_ insert 'elsif' into 'if_statement'
                which is why we need a full graph search?

            also produce second list with optional nonterms, to find sequence for elsif?
                not repeating nonterms
                how do we decide to keep 'elsif', but not all statement variants?

            terminal_sequences_1.adb

        move param into .wy

        move terminal_sequences.adb into wisi-*

    new algorithm 2:
        adjust mckenzie costs to include terminal sequences
        include current_token in cost function
            cost of "if then | elsif" = 0.0

        include current state and current token in cost function:
            cost of "125 | then | elsif" = 0
            125 implied by trying 'then' without preceding 'if'

    t_one RUN_ARGS=1
        Error_5
            deleted 'if then'
            fixed with hardcoded 'if then else endif' sequence; need general solution
                doing kim, choe 2001 dpa graph search

    search dpa backwards from elsif; insert 'if then'
        same result as Grune 326 graph search; do that?

        terminal_sequences_2.adb
        states that shift ELSIF:
            168 if_statement <= IF expression_opt THEN sequence_of_statements_opt ^ elsif_statement_list
            187 elsif_statement_list <= elsif_statement_list ^ elsif_statement_list
            need list/tree/hash of states that shift ID, sorted on ID

        'goto state 187' is in 168 on elsif_statement_list

        'goto state 168' is in
            159 if_statement <= IF expression_opt THEN ^ sequence_of_statements_opt * on sequence_of_statements_opt
            need list/tree/hash of states that goto state, sorted on goto state

        'goto state 159' is in 128 'if_statement <=' on shift THEN => insert THEN
            ditto

        'goto state 128' is in 100 'if_statement <= IF ^ ' on expression_opt
            ditto

        'goto state 100' is in many, on 'shift IF' => insert IF, terminate

        search all productions in 'declarations', 'statements'?
            start with final terminal, work backward to first

    cache recover for subsequent parse

    test lr1 vs lalr tables
        ada_lite.lr1_parse_table
        10 times the states, table entries

    then to elisp parser?

    or Emacs module parser
        elisp lexer supports utf-8, other encodings; tick/char_literal

    Leaves some sections unindented - OK if not user line (not typical editing case).
        not uncached; if indent is not computed, cache is 0
        If indent cache 0, use previous line?
        see how it works in practice

include actual token count in nonterminal pop cost?
    requires cumulative token count on parser stack

Panic mode is supposed to skip input to ';', then pop states - grune 16.6.1

speed up
    stack compare
        override "=" to start comparison at stack top; most likely to be different

    replace look on ID calling action_for with iterate action list for state

    use tasks for multi-processor?

    compress parser table via default reduce?

    set initial capacity on stacks

    check_reduce does not need to copy stack
        just keep track of current top separately, pointer into reduced top

automatically augment grammar with empty productions
    anything not a keyword is optional
    may create too many conflicts

wisi-generate accept two output languages
    a lot is shared
    only need ada_output, but it doesn't hurt

move output_ada_emacs, output_elisp to ada-mode source tree?
    extendable dispatch?

wisi-generate lr1 way too slow for Ada
    time lalr generating Ada
    time lr1 generating ada_lite (1634 states, tens of seconds)
    time lr1 generating Ada to first 1000 states; increase as it gets better

    implement profile, get data

    don't iterate on non-reporting

    lookahead list vs boolean array:
        time opentoken vs fasttoken
        or old fasttoken

    closure needs:
        fast access to all productions that have dot_id as the LHS
            => array (nonterminal) of list of prod

        fast access to First (beta) => array (nonterminal) of list of terminal

        use multiple threads?

    lr1_goto_transitions needs:
        fast closure
        cache?

        use optimizations from lalr_goto_transitions?

    LR1_Item_Sets needs:
        fast goto_transitions (state, token)
            => use cache; invalidate when ?

        fast find (set, states)
            => Store states in red/black tree sorted on concat LHS/dot position
                or hash table on that key
                    keeps changing, not clear if it's worth finding a perfect hash table
                each node has a list of states that differ only in lookahead
                => one for LALR

            c:/org.stephe-leake.misc/source/rb_tree_V0_1
                bounded, not generic, but proved by Spark
                at least use key_trees-test.adb Tree_Invariant for test
                use to generate test cases?

            c:/org.stephe-leake.sal/source/sal-gen_red_black.ads
                write tests

        no 'free'; don't allocate item on heap until we know we need it

    lalr_goto_transitions needs:
        fast find prod, dot in goto_set
            null result is common
            small set; linear search of list sorted on lhs

        fast access to all productions where:
            (Dot_ID = Nonterminal.ID (Prod.LHS) or First (Dot_ID)(Nonterminal.ID (Prod.LHS))) and
                       (RHS.first /= Null_Iterator and then ID (RHS.first) = Symbol)
            => array (nonterminal) of list of productions, sorted on rhs.first

    lalr_kernels needs:
        same as lr1_item_sets

    need more warm-fuzzy
    command line option
    dots for "adding state n", n every 100
    dots for "lookaheads state n", n every 100?
    dynamically monitor how long things take, keep dot time period constant
        everything slows down as more states added

    rename to opentoken7
        _not_ "fast" :(
        or speed it up

integrate with emacs module
    split out ada_grammar from ada_grammar_process, _module

some .wy in wisi_wy_test.adb, some in rules.make
    be more consistent
        easier to update in rules.make

ada_grammar.adb very slow to compile
    eliminating all but one action subprograms; not much help

    read state transitions from text file?
        action subprogram names as integer index into array of subprogram pointers.
    -> .exe is independent of language

need better lexer for wisitoken
    handle tick character literal
    handle utf-8

    lexer used by libadalang?

need case insensitive flag in .wy
    use for keywords
    pass to lexers

Test case gathering - wisi fallback email first use each day.

lalr calls closure on each kernel more than once!
    save the closure the first time?

need to_token_wy_name
    for reporting conflicts

Ada lexer
    number:
        add _
        add leading integer to distinguish 16 from identifier

    identifier: add leading letter

review FIXME
    ./fasttoken-parser-lalr-parser.adb:346:            --  FIXME: free everything
        add Controlled to stuff

change dragon examples
    lexer.regexp; should be easy

    lexer.aflex/wisi-generate
        need support for different actions
        move code from tokens to actions
        change .wy action syntax to require {} (for elisp as well)
        use Ada code in actions; reference New_Token, Source, To_ID
            or whatever than changes to
        add Ada output language to wisi-generate
            just copy text between {} to action function
                add constant space prefix to each line; source must meet style check

change wisi tests to use Ada code?

 aflex
    /Projects/aflex/build/Makefile
    /Projects/aflex/aflex.adb
    source from http://sourceforge.net/projects/p2ada/

    better error messages; gnu syntax

    regenerate aflex.l
        start with flex.l?

# end of file
