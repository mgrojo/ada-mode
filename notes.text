General notes on Emacs Ada mode

build/Makefile   wisi
Alire.make       Alire
ELPA.make        elpa

o.e.a: release, in use
o.e.a.stephe-1: dead
o.e.a.stephe-2 (o.s_l.sal.s-1, o.w.s-1, o.e.w.s-1): work
o.e.a.stephe-3 : emacs module parser (very old)
o.e.a.stephe-4 (o.s_l.sal.s-1 o.w.s-1 o.e.w.s-4): integrate tree-sitter
o.e.a.stephe-5 : dead; libadalang backend
o.e.a.stephe-6 : dead; packrat error correction via lr
o.e.a.stephe-7 (): available

(dvc-state-multiple
'((xgit . "/Projects/org.stephe_leake.makerules")
  (xgit . "/Projects/org.stephe_leake.aunit_ext")
  (xgit . "/Projects/org.stephe_leake.sal")
  (xgit . "/Projects/org.wisitoken")
;;  (xgit . "/Projects/elpa/packages/uniquify-files")
  (xgit . "/Projects/elpa/packages/gnat-compiler/")
  (xgit . "/Projects/elpa/packages/gpr-query/")
  (xgit . "/Projects/org.emacs.wisi/")
  (xgit . "/Projects/org.emacs.gpr-mode/")
  (xgit . "/Projects/org.emacs.ada-mode/")
;;  (xgit . "/Projects/eglot-stephe")
  ))

(dvc-propagate-multiple
 '(("../org.stephe_leake.sal"    . "../org.stephe_leake.sal.stephe-1")
   ("../org.wisitoken"           . "../org.wisitoken.stephe-1")
;;   ("../org.emacs.gnat-compiler" . "../elpa_work/packages/gnat-compiler")
;;   ("../org.emacs.gpr-query"     . "../elpa_work/packages/gpr-query")
   ("../org.emacs.wisi"          . "../org.emacs.wisi.stephe-1")
   ("../org.emacs.ada-mode"      . "../org.emacs.ada-mode.stephe-2")))

(dvc-state-multiple
'((xgit . "/Projects/org.stephe_leake.makerules")
  (xgit . "/Projects/org.stephe_leake.aunit_ext")
  (xgit . "/Projects/org.stephe_leake.sal.stephe-1")
  (xgit . "/Projects/org.wisitoken.stephe-1")
  (xgit . "/Projects/elpa/packages/gnat-compiler")
  (xgit . "/Projects/elpa/packages/gpr-query")
  (xgit . "/Projects/org.emacs.wisi.stephe-1")
  (xgit . "/Projects/org.emacs.ada-mode.stephe-2")
  ;; (xgit . "/Projects/eglot-stephe")
  ))

(dvc-propagate-multiple
 '(("../org.stephe_leake.sal.stephe-1"           . "../org.stephe_leake.sal")
   ("../org.wisitoken.stephe-1"                  . "../org.wisitoken")
   ("../org.emacs.wisi.stephe-1"                 . "../org.emacs.wisi")
   ("../org.emacs.ada-mode.stephe-2"             . "../org.emacs.ada-mode")
   ))

 current work
ada_mode-ancestor.adb
    handle empty declarative_part
    non_empty_declarative_part appears in:
        block_statement 'declare' [non_empty_declarative_part]] 'begin'
        subprogram_body 'is' [non_empty_declarative_part] 'begin'
        package_body ""
        task_body    ""
        entry_body 'is' [non_empty_declarative_part] 'begin'

    ada-mode.el ada-declarative-region edited
        test in 'procedure B' fails, because it finds the empty 'procedure B' region
            goto-statement-start first, if on statement source token?

test Manuel Gomez use case
    his former invocation: (ada-set-default-project-file "project.gpr")
    test with installed elpa version:

        emacs -Q  -l "c:/Projects/org.emacs.ada-mode/test/Example_2/test.el"
        => (wrong-type-argument stringp nil)
            wisi-prj-select-cache calls wisi-proj-current-parse with wisi-prj--current-file nil; should not call?
                normally project-find-functions has more stuff, so (current-project) is not nil
            need to set :init-prj to ada-default-prj
            add that to wisi-prj--default with file nil? dangerous, not scalable to multiple modes
            add with 'ada-mode?

    minimal recipe/patch with ada-mode 7.1.8:
  (package-initialize)
  (require 'wisi-prj)
  (setq project-find-functions '(wisi-prj-current-parse) debug-on-error t)
  (wisi-prj-parse-file :prj-file "hello.gpr" :init-prj (ada-prj-default))
  (wisi-prj-select-file "hello.gpr" (ada-prj-default))

    add filename arg to wisi-prj-dtrt-parse-file, doc in wisi.info

c:/Eurocontrol/matreshka-internals-unicode-ucd-colls.ads
    84,168 lines, 3,418,945 chars
    full parse => storage_error
        probably traversing the tree using recursion

    partial parse doesn't help, because of large aggregates?
        first aggregate is 30,000 lines, => storage_error
        need limit on partial_parse size?

mention wisi-size-threshold in wisi & ada-mode user guides

Doc ada-mode wisi indent settings that match als?

doc ada-indent-record, other ada indent functions, in ada-mode.texi

for wisi.texi:
    ----------------------
    gpr-query relies on the cross reference information output by the
    compiler; it assumes the code is compiled.

    When gpr-query reads the compiler output, it caches the results in a
    database.

    This error message indicates that the cached cross reference database does not
    contain the requested symbol. This is due to one of three things:

    - the code has never been compiled, or changed but not compiled

        solution; compile it and try again

    - the code has been changed and compiled since the database was
    refreshed

        solution: refresh the database with C-c C-q (wisi-refresh-prj-cache)

    - the compiler does not output information for this symbol.

        give up

    AdaCore is moving to a different cross reference system, so they are not
    likely to make changes in the compiler output info to support new
    features.
    -----------


    if package install complains about wisi--lexer-error undefined,
    check for old copies of wisi or ada-mode on your load-path.

wisi.texi
    $FOO only sees vars defined in the current project
        workaround:
    :compile-env
     (list
       (concat "HOME=" (getenv "HOME")))

    also add comments to code; 'process-environment' specifically excluded.
        $BAR declared in .prj only affect that project, not others.

add .prj syntax: import_env_var=HOME

it should be easier to change the skeleton inserted in a newly created
file
    from Tony Brown on ada-mode-users

auto-insert.el references old ada-mode stuff
    from Tony Brown on ada-mode-users

'with unreferenced' in parameter list
    in gnat pro 21.1
    > So I'd guess that you can put the aspect directly on the parameters in the
    > usual way (but that may require a compiler not available yet; the change was
    > approved in Sept [AI12-0395-1] and Oct [AI12-0398-1]). So, I'd expect the
    > following to work (eventually):
    >
    >  overriding function Expand_Tabs
    >      (This   : Dummy_Editor_Buffer with Unreferenced;
    >       Line   : Editable_Line_Type with Unreferenced;
    >       Column : Character_Offset_Type with Unreferenced) return
    > Visible_Column_Type is (0);
    While you're at it, you probably ought to add any other contexts where
    aspect_specifications are now allowed:

        parameter_specification
        discriminant_specification
        extended_return_object_declaration
        entry_index_specification


    do another diff between annex P and my grammar

better error message for devault vc project
    "select an ada-mode project"
    or use default ada-mode project?

test completion with ada-mode default project
    joakim@verona.se
    > cl-no-applicable-method: No applicable method:
    > wisi-xref-completion-at-point-table, #s(gnatxref-xref nil
    > "*gnatxref-/home/joakim/pub/all-the-hellos/ada/hello-world/default_.adp*"
    need better error message "no project defined, so can't complete on Ada identifiers"

savannah support tickets work; mention in readme

do release
    post .js grammar on tree-sitter homepage

Add output_dir option to w-b-gen

use shell or make pkg-spec to run build.sh, install.sh
    https://git.savannah.gnu.org/cgit/emacs/elpa.git/tree/README#n117
    see ELPA pdf-tools for automatic compile, install
        (pdf-tools-install)
        (pdf-loader-install) in user .emacs

wisi package should contain wisi.gpr, so modes that use it don't need to build it
    only gnatprep variable is ELPA


test gnat pro 23 beta
    or latestest gnat pro
try adacore 23 in alire alr index --add=git+ https://github.com/alire-project/alire-index#adacore_lib_23-0 --name=adacore_lib_23-0 --before=community

use spark to find bug in apply source edits

change set_parents to be incremental
    notes in o.w.s-1/notes.text

fix alr bug
    /Projects/ada_language_server-23.1-patch/alire.make
    runs post-fetch actions at build time

Add to elpa makefile and or elpa-admin:
    create new elpa package with no upstream

     $ cd c:/Projects/elpa/
     $ git stash
     $ git checkout --orphan externals/gpr-mode
     $ git rm --cached "*"
     $ git commit --allow-empty -m "new package gpr-mode"
     $ git checkout -f main
     # edit elpa-packages - copy from wisi
     $ git commit -m "new package gpr-mode"
     $ git push --set-upstream origin externals/gpr-mode
     $ make packages/gpr-mode
     # copy files, commit
     $ cd packages/gpr-mode
     $ git checkout -b externals-release/gpr-mode
     $ git push --set-upstream origin externals-release/gpr-mode
     $ git checkout externals/gpr-mode
     $ cd c:/Projects/elpa/
     $ git push
     $ git stash pop

README-ada-ref-man moved to org.adaic.arm_form
    change elpa to push from there.

new refactor:
    expression_function <> subprogram_body

test/ada_mode-recover_45.adb
    bad solution to "mixed logical ops" error
    minimal complete went too far
    need language fix for 'expression and then expression or expression'.
        error on 'or'; insert left paren before prev expression

ada_mode-recover_44.adb
    matching_begin return list of token arrays, so insert '(if foo' is cheap
        also '(case foo' before 'when'
        '(declare' before 'begin'
        look thru ada_annex_p.wy for more.

add Ada code to decrement byte_pos by one char, use in emacs_common, run_common
    just reference wikipedia

move Trace from Parser to Lexer
    use in Find_Next
    no separate param in tree operations

add option ada-record-end-names-optional, default t?
    requires specifying option in each match-names action

don't use navigate text_properties cache?
    just get pos of destination from tree
    requires general tree query

Don't put name properties - just accum completion list. Set name prop only for which func, add-log - in small region.
    More detailed parse-action?

test/ada_mode-recover_partial_02_lr1.adb
    add language_fix to push_back to before '('
    add paren to descriptor, add this in -explore?

test/ada_mode-recover_06, _10.adb
    not _24
    'end' not inserted on blank line so indent is correct for adding another statement
    could be inserted on comment line.

ada-mode language_fix 'extra begin'
    PRAGMA_ID | USE_ID should be First (declaration)
    output First in ada_process_actions?

test/mixed_unix_dos_line_ends.adb
      coding conversion in send-string strips stray ^M
        only in emacs 28?
        change to utf-8-emacs; still strips.
        change to binary!?
            not in elisp manual list of coding conventions?
            doesn't work

        write bug report
        change to use null-terminated string?
            then byte, char pos wrong.
            if emacs buffer contains null, it's not valid text (even less valid than stray ^M)

merge sal-ada-goto-declaration-start, java-wisi-goto-declaration-start into wisi

when move to new gnat, need to fix compilation errors
    assume wisitoken is broken
    need different compile-env for compiler, xref
    improve wisi-prj

fix "string not terminated by end of line" bug
    use parser to fontify strings

    same for unterminated placeholder; use parser to fontify comments
        ada_mode-placeholders.adb

move dvc-kill-all-review/workspace to wisi?
    add delete projects in the workspace?
    delete project call wisi-kill-xref, wisi-kill-parser

align region too large:
   case A is
      when 0            =>
         --  plain identifier
         RHS.Tokens.Append
           ((Label      => +"",
             Identifier => +Get_Text (Data, Tree, Tree.Child (I, 1))));
   end case;

    ada-align groups preceding comment lines with declarations

    lsp language server can do align as part of "format"

    add wisi refactor case (similar to format_param_list)

compute align in grammar actions
    align-list action on ':', '=>' etc

make-subprogram-body should strip aspects.

disable or use electric-indent-post-self-insert-function
    called during ada-indent-newline-indent
    on post-self-insert-hook
        use that for ada-mode capitalization?

 eglot/als
    (progn
     (setq ada-face-backend   'none)
     (setq ada-indent-backend 'none)
     (setq ada-xref-backend   'eglot))

    (progn
     (setq ada-face-backend   'wisi)
     (setq ada-indent-backend 'wisi)
     (setq ada-xref-backend   'gpr_query))

    (find-file "build/Makefile")
    (find-file "wisi-ada.adb")

AdaCore tickets:
    Q406-078 2017-Aug : AdaCore (Nicolas Setton, Arnaud Charlet)
        mentions not fixing old GPS engine in favor of libadalang;
        wait for libadalang to introduce new config flags. Phippe
        Waroquiers wants GPS & Emacs indentation to be the same,
        and match Eurocontrol style.

    R801-052 2018-Aug : Stephe mentions transforming libadalang
        tree to wisitoken tree, using wisitoken indent code.
        AdaCore says GPS not using libadalang for indentation yet.

    R821-023 2018-Aug .. 2018-Dec : gnatpp using libadalang, but it is not ready for indent.

    SA31-041 2019-Oct

https://github.com/AdaCore/ada_language_server/releases
    binary ada_language_server
    run eglot tests using it, and patched version

    alire.toml post-fetch action to patch als for indent etc?

    waiting on fix for https://github.com/AdaCore/ada_language_server/issues/1074
        no response; do workaround in eglot.el

    add top level makefile target test-ada-eglot-indent
        different file set to accomodate different style
            search *.ad? for test-eglot-indent ?
        change run-indent-test-eglot to run-test-eglot

    testing ada-eglot
        in unit test using ada-eglot-gpr-file, didChangeConfiguration sent after didOpen
            => error about more than one gpr file
            bug#59556
            eglot--signal-textDocument/didOpen called from eglot--maybe-activate-editing-mode
                calls jsonrpc-notify; does not call jsonrpc-connection-ready-p

            eglot-signal-didChangeConfiguration called from eglot-connect-hook
                calls jsonrpc-notify; does not call jsonrpc-connection-ready-p

    create emacs issue for eglot range end < begin

    ada-mode.texi "may want to customize"
        add eglot-stay-out-of imenu
            really slow - times out on open new buffers
            need ada-imenu-backend?

        use custom-set-variables, not setq

    ada_mode-nominal.adb
            storage_error
            requests 9 .. 13 are sent before response to 8 is received
            als test semantic_tokens_storage_error
                test succeeds; no storage_error

    test-ada-eglot.stamp
        global custom ada-eglot-gpr-file doesn't work
            can't set custom vars via local variables?

    test/ada_mode-child_procedure.adb
        bogus indent/edit of trailing comments
        /Projects/ada_language_server-23.1-patch/alire.make
        /Projects/ada_language_server-23.1-patch/testsuite/.als/inout.txt
        /Projects/ada_language_server-23.1-patch/testsuite/ada_lsp/range_formatting_03
        duplicates; run in debugger

        there is an extra edit on lsp line 7 = emacs line 8, which inserts 2 spaces.
        in pp-actions.adb Format_Vector
        in pp-actions.adb Tree_To_Ada
        tree_to_Ada_2.Convert_Tree_to_Ada
        emacs line 8 is token #27 Other_Whole_Line_Comment
            not listed in Templates (not a syntax token kind)
        comments are trailing stuff after SubpBody
        there is a template for Ada_Subp_Body
            doc of template symbols is in comment at 'type Str_Template'
            it's followed by ';', a literal in Ada_Declarative_Part template
            which is followed by $, a hard line break

            gnatpp -d9 dumps tree
                comments shown in Src_Tokens following tree

    because wisi prj is global, uses one eglot instance for all files
        which is wrong for als amd gpr_query
        do something with eglot-lsp-context; eglot--current-project let-binds that to t
        (if eglot-lsp-context
            (member default-directory (wisi-prj-source-dirs wisi-prj--current))

        should check file in (project-files (eglot-project server))
        do that in eglot or in ada-eglot-setup?
            eglot--maybe-activate-editing-mode just calls eglot-current-server
            which checks eglot--servers-by-project for major-mode
            so it's not eglot's fault; I need to ensure the current project is correct.
                two active projects, check for dominating file or project-files
                wisi-add-project


    eglot outputs messages when indenting; don't do that!
        https://debbugs.gnu.org/cgi/bugreport.cgi?bug=59149


    hover/signature info too much
        set eldoc/eglot vars to limit height
        mention in ada-mode.texi "may want to customize"
        eldoc-echo-area-use-multiline-p 5

    eglot startup from ada-mode-hook
        bug#59556

        use jsonrpc-request (not -async) in eglot--connect
            have to translate :error-fn, :success-fn into direct calls; complicated

/Projects/org.emacs.ada-mode.stephe-4/test/ada_mode-expression_functions.ads
    when run by make one ada_language_server reports more than one gpr file

        eglot is started by wisi-prj-select-cache via wisi-compiler-select-prj
        but "workspace/didChangeConfiguration" is not sent until after that completes!?
            what in eglot triggers sending it?
            eglot-connect-hook
                run just before "Connected! ... " message
                hack-dir-local-variables is also run then

        try overriding eglot-initialization-options, as eglot-eclipse does
            can specify in eglot-server-programs, as a function that is called at eglot start time
                that function can specify the gpr file from the wisi project


    Eglot-shutdown turn off ada minor modes

    test eglot/als with semantic tokens
        test/ada_mode-generic_package.ads needs cl-ecase

    language specific function for name face?


    create emacs issue for eglot semantic_tokens
        announce i'm working on it

    test eglot ada-which-function; documentSymbol hierarchicalDocumentSymbolSupport
        need another ada-*-backend?

build ada-mode with stephe-patches alire index
    cd ~/.emacs.d/elpa/ada-mode-8*
    ./build.sh

    alr toolchain gnat-12 broken
        https://github.com/alire-project/GNAT-FSF-builds/issues/43

    using external gnat-2021
        als build fails on gnat version
        /=2020 is from libgpr, vss
            vss needs -gnat2020
                figure out how to add that in .toml
                [build-switches]
                "*" = ["-gnat2020"] doesn't work
                "*".Ada_Version = ["-gnat2020"] doesn't work
                "*".Ada_Version = "Ada2022" doesn't work

                fork vss, add in .gpr

            push stephepatches
            edit local community index
            push community, do pull request

    Eglot font-lock respect decoration level?

ada_language_server --language-gpr => gpr_language_server
    do gpr-eglot.el

test eglot with initializationOptions in initialize
    see IMPROVME: in ada-eglot.el
    GNAT GPL 2021 als: still get "multiple gpr files" message, then CONSTRAINT_ERROR

    try als 22
        /Projects/Alire/ada_language_server
        windows: (setq gnat-lsp-server-exec "c:/home/stephe/.local/bin/ada_language_server.exe")
            CONSTRAINT_ERROR
        debian: works

test eglot/als with semantic tokens
    /Projects/alire-workspace/ada_language_server_23.0.0_66f2e7fb
        requires gnat 12; in alire, exported to ~/.local

    /Projects/eglot-stephe
        should change to emacs/scratch/eglot-semantic-tokens-2?

    debian:
    (let ((default-directory "/Projects/ada_language_server/")) (load-file "prj.el"))
    (setq gnat-lsp-server-exec "/Projects/ada_language_server/.obj/server/ada_language_server")

    Windows:
    (let ((default-directory "c:/Projects/Alire/ada_language_server_22.0.0_ef4bdf41/")) (load-file "prj.el"))
    (setq gnat-lsp-server-exec "c:/home/stephe/.local/bin/ada_language_server.exe")
        gnat-alire project broken

    eglot
        https://github.com/joaotavora/eglot/issues/615
        https://github.com/joaotavora/eglot/pull/839
        /Projects/eglot-stephe/eglot.el

    (sal-devel-als-eglot)
    (require 'eglot)

    make test-ada-eglot.stamp
        build/run-indent-test-eglot.el

    test/debug.adb
        als raises constraint_error
        capture eglot log
        duplicate in als test
        submit github issue

    test/ada_mode-nominal.ads
        lots of stuff right, lots wrong
        in context_clause; Ada.Text_IO has (font-lock-builtin-face font-lock-keyword-face)
            but test-face reports nil; race condition
                font-lock-ensure only issues request; need to wait for response
                    for now, use (sleep-for 0.1)
                no "wait" functions in eglot
                see eglot-test.el eglot--wait-for, eglot--sniffing


als supported tokens:
(:tokenTypes
  ["namespace" "type" "class" "enum" "interface" "struct" "typeParameter" "parameter" "variable" "property"
   "enumMember" "function" "keyword" "comment" "string" "number" "operator"]
 :tokenModifiers
  ["declaration" "definition" "readonly" "static" "deprecated" "abstract" "modification" "documentation"
  "defaultLibrary"])

    /Projects/ada_language_server/testsuite/ada_lsp/V628-012.highlighting.defining_names/
        "basic test for semantictokens" does range first, then full
        on a very small file

try eglot on alire project
    use gnat-run to run eglot?

wisi/gnat/gpr-query vs eglot/als capabilities:
    this table should all be in ada-mode.texi

    auto-case      - onTypeFormatting, except that seems more oriented towards indent? als does not provide it.
    font-lock/face - semanticTokens
    indent         - :documentFormattingProvider

    completion-at-point gpr-query - completionProvider
        eglot also supports company

    <none>  - :hoverProvider
    <none>  - :signatureHelpProvider
        handled by eldoc

    gpr-query    - :declarationProvider
    gpr-query    - :definitionProvider
    gpr-query    - :typeDefinitionProvider
    gpr-query    - :implementationProvider
    gpr-query    - :referencesProvider
    <none>       - :documentHighlightProvider (highlight references in current scope to symbol under point)
    gpr-query    - :documentSymbolProvider    (wisi does flat only; lsp single file)

    fix-error    - :codeActionProvider      (gnat does some quickfix, ada-mode does some refactor)
                                          als does ["quickfix" "refactor.rewrite"]

    wisi-fringe  - eglot sends diagnostics to flymake
        wisi could also

    <none>    - :renameProvider           workspace-wide rename of symbol
              - :foldingRangeProvider      hide statement_sequences in if-then-else etc.
              - :executeCommandProvider    perform code actions
                    als does (:commands ["als-other-file" "als-named-parameters" "als-refactor-imports" "als-refactor-remove-parameters" "als-refactor-move-parameter" "als-refactor-change-parameter-mode" "als-suppress-separate"])

    gpr-query - :workspaceSymbolProvider    all symbols in workspace

    wisi tree query - als extension :alsReferenceKinds "parent" "child"
                        also "reference" "access" "write" "call" "dispatching call"

                    - als extensions: :alsShowDepsProvider

    wisi-disable-face; enables semanticTokens when implemented.

    wisi-disable-indent; don't set indent-region-function, indent-line-function.
        eglot does not set indent-region-function or indent-line-function!?
        defines eglot-format function
            set that as indent-region-function in ada-eglot-setup
                also wrap for indent-line-function as wisi does
            provides no options


    eglot--managed-mode has list of hooks that eglot sets
        run by find-file-hook, after-change-major-mode-hook
        which run after ada-mode-hook

    in wisi but not LSP/als
        context-clause
        enclosing-declaration; goto-declaration-start, goto-declarative-region-start
        in-paramlist-p, format-paramlist
        refactor
            add package-level use clause
            add local 'use type'
        arbitrary tree query; many tree nonterms have elisp symbols

in Ediff; 't' does not insert type name in *xgit-log-edit*
    (add-log-current-defun) returns nil
    add-log-current-defun-function is ada-add-log-current-function
        which calls ada-which-function
        which only supports wisi-parser-shared
        add eglot?
        or add ada-eglot-log-current-function?

 tree-sitter as parser for wisi
implement wisi parser for java using tree-sitter grammar
    find a large java file, compare command-line parse times
    compare eglot font-lock times?
    post to emacs-devel

    also try https://codeberg.org/FelipeLema/tree-sitter-indent.el


add run_ada_tree_sitter_parse.ads

    try tree_sitter parse on debug.adb with input from FIXME: cases

    need wisi backends to access tree-sitter syntax tree

    wisi-ada*.adb handle ada_annex_p_process_*_actions!
        add ada_actions.* for each feature, bodies dispatch?

    editing ada_mode-recover_30.adb is really slow with incremental wisi parser; try tree-sitter.
        in web playground?

run parser on ACATS
    using wisi, tree-sitter with ada_annex_p.js, tree-sitter with briot.js

respond to https://rust-analyzer.github.io/blog/2020/09/16/challeging-LR-parsing.html
   https://github.com/tree-sitter/tree-sitter-rust

 gpr_query stuff
gpr_query.adb process_overridden should return method def for all ancestor types, not just parent

figure out how gnatfind finds ada_mode-separate_procedure body
    report bug: -f not respected (test/ada_mode.ads)
    improve gpr_query to find separate body

gpr_query does not see libraries?
    need clear example; libadalang mains vs langkit?
    compare to GPS, gnatinspect

 algorithm doc
paper_2019.latex
    ada-mode use of wisitoken parser
    metric for comparing error correction
        argh. redo using lr1 for wisitoken-tokens
            really slow loading lr1 table for each file; loop on files in dump_wisitoken_corrected

        sum_diff_lengths.adb
        file_count: 55
        correct-wisitoken:  total size: 14325
        correct-libadalang: total size: 52040

    excellent examples:
        recover_02: wisitoken inserts "end; end;" prematurely
        recover_05: libadalang deletes entire partial record type declaration; wisitoken finishes it
        recover_07: libadalang splits an assignment rather than insert a semicolon.
        recover_08: wisitoken inserts "end;" prematurely
        recover_15; wisitoken inserts "end loop;" just right.
        recover_16; wisitoken inserts "end if;" just right.
        recover_18; libadalang deletes start of two loops; can't get indentation right.
        recover_21: libadalang deletes 'elsif', 'else' instead of inserting 'if then'; can't get indentation right.
        recover_deleted_procedure_1: libadalang deletes lots of code
        recover_end_1: libadalang deletes 'procedure'
        recover_string_quote_1, 2, 3: libadalang does better

 spark stuff
present spark counter example info
    c:/Projects/org.stephe_leake.sal/build/obj/gnatprove/prove_bounded_definite_vectors_sorted.spark
        JSON format
    <gnat>share/gps/plug-ins/spark2014.py

ada-build.el
    add spark commands: prove { project | file | function/procedure | assertion at point}

Do spark on mckenzie-base

 module interface
see Emacs tree-sitter for example

    see if it's faster; should be

    add re2c_emacs lexer, that handles emacs raw buffer text
        that lets the emacs buffer be the text buffer, avoiding copy/encode/bookkeeping

    use partial and incremental parse
        _only_ parse on demand, mininal amount of text
        maintain list of parse trees

    add parser task, one per buffer
        parse ada_mode.ads for face while finishing indent ada_mode.adb

        queue parse requests for one buffer
            first parse builds syntax tree
            use it for all post-parse actions

    emacs on windows uses a custom malloc
        use storage pool to specify that?
        run in a separate OS thread, so we don't care?
        why do we care?
            because tree-sitter integration is trying to expose TSNode directly to lisp?
            if wisi doesn't do that, do we care?
            Emacs allocator xmalloc calls memory_full on error
                that releases some reserved memory, prompts the user to save and exit

                so wisi should signal memory-full on Ada allocator fail, let elisp call memory_full

 refactoring
    rename entity:
        use xref to rename all uses (with/without confirm)

    change parameter_result_profile
        make same change in all overrides
        offer to walk thru all uses

    promote primitive subprogram-local variable to type component

    move primitive from parent to child class

    extract subprogram
        from Eclipse
        highlight lines of source
        prompt for name
        it guesses parameter_result_profile

 build ada_language_server main devel
    copy ada_language_server.toml
    /Projects/ada_language_server/alire.toml
    (let ((default-directory "/Projects/ada_language_server/"))
       (load-file "prj.el"))

        alr build
        missing dependencies:
        libgpr2: https://github.com/AdaCore/gpr
        pin https://github.com/AdaCore/templates-parser
            tp_xmlada not found; comment out for now
        pin https://github.com/AdaCore/langkit
            for langkit_support newer version
        pin https://github.com/AdaCore/gnatcoll-bindings
            for gnatcoll-gmp newer version
        pin https://github.com/AdaCore/gnatcoll-core
            for gnatcoll newer version
        clone https://github.com/AdaCore/gprbuild
        direct depends, pin libgpr (in gprbuild)
            for gnatcoll main
        direct depends on xmlada
            for gprbuild/libgpr
            edit gpr.gpr OS to lowercase "unix"; set by gnat

 debug hints, relevant files
browse Alire source:
    (let ((default-directory "/Projects/alire-main/"))
       (load-file "prj.el"))

run als tests:
    generate test from log: M-x ada-eglot-log-to-als-test
        see IMPROVEME in ada-eglot.el on what needs to be edited manually

    cd /Projects/ada_language_server/testsuite; ./run.sh $(TEST_NAME)

    test output is in /Projects/ada_language_server/testsuite/.als/inout.txt
    test will timeout if expected output does not match actual output.

to run als in debugger, driven by tester:
# $ cd .../ada_language_server/testsuite
# $ export ALS=../.obj/server/ada_language_server
# $ ../.obj/tester/tester-run --debug ada_lsp/<test>/test.json
# that starts als; find its PID with:
# $ ps -x | grep ada_language_server
# M-x gud-gdb /Projects/gnat/pro-23.0w-20220523/bin/gdb --fullname /Projects/ada_language_server/.obj/server/ada_language_server
# attach gdb to it


https://github.com/alire-project/alire/blob/master/doc/catalog-format-spec.md

https://debbugs.gnu.org/Developer.html
https://debbugs.gnu.org/server-control.html
https://debbugs.gnu.org/cgi/pkgreport.cgi?package=emacs;include=subject:ada-mode

wisitoken keeps binding wisitoken-bnf-generate, thus regenerating ada_annex_p* from .wy
    - see obj/*.bexch; hash of *.gpr is wrong, one updated on each run, eventually ok.
    first happened in gnat community 2020
    still there in 2021

(wisi-process-parse-save-text wisi--parser "c:/Projects/org.emacs.ada-mode.stephe-2/real_edited" t)
(wisi-process-parse-compare-tree-text wisi--parser :disable t)
(setq jit-lock-defer-time 1.5)

one ELISP="(setq save-parser-log \"../debug-2.log\" save-edited-text \"../edited\")" ONE_TEST_FILES=ada_mode-*.adb
    wisi-parser-transaction-log-buffer-size-default most-positive-fixnum
    compare-tree-text t

test-ada-lalr-incremental-process-gpr_query ELISP="(setq-default wisi-process-time-out 30.0)"

two RUN_ARGS="command_file debug.cmd &> debug.log"

*.debug RUNTEST=run-indent-test-lalr-incremental-process-gpr_query.el ELISP="(setq-default wisi-mckenzie-task-count 1 save-parser-log \"../debug-2.log\" wisi-parser-verbosity \"debug=1\")"

ada-mode option defaults:
--lang_params "3 2 0 0 -3 3 2 0 2 3 2 2 1"

end-name-optional nil:
--lang_params "3 2 0 0 -3 3 2 0 2 3 2 2 0"

to change process executable for all current and future buffers:

    in any *.adb buffer:
    (setf (wisi-process--parser-exec-file wisi--parser)
      "c:/Projects/org.emacs.ada-mode.stephe-2/ada_mode_wisi_parse.exe")
    M-x wisi-kill-parser

    to undo:
      (setf (wisi-process--parser-exec-file wisi--parser)
        "ada_mode_wisi_parse.exe")
    M-x wisi-kill-parser

    if *-process.el has changed:
    in *-process.el: M-x eval-buffer
    in *.<lang> buffer:
    (wisi-kill-parser
    (setq wisi-process--alist nil)
    M-x <lang>-mode


use elp (emacs lisp profiler)?
    (with-current-buffer (find-file-noselect "~/src/xdisp.c")
      (elp-instrument-function 'c-beginning-of-defun)
      (goto-char (point-max))
      (condition-case nil
          (while (beginning-of-defun) nil)
        (error nil))
      (elp-results))

(progn (profiler-start 'cpu) (time-it 'wisi-parse-buffer 10) (profiler-report) (profiler-stop))
    B - profiler-report-render-reversed-calltree shows low-level time hogs

attach gud-gdb to running emacs: attach <process id>
    source emacs/src/.gdbinit
    xbacktrace shows lisp backtrace

call wisitoken.parse.lr.mckenzie_recover.put ("", shared_parser.tree, Super.parser_Status (Parser_Index).parser_state.stream, config, false)

"kill -USR2 <emacspid>" which should also drop you into the (elisp?) debugger.

(browse-url "c:/Projects/arm_info/org.adaic.arm_form/build/html/arm2012/RM-P.html")
(info "(aarm2012)Annex P" "*info Annex P*")
http://www.ada-auth.org/standards/
(info "(elisp)Parser State" "*info syntax-ppss*")

 git config for elpa checkout
in ~/.gitconfig:
    # 15 Feb 2016: ELPA has an object that fails this check; only need
    # to disable (set to false) when pull a full repository (that includes that
    # object)
        fsckObjects = false

[core]
	repositoryformatversion = 0
	filemode = false # don't set exec bits
	bare = false
	logallrefupdates = true
	ignorecase = true
[remote "origin"]
	fetch = +refs/heads/master:refs/remotes/origin/master
	push  = +refs/heads/master
	url = stephen_leake@git.sv.gnu.org:/srv/git/emacs/elpa.git
[branch "master"]
	remote = origin
	merge = refs/heads/master

 elpa hints
to test compiling info files:
    in *.texi[nfo], F5 makeinfo *.texi[nfo]

if package is not published, check https://elpa.gnu.org/devel/<package>-build-failure.log

 release process
keep status in ~/projects.text
    dependency releases done below, after tests that test all of them.

Do everything on Debian
    required for Alire
    git is faster

update debian (to avoid eventually needing to reinstall from scratch)
    as root: aptitude update; aptitude full-upgrade --without-recommends

update emacs master
    cd /Projects/emacs/master
    git pull
    make -j8 bootstrap

update Alire
    https://github.com/alire-project/alire/releases
    alr index --update-all
    alr toolchain --select
        select current internal gnat

update GNAT Pro
    https://support.adacore.com/

sync Windows with Debian
    Windows:
    (dvc-state-multiple "/Projects" t)
    (dvc-push "/Projects/elpa")
    (dvc-push "/Projects/org.emacs.ada-mode")
    (dvc-push "/Projects/emacs_stephe.main")

    Debian:
    (dvc-sync-run "/Projects/org.emacs.ada-mode")
    (dvc-sync-review "/Projects/org.emacs.ada-mode")
    (dvc-sync-run "/Projects/elpa")
    (dvc-sync-review "/Projects/elpa")
    (dvc-sync-run "/Projects/emacs_stephe.main")
    (dvc-sync-review "/Projects/emacs_stephe.main")

update benchmark_results.text

drop emacs 26 - not tested? at least drop emacs 25

check for ELPA patches by others
    cd c:/Projects/elpa/packages/ada-mode
    git log -2
        apply changes to current via ediff

check emacs buglist
    http://debbugs.gnu.org/cgi/pkgreport.cgi?package=ada-mode
    to update a bug: nnn@debbugs.gnu.org
        subject: from bug title, for people who rely on that.
    if fixed in devel sources, add 'pending' tag:
        control@debbugs.gnu.org
        tags nnn + pending

check for latest Emacs release
    http://ftp.gnu.org/gnu/emacs/windows/

run all tests without elpa:
    build/Makefile byte-compile compile-ada-test test byte-compile-clean

    - Windows Emacs master, current gnat
    - Windows Emacs 25.3, current gnat
    - Windows Emacs 26.1, current gnat
    - Windows Emacs 27.1, current gnat
    - Windows Emacs 28.1, current gnat

    #dvc-state-multiple above
    (dvc-push)
    - Debian testing, Emacs master, current gnat (community or pro)
    - Debian testing, Emacs master, Debian gnat
        su -l root
            aptitude update
            aptitude full-upgrade --without-recommends
        gnat
        libgnatcoll-xrefnn-dev
        gprbuild

Alire.make
    rm -rf alire config
    alire-build

do other package releases:
    ../org.stephe_leake.sal/notes.text           local, alire
    ../org.wisitoken/build/release_process.text  local, alire
    ../org.emacs.wisi/notes.text                 elpa, alire
    ../elpa/packages/gnat-compiler/notes.text    elpa
    ../elpa/packages/gpr-query/notes.text        elpa, alire

    recommended:
    ../org.emacs.gpr-mode/notes.text elpa, alire

build in elpa
    build/Makefile pub

    /Projects/elpa/packages/ada-mode/ELPA.make all
    check for unused sources in wisi; no .o => edit Makefile pub-*

compare:
    (ediff-directories "/Projects/elpa/packages/ada-mode" "/Projects/org.emacs.ada-mode" nil)
    (ediff-directories "/Projects/elpa_release/packages/ada-mode" "/Projects/org.emacs.ada-mode" nil)
        NEWS
            add release date
            add new features
            list fixed bugs

    (ediff-directories "~/.emacs.d/elpa/ada-ref-man-2012.5" "/Projects/elpa/packages/ada-ref-man" nil)
        /Projects/org.adaic.arm_form/NEWS
            add release date, new features

Check copyright on files in elpa
    /Projects/elpa/GNUmakefile check/ada-mode
        # _don't_ follow symlink

    check for bogus execute permissions in elpa
        $ cd /Projects/elpa/
        $ ls -R -l packages/ada-mode | grep -- -rwx
        $ chmod -x *.el *.adb
        # keep execute on *.sh

bump versions
    Gnu ELPA requires single digits between dots in versions; always use three digits

    beta test: don't push to release branch
    release: propagated to release below.

    bump if _any_ changes other than autoloads, so ELPA package handler knows to update
        bump third digit for bug fixes, minor features, no user-incompatible changes
        bump second digit for major features, mostly backward-compatible
            or if third digit gets to 10
            - GPS indentation engine add/delete
            - partial parse
            - delete elisp lexer
            - wisi use virtual tokens in indent
            - ada-mode 7.3 incremental parse
            - ? module?

        bump first digit for really major elisp user-visible changes:
            ada-mode:
            - 5 use parser
            - 6 compute indentation in grammar actions, external parser with error correction
            - 7 move lots of stuff to wisi; many ada-* variables, functions deleted.
            - 8 split out gpr-mode, gpr-query; add eglot

            wisi:
            - 3 project.el integration
            - 4 incremental parse

    NEWS
        if not done above

    wisi-ada.ads    Language_Protocol_Version
    ada-mode.el     ada-wisi-language-protocol-version
        (should have been changed already, but verify;
         should match last mention of language protocol version in NEWS)
        ie, if installed parser must be replaced on upgrade or downgrade
        in particular, if any changes in grammar file!

    ada-mode.el
        Version:
        package-requires
        ada-mode-version

    ada-mode.texi
        @node top
        don't include third digit

    README
        first line

    alire.toml
        only change if a file used in Alire build changed
        version
        depends-on

    build.sh
        alire get (must match alire.toml)
        if -d ../wisi-, WISI_DIR

    # install.sh none

    ada-ref-man.el
        Version:

    build/Makefile
        run uninstall-elpa with old values before changing!
        ADA_MODE_VERSION       for beta, must include timestamp; copy from c:/Projects/elpa/archive-devel
        ADA_REF_MAN_VERSION

    build/uninstall-elpa.el
        wisi version, uniquify-files version

Publish Alire crate
    (dvc-status ".")
    git push
    /Projects/alire-main/bin/alr publish --skip-build https://git.savannah.nongnu.org/git/ada-mode.git `git rev-parse HEAD`
    cp alire/releases/*.toml ~/.config/alire/indexes/community/repo/index/<2letters>/<crate>/

    when all dependencies are in local index:
    cd /Projects/alire-workspace
    rm -rf emacs_ada_mode*
    alr get emacs_ada_mode --build

    git tag done below after pull request accepted; review may find problems

    (dvc-status "~/.config/alire/indexes/stephe/repo")
    (dvc-push "~/.config/alire/indexes/stephe/repo/")

    post ada_annex_p_lr1_parse_table.txt to https://download.savannah.nongnu.org/releases/ada-mode/
        with version
        for people whose machines are too small to regenerate it

publish to elpa devel:
    build/Makefile pub

    (dvc-status "/Projects/elpa/packages/ada-mode")
    (dvc-push "/Projects/elpa/packages/ada-mode")

    If the ELPA processing fails, it logs the error messages in
        https://elpa.gnu.org/devel/<package>-build-failure.txt
        https://elpa.gnu.org/packages/<package>-build-failure.txt

prep for elpa tests:
    build/Makefile byte-compile-clean
    build/Makefile pub-install
    # builds local elpa archive, installs it

    build/Makefile uninstall-elpa
        # for other emacs versions

Emacs 25.3, current gnat/alire
    ~/bin/emacs-25.sh
    build/Makefile install-elpa
    (gpr-query-kill-all-sessions)
    (list-processes)
    # 'd' = kill; gpr_mode_wisi_parse.exe, ada_mode_lr1_wisi_parse.exe
    cd ~/.emacs.d/elpa/ada-mode-7.1.0*
    ./build.sh
    cd .. # allow uninstall-elpa

    restart Emacs to set load-path

    build/Makefile compile-ada-test test-clean
    build/Makefile test TEST_DIR=elpa

    build/Makefile uninstall-elpa
    (gpr-query-kill-all-sessions)
    build/Makefile recursive-clean clean # if changing compilers

Emacs 26
Emacs 27
Emacs 28
Emacs master testing done above.

do alire pull request
    when accepted:
    git tag <branch>-alire-<version>

install current version from ELPA, to test upgrade to new
    (list-packages)
    ~/.emacs.d/early-init.el
        ada-mode 7.1.5 should have required wisi 3.1.5

after Gnu ELPA updated, test install from GNU ELPA devel
    (list-packages)
    5.1.8 crashed emacs for me
    see 'build.sh; install.sh' above for compiling

If release:
    (dvc-propagate-multiple
     '(("/Projects/elpa/packages/ada-mode"      . "/Projects/elpa_release/packages/ada-mode")
       ("/Projects/elpa/packages/gnat-compiler" . "/Projects/elpa_release/packages/gnat-compiler")
       ("/Projects/elpa/packages/gpr-mode"      . "/Projects/elpa_release/packages/gpr-mode")
       ("/Projects/elpa/packages/gpr-query"     . "/Projects/elpa_release/packages/gpr-query")
       ("/Projects/elpa/packages/wisi"          . "/Projects/elpa_release/packages/wisi")))

    git push
    # 24 hrs for web repository to update

    /Projects/web/ada-mode/index.html
        find-replace ada-mode i.j.k
        wisi version does not appear
        _not_ WisiToken (done in wisitoken release)

        echoed to savannah web page on CVS commit via M-x cvs-examine.

        if emacs cvs-examine fails, do 'cvs status' in shell to see real error message (probably IP address confusion)
            # see projects.text "conflicting keys for savannah"
            $ cd /d/Web/savannah/ada-mode
            $ cvs status
            # edit ~/.ssh/known_hosts, delete offending one, repeat 'cvs status'
        (cvs-examine "d:/Web/savannah/ada-mode" nil)
        mark all 'm'
        commit   'c'
        edit commit message "release version i.j.k"
        C-c C-c

        takes ~ 10 min for http://www.nongnu.org/ada-mode/ to reflect cvs commit

    scp /home/stephe/.local/bin/ada_annex_p_lr1_parse_table.txt stephen_leake@dl.sv.nongnu.org:/releases/ada-mode/ada_annex_p_lr1_parse_table.txt-8.0.4

post on:
    https://savannah.nongnu.org/news/submit.php?group_id=11631
        then approve: https://savannah.nongnu.org/news/approve.php?group=ada-mode click submit
        # accessed via News | Manage
    emacs-ada-mode mailing list
    c.l.a newsgroup
    https://forum.ada-lang.io/
    https://gitter.im/ada-lang/Lobby

-------------------
Gnu Emacs Ada mode 8.0 beta released.
-------------------

Gnu Emacs Ada mode 8.0 beta is now available in GNU ELPA devel for
beta testing.

All Ada mode executables can now be built with Alire
(https://alire.ada.dev/); this greatly simplifies that process.

gpr-query and gpr-mode are split out into separate GNU ELPA packages.
You must install them separately (Emacs install-package doesn't
support "recommended packages" like Debian does).

Ada mode can now be used with Eglot; this is controlled by new variables:

ada-face-backend - one of wisi, eglot, none

ada-xref-backend - one of gnat, gpr_query, eglot, none

ada-indent-backend - one of wisi, eglot, none

The the indent and face backends default to wisi if the wisi parser is
found in PATH, to eglot if the Ada LSP server is found, and none
otherwise. The xref backend also looks for the gpr_query executable in
PATH.

The current AdaCore language server (23) support face but not indent.
The current version of eglot (19) does not support face. So for now,
eglot + ada_language_server only provides xref.

The AdaCore language server ada_language_server is installed with
GNATStudio (which ada-mode will find by default), or can be built with
Alire. If you build it with Alire, either put it in PATH, or set
gnat-lsp-server-exec.

I have not tested ada-mode with lsp-mode. You can set ada-*-backend to
'other to expermiment with that, or tree-sitter, or some other
backend.

To access the beta version via Gnu ELPA, add the devel archive to
package-archives:

(add-to-list 'package-archives (cons "gnu-devel" "https://elpa.gnu.org/devel/"))

Then M-x list-packages; the beta release shows as ada-mode version
8.0.3.0.20221106.55317, wisi version similarly.

Please report success and issues to the Emacs ada-mode mailing list
https://lists.nongnu.org/mailman/listinfo/ada-mode-users.

The required Ada code requires a manual compile step, after the normal
list-packages installation:

cd ~/.emacs.d/elpa/ada-mode-7.3beta*
./build.sh
./install.sh

If you have Alire installed, these scripts use it.

-------------------


-------------------
Gnu Emacs Ada mode 8.0.4 released.
-------------------

Gnu Emacs Ada mode 8.0.4 is now available in GNU ELPA.

All Ada mode executables can now be built with Alire
(https://alire.ada.dev/); this greatly simplifies that process.

gpr-query and gpr-mode are split out into separate GNU ELPA packages.
You must install them separately (Emacs install-package doesn't
support "recommended packages" like Debian does).

Ada mode can now be used with Eglot; this is controlled by new variables:

ada-diagnostics-backend - one of wisi, eglot, none

ada-face-backend - one of wisi, eglot, none

ada-indent-backend - one of wisi, eglot, none

ada-statement-backend - one of wisi, eglot, none

ada-xref-backend - one of gnat, gpr_query, eglot, none

The diagnostic, face, indent, and statement backends default to wisi
if the wisi parser is found in PATH, to eglot if the Ada LSP server is
found, and none otherwise. The xref backend defaults to gpr_query if
the gpr_query executable in PATH, to gnat otherwise.

ada-diagnostics-backend controls the source of compilation error
messages while editing.

ada-statement-backend controls statement motion; forward-sexp,
wisi-goto-statement-end, etc. ada-xref-backend controls
wisi-goto-spec/body and Emacs xref commands.

In addition, name completion is provided by eglot if any of the other
backends are using eglot; eglot completion is always better than wisi.

The current AdaCore language server (version 23) supports face but not
indent. The current version of eglot (1.10) does not support face. The
Language Server Protocol does not support statment motion. So for now,
eglot + ada_language_server only provides xref and completion.

The AdaCore language server ada_language_server is installed with
GNATStudio (which ada-mode will find by default), or can be built with
Alire. If you build it with Alire, either put it in PATH, or set
gnat-lsp-server-exec.

I have not tested ada-mode with lsp-mode. You can set ada-*-backend to
'other to expermiment with that, or tree-sitter, or some other
backend. tree-sitter will be fully supported in the next ada-mode
release.

The required Ada code requires a manual compile step, after the normal
list-packages installation:

cd ~/.emacs.d/elpa/ada-mode-7.3beta*
./build.sh
./install.sh

If you have Alire installed, these scripts use it.
-------------------

-------------------
Ada Reference Manual info format 2020.1 released.
-------------------

ada-ref-man 2020.1 is now available in GNU ELPA.

This includes Ada 202x draft 25, as well as Ada 2012. GNAT Community
2020 has some support for some of the new language features in Ada
202x.

There is also now a searchable info index, containing the entries in
the ARM Index.
-------------------

mark fixed bugs
    http://debbugs.gnu.org/cgi/pkgreport.cgi?package=ada-mode
    http://debbugs.gnu.org/Developer.html
    email to nnn-close@debbugs.gnu.org
        subject: copy from bug report
        body: closed by ada-mode version 8.0.4
        don't include Version: header; that's an Emacs version
    debbugs updates ada-mode summary page within half an hour; no emails

bugs:
    https://debbugs.gnu.org/cgi/bugreport.cgi?bug=56236

check https://www.emacswiki.org/emacs/AdaMode
    https://www.emacswiki.org/emacs/StephenLeake

-- end of file
