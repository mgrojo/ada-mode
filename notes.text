build/Makefile gprbuild, tests
Makefile       alire

branches:
org.wisitoken/o.s_l.sal                   - main, used by o.e.a
org.wisitoken.stephe-1/o.s_l.sal.stephe-1 - work, used by o.e.a-2; fix bugs in main
org.wisitoken.stephe-2/o.s_l.sal.stephe-1 - dead (was packrat use mckenzie error recover)
org.wisitoken.stephe-3/                   - restore tree-sitter

possible branch tags:
incremental_parse-pre-config.input_stream o.w.s-2

(dvc-state-multiple
'((xgit . "/Projects/org.stephe_leake.makerules")
  (xgit . "/Projects/org.stephe_leake.aunit_ext")
  (xgit . "/Projects/org.stephe_leake.sal")
  (xgit . "/Projects/org.wisitoken")))

(dvc-state-multiple
'((xgit . "/Projects/org.stephe_leake.makerules")
  (xgit . "/Projects/org.stephe_leake.aunit_ext")
  (xgit . "/Projects/org.stephe_leake.sal.stephe-1")
  (xgit . "/Projects/org.wisitoken.stephe-1")))

(dvc-propagate-multiple
 '(("../org.stephe_leake.sal" . "../org.stephe_leake.sal.stephe-1")
   ("../org.wisitoken"        . "../org.wisitoken.stephe-3")))

update-wisitoken_grammar
(dvc-propagate-multiple
 '(("../org.stephe_leake.sal.stephe-1" . "../org.stephe_leake.sal")
   ("../org.wisitoken.stephe-3"        . "../org.wisitoken")))

 current work
wisitoken-bnf-output_ada_emacs.adb: change _check to _in_parse, other to _post_parse

new test case:
    test_mckenzie missing_name_1 with end_name_optional true
        hangs in tree.current_error


test_mckenzie, test_incremental fail on Multiple_Errors_On_One_Token_*
    Multiple_Errors_On_One_Token_1
        recover_insert_delete node 1 not in tree
    inserted node was on a stream that is now deleted.

    before first recover, Parser_State.recover_insert_delete is empty for both parsers
    after, parser 1 has 4 elements!?

    Parser_State.recover_insert_delete set by:
        parser_lists.update_error, prepend_copy

    in recover, "apply ops to tree" sets local error_recover_ops
        but then wrap check in next_recover_op is bogus

    that is copied into parser_state.current_error_ref
        then calls update_error, which appends ops to parser_state.recover_insert_delete

    parser 1 has (insert renames, identifier, ';')
    parser 2 has (insert ';') ins_node => 0x97f9b50

    after second error recover:
        parser 3 should have (insert ';') from first, ((INSERT, END, -1), (INSERT, IDENTIFIER, -1), (INSERT, SEMICOLON, -1), (INSERT, BEGIN, -1), (INSERT, EXIT, -1), (INSERT, SEMICOLON, -1)) from second
        but it has only (insert ';'), (insert ';'), first corrupted
            something was trying to update recover_insert_delete, but appended instead

    trace second error recover in detail
        parser 5: (empty recover_ops)
            update_error: copies -78:subprogram_body 0x98bb8a0 to -79:subprogram_body 0x98bd1d0

        parser 3: (INSERT, END IDENTIFIER SEMICOLON BEGIN EXIT SEMICOLON)
            update_error: copies 35:PROCEDURE 0x98bd850 to 36:PROCEDURE 0x98c4db0






        inserted node was created in parser 2, copied somewhere in parser 3
            that place needs to update recover_insert_delete
            first it needs to find the error node, then the insert op
            mark inserted node with error node?
                that might be useful elsewhere? In Adjust_Copy?

            find point in parse where this copy happens
                nodes are copied in:
                Breakdown
                Add_Deleted
                Add_Error_To_Input
                Add_Error_To_Stack_Top
                Add_Errors
                Update_Error

            inserted node is -36:SEMICOLON
            contained in

 tree-sitter
need to translate between tree_sitter nonterm token_id, rhs_id and wisitoken production_ids to lookup actions.
    lookup action relies on production_id stored in nonterm
        set by parser reduce using production_id stored in action in parse table
        maybe tree_sitter actually stores something equivalent in its parse tree?
    tree-sitter generate doesn't output productions in any form.
    generated C code has list of tokens, and parse table
    compute productions from table?


    how does Emacs ts map actions to production rhs_id?


add attribute to suppress node name in tree-sitter?
    ie _membership_choice
    https://tree-sitter.github.io/tree-sitter/creating-parsers#hiding-rules
    what exactly is the consequence on the run-time
        it can't actually leave the node out of the tree; incremental edit would not work?
        it's left out of "print tree"?
        it's skipped by tree iterators?

    test with ada_lite_ebnf

edit ada_full.js_good to match wisi generator order, briot changes
    go thru annex P, add missing token labels to ada_full.wy
        done to default_expression
            add that in assign_value?

extract tree_sitter conflict reporting code that finds an example token sequence, add to wisitoken generate

in ada_annex_p.wy, label_opt, identifier_opt are possibly empty
    forbidden in tree-sitter
    comment says split out for match_names
    improve match_names instead


see fixme on %conflict component_list in c:/Projects/org.emacs.ada-mode.stephe-4/ada_annex_p.wy
    not needed if use canonical list pattern?
        does that sacrifice list optimization?
            need to print tree-sitter trees

don't compute recursion if no error recovery

output actions in a wisi-tree-sitter compatible way

consider https://github.com/briot/tree-sitter-ada
    some good conflict reduction
    test/bnf/ada_full.wy


    notes for briot:
        see tick
        don't need 'token' in string_literal
        basic_declaration missing abstract_subprogram_declaration

        list associativity:
            discriminant_specification_list has prec.right
            expression_list has prec.left
            not needed?
            component_choice_list does not have prec

        name_not_function_call
            use in subprogram_specification, generic_instantiation, generic_renaming => reduces conflicts
            missing explicit_dereference

        selected_component does not need prec.left?

        name_for_constraint does reduce conflicts?

        record_component_association_list
            don't need to enforce two positional expressions at this level
            does it reduce conflicts?

        array_type_definition expanded for actions
        slice: why do we care if Proc (Arr (1 .. 2)); is parsed as slice, subtype_indeciation instead of function_call, slice?
            we are not building a compiler
                (there we go presuming the application again. sigh).

        record_component_association_list
            enforces "if first is named, all must be named"
            but not "after first named, all following must be named"
            not worth it

        why do we need prec in selected_component, name_list, raise_expression?

        why do we need separate tree nodes for factor_power, factor_abs, factor_not?
            not used in any queries at https://github.com/briot/tree-sitter-ada/tree/master/queries

        some field names not used in queries (and thus not in ada_full.wy):
            submitted github issue: https://github.com/briot/tree-sitter-ada/issues/2
            selected_component: prefix, selector_name
            slice: prefix
            value_sequence: is_parallel
            *: condition
            *: is_*
            *: endname
            subunit: parent_unit_name

        why combine subprogram_declaration, abstract_subprogram_declaration?
            highlights.scm has:
            (subprogram_declaration "is" @keyword.function "abstract"  @keyword.function)
                could be abstract_subprogram_declaration

            (subprogram_declaration (aspect_specification) @attribute)
                why not mark all aspect_specfication as @attribute?
                or just list both

            locals.scm:8:(subprogram_declaration) @scope
                abstract_subprogram_declaration is _not_ a scope

        comment on primary:
          // _primary might resolve as an '_aggregate',which might resolve as
          // a 'position_array_aggregate',so an expression like
          //     case ( .. )
          // is ambiguous. So we raise the priority here.

            for "case", reducing to non-aggregate is ok, but not other
            cases of this conflict; they might require an aggregate.

    briot says "extension_aggregate allows (parent with value)"
        if extension is a single component?

    direct_name allows string_literal in many places where it makes no sense
        which is why -briot.js doesn't use it
        write bug report for ada RM (on github; ada rapporteur group)
            write example program using all of these, compile with gnat
        name: string_literal ok
        selector_name: string_literal ok
        statement_identifier: not ok
        local_name: ?
        at_clause: not ok

    discriminant_specification_list has prec.right
        specifies conflict resolution?
        => %conflict_resolution ?
        no conflict on discriminant_specification_list in ada_full.wy

    add label in .wy => field
        subtype_indication, object_declaration, etc


    use repeat for canonical list?
        compilation, defining_identifier_list, etc.
        find out how tree-sitter handles that for LR table generation

add emacs wisi tree-sitter
    wisitoken-parse-tree_sitter.ads:
        derive syntax_tree from wisitoken.syntax_trees.base_tree
        add common operations to base_tree
            id, text ...
            change wisitoken-parse.ads Parser to use Base_Tree'class?

    split out tree-sitter runtime binding to separate branch/package/crate?

need parse js => output js in ada_full order to compare -briot.js to ada_full.wy
    javascript_simple.wy
        then can tell briot what I changed
        https://github.com/tree-sitter/tree-sitter-javascript/blob/master/grammar.js
        that also allows using any tree-sitter grammar directly
            except it requires javascript interpreter to run embedded functions. sigh.
            or require define Ada equivalents.

add support in wisi Ada for named fields; wisitoken_grammar declaration.kind

add another mode ada-ts-wisi-mode that uses briot's parser directly, with the wisi api
    mostly duplicates ada-mode, but syntax tree is different

    see if it's faster

and another ada-ts-mode that uses yuan's tree-sitter stuff for indent, faces

ada placeholders: comment-one-line not implemented in tree-sitter
    need external scanner

Implement minimal_complete for packrat - loop thru open productions, insert minimal next token.

left_breakdown can edit error nodes in parse
    ie name error on nonterm, other error already on first terminal
    breaks parser_state.recover_insert_delete
    test_incremental.adb Multiple_Errors_On_One_Token_1, _2
    test_mckenzie_recover.adb Multiple_Errors_On_One_Token

        could pass recover_insert_delete to Left_Breakdown; kludge
        need error id indirection; org.wisitoken.stephe-3
            increment when call mckenzie recover
            linear search of tree.errors to find it

previous fix is in tree; apply again?
    but only have insert/delete, not other ops.
        unless test_mckenzie; then have full ops in Recover_test
        shades of Volkswagen deiselgate :(.

wisitoken-syntax_Trees.adb Current_Error_Ref
    if assert Result = (full aggregate), requires more than 20 parallel parsers.
    need better error message?

do_deletes called way more times than it needs to be
    move out of parse_verb
    or only do if result verb is shift


ediff of *.wy hangs
    mmm-mode vs wisi-parse-incremental :wait nil

Not doing packrat indirect left recursion
    ticket V415-028; AdaCore says they don't need it for Ada
    doc in wisitoken user guide

wisitoken-grammar-mode test/incremental_04.wy
    see FIXME: new error correction feature.
    try tree-sitter, ask Max Brunsfeld

redundant minimal_complete_actions:
    in ada_annex_p parse_table:
    state 12 minimal_compelete_actions:
        ((1 sequence_of_statements 17.0), (2 sequence_of_statements 17.1))
        redundant, because optimized_list

followed_by: improve to show expansion that gives the conflict for optimized_conflict_02.wy
        (no optimized_list)
        add option --no_optimized_list for _01.wy (turn off error recover? )
        also for ada_annex_p

        need to actually expand nonterms to show token sequence
    when can 'label_opt' be followed by 'parallel'?

    parallel occurs in :
    value_sequence : '[' ['parallel' ['(' chunk_specification ')']] iterated_element_association ']' ;
    iteration_scheme
      | ['parallel'] 'for' procedural_iterator
      | 'parallel' [ '(' chunk_specification ')' ] 'for' loop_parameter_specification
      | 'parallel' [ '(' chunk_specification ')' ] 'for' iterator_specification
    parallel_block_statement
      : 'parallel' 'do' handled_sequence_of_statements 'and' statement_AND_list 'end' 'do' ';'

    label_opt occurs in :
    loop_statement
      : label_opt [iteration_scheme] 'loop' sequence_of_statements 'end' 'loop' identifier_opt ';'
    block_statement
      : label_opt ['declare' declarative_part] 'begin' handled_sequence_of_statements
        'end' identifier_opt ';'

    expand iteration_scheme in loop_statement:
    label_opt parallel for procedural_iterator loop ...

    document this process in wisitoken user guide; don't need code.
        unless automating helps review all conflicts
            could continue with minimal_action to get terminal token sequence.

add general conflict resolution mechanism?
    solve Java expression problem

Find_matching_name compares large amounts of text
    Name_Region (sequence_of_statements) returns the whole sequence
    should return invalid_region
    declare IDENTIFIER as name
    or compare one char at a time, fail on first diff

terminate duplicate_state missed one
    convert_if_to_case.ada_lite
task 0 3: (2891 : 20:(SEMICOLON, (145 . 145)), 2865 : 19:(IF, (143 . 144)), 2817 : 18:(END, (139 . 141)), 2724 :(sequence_of_statements, (97 . 137)), 2646 : 13:(ELSE, (89 . 92)), 2505 :(sequence_of_statements, (49 . 87)), 2351 : 7:(THEN, (41 . 44)), 2090 :(expression_opt, (25 . 39)), 1701 :(IF), 1216 :(EQUAL_GREATER), 783 :(NUMERIC_LITERAL), 368 :(WHEN), 169 : 3:(IS, (20 . 21)), 45 :(expression_opt, (6 . 18)), 1 : 1:(CASE, (1 . 4)), 0 :)
task 0 2: (2891 : 20:(SEMICOLON, (145 . 145)), 2865 : 19:(IF, (143 . 144)), 2817 : 18:(END, (139 . 141)), 2724 :(sequence_of_statements, (97 . 137)), 2646 : 13:(ELSE, (89 . 92)), 2505 :(sequence_of_statements, (49 . 87)), 2351 : 7:(THEN, (41 . 44)), 2090 :(expression_opt, (23 . 39)), 1701 :(IF), 1216 :(EQUAL_GREATER), 783 :(NUMERIC_LITERAL), 368 :(WHEN), 169 : 3:(IS, (20 . 21)), 45 :(expression_opt, (6 . 18)), 1 : 1:(CASE, (1 . 4)), 0 :)
    should have terminated one!

Plot generate time as a function of task_count
    delete generate multi-task
    ensures consistent state numbers.

    super needs C_Tree to compute unique state numbers.
    w workers
    worker gets N states, returns M new
    of which Md are also found by other workers before wi are processed
    super searches/inserts M states in 1 trees, (M - Md) in w trees.
    when average M << N (later in process), worker search dominates super insert => parallel wins,
    when average M >> N, super insert into w workers dominates worker search
    ada.wy states: 469_463
        rows:     113; initial item sets time: 178.?
        rows:     467; initial item_sets time: 168.460805229, max_row_depth: 14 average_row_depth: 13
        rows:    1877; initial item_sets time: 165.346752806, max_row_depth: 12 average_row_depth: 10
        rows:  62_039; initial item_sets time: 163.757085680, max_row_depth: 9 average_row_depth: 4
        rows: 124_087; initial item_sets time: 161.564576128, max_row_depth: 9 average_row_depth: 2
        rows: 248_177; initial item_sets time: 163.082249550, max_row_depth: 9 average_row_depth: 1

delete descriptor.case_insensitive?
    used in regexp lexer?
    move to lexer?

entire declarative_part is labeled recover_conflict, so it is all broken down to terminals!
    not incremental!
    happens whenever there is more than one parser after recover
    don't breakdown until encounter error
        then let breakdown_recover_conflict be one error recovery strategy
        benchmark set verbosity debug=1, Edit_Tree output terminal count from recover_conflict
    wait to see if this is a problem

wisitoken_grammar_1.wy
    nonterminal
  : IDENTIFIER (COLON | COLON_COLON_EQUAL) rhs_list semicolon_opt
    %((wisi-indent-action [[nil 2] 2 2 (wisi-block 2) 2]))%
    indent not applied to (COLON | COLON_COLON_EQUAL); actions not copied to new nonterminal
    need error

Tree.validate check that all tree.nodes are in tree
    possibly in following_deleted
    call it in syntax_Trees.clear_parse_streams

write Python INDENT, DEDENT as re2c code
    Implement as strict extension to wisi lexer - override methods for generate.
    similar to tree-sitter external scanner
    ideally in a separate emacs module!

set_parents is not incremental
    benchmark current
    descend tree; if find a parent link, no need to descend that branch
    insert_token also needs to set parents?
    see fixme

separate heap for minimal_complete
    t_mck extra_name_2

c:/Projects/org.wisitoken.stephe-1/wisitoken-syntax_trees.ads:2686:            --  FIXME: change to ptr like error_list, for space saving?
    use memory benchmark
    may also affect speed

error recover try prev solution first - new strategy.

test_incremental.adb Recover_1 "delete empty nonterm" -27:(aspect_specification_opt)
    better: don't delete; peek ahead to first terminal, reduce until aspect_specification_opt is shiftable

String_literal, numeric_literal, identifier are equivalent - only insert one
    minimal_complete does this for expression

move Execute_Actions to wisitoken.parse?
    lots of shared code between packrat, lr
    add version that ignores action_region_bytes, for no_recover, packrat

syntax_trees find_new_line
    If line - 1 = .line_last, start at .line_last. Do binary search?

mckenzie_recover-explore Try_Insert_Quote
    often don't know where parse error is; do both b and c
        actually, parse error is after current_token; that might help.

deallocating Graph takes as long as computing redundancy
    use storage_pool to deallocate all at once?
        Unchecked_Deallocate_Subpool.

incremental parse rationale
    have to compute absolute buffer_pos for tokens for various things
        either shift all during edit_tree (not incremental), or sum previous on use (also not incremental)
        buffer_pos used for; review
        in_parse actions; name compare
        sequential_index init; required for error correction
        post_parse actions; line_at_pos, token_at_pos

    if choose compute on use;
        store length in each token, plus trailing whitespace
        to compute byte_region in post-parse, sum all previous nodes, and cache it
            also cache in nonterms


    shift approach avoids caching, but we already cache parent links
    cache approach avoids computing nodes after region required for post-parse action => some gain in compute time

    tree-sitter doesn't store text regions in syntax_tree, just text length
        no Shift in Edit_Tree
        byte_region (node) requires compute begin_pos for each node in path from root.
        non_grammar must store whitespace
            maybe add trailing_whitespace_bytes to each node

[Wagner Graham 1998] doesn't modify the tree structure for
    Left_Breakdown; it just moves the Current_Token pointer around.
    requires significantly different tree structure.
        child pointers are bastardized as stream pointers.
    rest of parser must understand that.
    doesn't work for generalized?
    requires merge edit_tree into incremental parse
    faster? less allocate/deallocate

branched parse stack would simplify duplicate_state check?
    but have to move branch point in error recover for push_back, undo_reduce.
        or not; the other parser will do that?

expand description of labels in wisitoken-user_guide

add precedence to reduce conflicts?
    lots of tree-sitter grammars use precedence
    implement each of those?

target AdaWebPack
    https://github.com/godunko/adawebpack/
    or java byte code?
    really compete with tree-sitter

See emacs hash_table for hash of bytes

auto_token_labels
    check for empty statement-action params
        wisitoken_grammar_1_bnf.wy nonterminal_009

doc ebnf vs actions in wisitoken.texi
    autolabel tokens

Docs/error_correction_algorithm.tex
    use mmm-mode for Ada code in lstlisting?
    (mmm-add-classes '((lstlisting-c++
                    :submode js-mode
                    :front "^\\\\begin{lstlisting}"
                    :back  "^\\\\end{lstlisting}"
                    :front-offset (end-of-line 1)
                    :back-offset (beginning-of-line -1))))
    (mmm-add-mode-ext-class 'latex-mode nil 'lstlisting-c++)

    give more detail on base McKenzie; don't use McKenzie notation.

    Plot recover time as a function of task_count

    tree-sitter can't handle ada:
    it's using some very non-linear algorithm to generate the LALR states,
so it takes forever on a language the size of Ada; I killed it after 90
minutes

    bogus input: In general, the error correction hits
the enqueue_limit in cases like this - it enqueues lots of
configurations that try to make progresss, but gets nowhere. The time to
hit that limit is fairly consistent, and the user can set that limit.

    ada-mode/test compare
        tree-sitter java
            https://github.com/tree-sitter/tree-sitter-java
                compare tree-sitter generate time to translating java_ch19.wy
            find java test set on web; some error correction papers mention that
            measure parse time difference correct code vs error correction
            add totally bogus file; gpr file, text file in Ada parser

        Bison?
        ANTLR  https://github.com/Alex-Gamper/Ada-Grammar.git

    Get Ludovic to enable --recover-log, publish real data from production environment.
        email sent 24 Jul
        enhance to capture files

   - ask for review
     - Stefan Monnier - email sent 24 jul
     - Emmanual Briot - LinkedIn message sent 24 jul
     - adacore adalang Raphael Amiard raph-amiard - email sent 24 jul
     - Max Brunsfeld tree-sitter - added to issue 693 24 jul
     - ada-mode mailing list - posted 24 jul
     - emacs-devel mailing list - posted 24 jul

   - publish in some ACM journal?
     McKenzie in ACM Transactions on Programming Languages and Systems
     Fischer/Mauney in  Acta Informatica Springer
     Stefan Monnier paper on SMIE in  https://programming-journal.org/

implement %local_keyword?
    for ada_annex_p aspect_mark 'class', some others
    add in-parse action to check identifier in local_keyword set.

need gnat-prep for tree-sitter
    most devels won't have tree-sitter

add tree-sitter parser, lexer
    ada_lite.wy
        getting syntax errors
            that's just generalized parsing; the lexer is aware of the parser state

    write Ada code to traverse tree-sitter tree
    report errors:
        ts_node_has_error
            traverse tree, checking each node

        find nodes with errors Tree Query for `(ERROR)`; ts_query_new, ts_query_cursor_new
            https://tree-sitter.github.io/tree-sitter/using-parsers#pattern-matching-with-queries

        https://github.com/tree-sitter/tree-sitter/issues/255 for adding APIs suited toward user-facing error messages.


    case insensitive:
        alias(/[fF][oO][rR]/, 'for')

    translate tree-sitter parse tree to wisitoken?
        api.h has root, node_children,  etc.

    time parts of w-bnf-generate tree_sitter; seems slow on ada_annex_p

    need to_grammar for actions
        which needs all tokens defined
        and is done before translate_to_tree_sitter is done
        so do subset of translate_to_bnf
            allow to_grammar to call execute_actions and declare the tokens.
            preserve token numbers for actions
            build the actions

improve bnf generation
    copy/preserve trailing comments on ebnf nodes
        ada_ebnf.wy ";; end of file"
        python_ebnf_bnf.wy
            atom: forced terminating semicolon should be before trailing comment

    java_ebnf.wy Statement
        inline expand ()

    java_types_ch19.wy Dims top level is canonical list, list_element = Annotation_list LEFT_BRACKET RIGHT_BRACKET
        requires adding 'empty' to Annotation_list instead of inserting optional rhs
        or first phase of extracting common sequences.

    python.wy
        decorated: decorators (classdef | funcdef | async_funcdef)
            expand group locally
            helps if user needs to copy bnf output to .wy for actions

        testlist_star_expr use names from alt_list for nonterminal

        try_stmt: indent +1 for paren

        classdef: don't copy newline in insert_optional?

   separate pass to eliminate single-token productions
       ada_annex_p explicit_generic_actual_parameter ::= expression
       also have to edit conflicts, or user will be confused
       output substitutions so user can do them

redesign parse table to speed recovery
    group identical reduce actions
        ada_mode-recover_02.adb
        only do each reduce once, then insert lots of terminals

wisitoken user guide mention concrete syntax tree

java-ch19.wy TryStatement has optional statement-end
    need override on previous tokens

improve mismatched paren checks in actions
    maybe just in wisitoken_grammar_mode?
        only active if mmm-mode recognizes action; improve that?
    partial parse in ada.wy?

make "canonical list" compatible with packrat?
    ie swap rhs_index 0, 1
    better to implement list in packrat

c:/Projects/org.emacs.java-wisi/test/recover_001.java
    don't delete next if minimal_c_a inserted

    minimal_complete_actions isn't globally minimal
        state 245 could use
            classOrInterfaceType <= IDENTIFIER
            lambdaParameters <= IDENTIFIER
            primary <= IDENTIFIER
            classType <= IDENTIFIER

            picks first = classOrInterfaceType => inserts .class,  reduces to primary
            find that in a post-optimize step?

Python
    c:/Projects/org.emacs.python-wisi/python.wy
    need INDENT, DEDENT in lexer
    no other new syntax
    only one state with more than two actions
    reduce conflicts by recognizing canonical list in local_stmt (correctly)
    improve process_main compile time
        reduce number of statements in each subprogram
        or use text_rep

lalr generator bug
    long term fix; reimplement lalr using deremer, penello 1982
    lalr_generator_bug_01.wy => error
        parser 0 looking for 19.0:association <= identifier => expression
         0: 10:  7:(IDENTIFIER, (38 . 38)) : shift and goto state 18
         0: 18:  8:(RIGHT_PAREN, (39 . 39)) : reduce 1 tokens to name ...   (state 10) goto state 22
         0: 22:  8:(RIGHT_PAREN, (39 . 39)) : reduce 1 tokens to primary... (state 10) goto state -1

        state 10 missing goto for primary, because that's an error;
        the only choice would be goto state 36, but there's no
        unary_adding_operator_opt on the stack.

        state 22 should not have both 23.0 and 25.0
            but lalr_goto_transitions clearly does that
                could include sequence of empty nonterms in first_nonterm_set, return two goto_sets
            compare to bison lalr_generator_bug_01.bison_table
            parse .input using bison table
            bison state 36 is the same

example diff between lr1, lalr recover
    ./ada_lite_lalr_run.exe -m 1 -t 1
    ada_lite_recover_repeatable.input:45:
        package body P is procedure Remove is begin A := B; exception end; A := B; end Remove; end P; procedure Q;
        lr1: reports syntax error, all 4 parsers find solutions quickly
        lalr: reports match_names_error, two parsers fail on cost

        similar on line 47; lalr finds no solutions

try packrat indirect recursion solution
    see paper by laurent, mens
        in ebooks/parsing, google drive
        used in https://tatsu.readthedocs.io/

    https://arxiv.org/abs/2005.06444 pika parser
        bottom-up, right-to-left
            allows error correction
            same as LR?

    http://mousepeg.sourceforge.net
        http://www.romanredz.se/pubs.htm

    docs/indirect_recursion_in_packrat.latex
        finish it

    add "run grammar.wy input" main for -procedural_*?

    adding head, grow_set to Parser
        must be on a stack for nested recursion?

    test with optional unary minus

    warth_left_recurse_expr_1.adb : Test_Parse_Proc

    trying to implement full warth, but it's missing stuff, and some makes no sense
        try https://github.com/alexwarth/ometa-js
        or figure out what it must do; ie understand the algorithm

    try S Medeiros, F Mascarenhas, R Ierusalimschy 2014 Left recursion in parsing expression grammars.pdf
        very similar, mentions "memoization scope", doesn't say how to detect recursion

    or adapt langkit with pre-computed indirect


Implement Redziejowski language hiding check

packrat space use
    can free low level derivs; they will never be evaled
        adacore only stores 16 derivs
        derive condition
        use free list in syntax tree

add packrat error recover
    "d:/Books/eBooks/Parsing/Fischer Mauney 1992 - Simple fast LL1 error repair.pdf"
        assumes no backtracking?
        pg 112: "parser announces error when prediction does not fit next input"

    https://arxiv.org/pdf/1806.11150 error recovery for PEG
        requires adding error recover labels to grammar
        compares LPegLabel to ANTLR, on synthetic errors

adacore langkit_support.packrat implements one row of the derivs table
        it only stores 16 most recently computed items; enough to compute a typical subroutine?
            slows down error recovery if have to go back more than 16 (not likely)
            clearly adequate given fast performance
            compare performance to a sparse vector
        libadalang.analysis.parsers Parser_Private_Part_Type stores all the rows

Write libadalang python code to generate wisitoken grammar from AdaCore grammar.

do google search for "ada parser generator"
    add wisitoken to those sites

rename mckenzie to dpa_explore?
    dpa = deterministic parsing automata (McKenzie)
        = Deterministic Pushdown Automata (Wikipedia, Grune)

    aflex uses "dfa" deterministic finite automata
    grune also uses 'deterministic fs automata' (Finite State)

    includes special rules

integrate with emacs module

 refs
build/release_process.text

d:/Books/eBooks/Parsing/Wagner, Graham 1998 Efficient and Flexible Incremental Parsing.pdf
d:/Books/eBooks/Parsing/Lahav 2004 Efficient Semantic Analysis for Text Editors.pdf

# end of file
