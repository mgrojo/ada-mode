General notes on Emacs Ada mode

build/Makefile
build/wisi/Makefile

o.e.a.stephe-1 (from o.e.a): external process opentoken parser
o.e.a.stephe-2 (from o.e.a): compute indent via indent-action deltas in grammar; working
o.e.a.stephe-3 (from o.e.a.s-1): FFI parser
o.e.a.stephe-4 (from o.e.a.s-2): syntax error handling in fasttoken
o.e.a.stephe-5 (from o.e.a): available

(add-to-list 'load-path "/Projects/org.emacs.ada-mode")
(setq ada-xref-tool 'gnat_inspect)

run test from emacs -Q using installed elpa:
(progn
;;  (add-to-list 'exec-path "/apps/GNAT-2014/bin")
  (setenv "PATH" (mapconcat 'identity  exec-path  path-separator))
  (package-initialize)
  (setq debug-on-error t)
;;  (setq wisi-debug 1)
  (add-to-list 'load-path "/Projects/org.emacs.ada-mode/build")
  (load "run-wisi-test")
  (setq default-directory "/Projects/org.emacs.ada-mode/build/wisi/")
  (run-test "ada-number-literal"))

run test from emacs -Q using source:
(progn
  (add-to-list 'exec-path "d:/apps/GNAT-GPL_2016/bin")
  (setenv "PATH" (mapconcat 'identity  exec-path  path-separator))
  (add-to-list 'load-path "/Projects/org.emacs.ada-mode.stephe-1")
  (add-to-list 'load-path "/Projects/org.emacs.ada-mode.stephe-1/build")
  (load "autoloads.el")
  (load "run-indent-test-wisi-ext-gpr_query")
  (setq wisi-debug 1)
  (setq ada-wisi-font-lock-size-threshold 0)
  (setq debug-on-error t)
  (setq default-directory "/Projects/org.emacs.ada-mode.stephe-1/build/wisi/")
;;  (run-test "../../test/ada_mode-interactive_common.adb")
  (find-file "../../test/ada_mode-parens.ads")
  (ada-wisi-debug-keys))

(progn
  (setq eval-expression-debug-on-error nil)
  (add-to-list 'exec-path "d:/apps/GNAT-GPL_2016/bin")
  (setenv "PATH" (mapconcat 'identity  exec-path  path-separator))
  (add-to-list 'load-path "/Projects/org.emacs.ada-mode")
  (add-to-list 'load-path "/Projects/org.emacs.ada-mode/build")
  ; (setq debug-on-error t)
  (load "autoloads.el")
  (require 'ada-mode)
  (setq default-directory "/Projects/org.emacs.ada-mode/")
  (load "run-indent-test-gps")
  (find-file "/Projects/org.emacs.ada-mode/test/ada-gps/ada_gps_bug_005.adb")
  )

install packages in -Q:
(progn
 (require 'package)
 (add-to-list 'package-archives (cons "test" "/Projects/elpa/archive/packages"))
 (list-packages))


 Eurocontrol bugs:

ada_mode_gps_indent bug #1: wisi-validate-cache: parse failed
    use wisi parser for navigation, face with gps for indent; done
    AdaCore ticket: not reported

ada_mode_gps_indent bug #2: does not honor ada-broken-indent
    GPS code patch - done
    AdaCore ticket: Q406-078

ada_mode_gps_indent bug #3: comments inside expressions badly indented
    post processor for comments. - done
    AdaCore ticket: Q406-082

ada_mode_gps_indent bug #4: multiline comments starting after code
    post processor for comments - done
    AdaCore ticket: Q406-083

ada_mode_gps_indent bug #5: jumps to column zero after RET
    insert fictitious code when call GPS - done
    AdaCore ticket: not reported

ada_mode_gps_indent bug #6: indentation inside aggregate which is a parameter
    GPS code patch - done
    AdaCore ticket: Q406-085

ada_mode_gps_indent bug #7: comments after last parameter and end of statement
    fix ada-gps-comment - done
    AdaCore ticket: not reported; GPS gets it right

ada_mode_gps_indent bug #8: double ada-indent-broken in rare cases
    bug triggered by coding standard violation; low priority
    needs GPS code patch; waiting for AdaCore
    AdaCore ticket: Q406-088

ada_mode_gps_indent bug #9: hanging indent in expressions
    bug in GPS
    'and' expression also wrong in ada-wisi
    also tests ada-indent-hanging-rel-exp

ada_mode_gps_indent bug #10: more comments, ada-gps only
    GPS gets this right
    fix other comment cases in gps code, delete ada-gps-comment

ada_mode_gps_indent bug #11: hanging indent in named association
    bug in GPS

ada_mode_gps_indent bug #12: comment align with hanging code.
    bug in GPS

 Eurocontrol work:
(setq ada-gps-size-threshold 0)
test/debug.adb

(setq ada-gps-size-threshold 100000)
test/debug_wisi.adb

disable or use electric-indent-post-self-insert-function
    called during ada-indent-newline-indent
    on post-self-insert-hook
        use that for ada-mode capitalization

AdaCore suggests using the libadalang indentation engine
    see Q406-078
    doesn't tolerate syntax errors yet
    fix as much of ada-gps as possible, then wait for libadalang to replace it

ada_mode_gps_indent 1.001 compiled for linux in c:/tmp

download GPS 17.1, verify and report GPS bugs
    see email for list

ada-indent-hanging-rel-exp
    see FIXME: in ada-wisi.el
    need input from ludovic

    add to NEWS
    add to .texi

    not relevant for gps?

    more cases:

    if FTFX.Main_CASA_Result.Suspension.Status /= Previous_Suspension_Info.Status
      or FTFX.Main_CASA_Result.Suspension.Delay_Threshold_Exceeded_Reg
        /= Previous_Suspension_Info.Delay_Threshold_Exceeded_Reg
    wisi aligns "/=" with "or"

if wisi is too slow on large buffers:
    see o.e.a.stephe-2 parse-action
    modify grammar actions:
        (cl-ecase wisi-indent-engine
         (gps ;; reduced to just face, nav
            (wisi-statement-action ...)
            (wisi-containing-action ...))
         (wisi
            ... current code))

 wisi work
rewrite README to be useful as list-packages long description
    ie an advertisement for the package, not an install guide

show list of projects in ada | Project | select
    see prj_select for code

Try antlr error recovery on Ada. Add elisp target.

Compare libadalang grammar to mine/lrm

Report byte-compiler warning bug.
    wisi-compile.el binds byte-compiler-warnings
    Why is ada-indent ok (in stephe-2)?

indent bugs:
   if not Update_Flight_Status
     and then FTFX.Covering.Cumulative_Shift > Time.Zero
     and then Input_ATOT /= Time.None_Time
     and then Normal_Flight.Profiles (Flight_Model.CTFM) /= Curtain.Profile.None
       and then Input_ATOT /= Take_Off_Time (Normal_Flight, Flight_Model.CTFM)
   then
   end if;

   C :=
     Fim.Kind (Action_Info.Message) /= Fim.DLA
       and Fim.Kind (Action_Info.Message) /= Fim.APL
         and Fim.Kind (Action_Info.Message) /= Fim.ACH
           and Fim.Kind (Action_Info.Message) /= Fim.ARR
             and Fim.Kind (Action_Info.Message) /= Fim.DEP;


gpr_query --help show relevant trace settings
    add -v; shows *.ali

see pdf-tools for ideas on compiling during package install

gps vs wisi
    when hit return with invalid syntax, does not indent until type some code

    comments aligned with prev code, not next

    missing ada-indent-label

    conditional expressions different continuation

    expression function "is"

    generic renaming

    generic package continuation

    named association continuation

    missing ada-indent-renames > 0

    overriding continuation

    bug in record field; ada_mode-nominal-child.ads

    aspect continuation

    anonymous access function return type

ada_mode_gps_indent.gpr use gps.gpr?
    reduce source installed?
    or doc why not

https://www.emacswiki.org/emacs/AdaMode

update ada-mode-keys.el on savannah

C-u C-c C-r append references
    rewrite gnatxref to not use compilation-start
    or use xref

gpr_query does not see libraries?
    need clear example; libadalang mains vs langkit?
    compare to GPS, gnatinspect

change Emacs manual section on ada-mode to mention elpa

new syntax in AI12-061:
    http://www.adacore.com/developers/development-log/NF-17-P617-043-gnat

adding "<" => "<" still confuses wisi

ada-goto-declaration-start
    fails on task declaration
        only a problem if misusing C-c C-b ada-make-subprogram-body to make a task body
        C-x C-e skeleton expand works fine

        ada-make-subprogram-body should throw an error if it's not on a
        _subprogram_ spec, and recommend C-c C-e in the error message.

        but also fails on
        task body TA is
        begin
           null;
        end TA;

        fix the latter, see if it fixes ada-make-subprogram-body
            if not, make it throw an error.

    fails on separate (P) procedure X;
        C-c C-e works

        but also fails on
        separate (P)
        procedure X;
        is
        begin
        end X;

        fix the latter, see if it fixes ada-make-subprogram-body
            if not, obsolete that.

add gnat_find_opts or obj_dir?
    see email from Ludovic Brenta

$ADA_OBJECTS_PATH...= in .prj:
    += for list
    Needs $CUR_DIR (or PRJ_DIR?)

    but doesn't fix gnatfind xref problem?
        test

ada-mode.texi
    add "upgrading from 4.0" section
        obj_dir is now ignored
        therefore gnatfind requires gpr_file

add "show all overloads" in navigate
    leave out file, line, col from gpr-query id

fill comments:
    set `fill-paragraph-function' to `ada-fill-comment-paragraph'

    `ada-fill-comment-paragraph' doesn't respect the region

    fix errors in filling:
procedure Non_Comment           -- The following line will be removed on M-Q,
                                --
is                              --  * if it was an empty comment.

   E : String := (1 =>    -- The following line will stay when pressing M-Q,
                          --
                          --  * even though it was empty.
                    'A');


add gpr-projects.el in emacs 25
    see project.el

add gpr-ede.el
    see ede.el

    compare to project

see http://ecb.sourceforge.net/ for ideas?
    or add Ada to that?

get casing from gpr file

gnat-core support RTS choice
    with GNAT GPL 2014:
    foo.gpr contains:
       package Builder is
          for Default_Switches ("ada") use ("--RTS=sjlj");
       end Builder;

    'gnat list -v -P foo.gpr' returns the wrong system library.

    'gnat list -v --RTS=sjlj' returns the correct system library.

    add project variable 'rts'

Gpr_query
    gnatcoll gpl 2015 has full aggregate support
        provide gpr_query_2014, gpr_query_2015, pick one at compile/install time

    check gnatinspect for new features

    grok --RTS
        may be already done in 2015:
            for Runtime ("ada") use "stm32f429i-disco-rtos";


test with gnat gpl 2015

completion
    (info "(elisp)Completion")
    examples:
        Ada.Text_IO.<tab> => Put, Put_line, Get, etc
            needs new query; all symbols that match prefix
            better as an ASIS query?

        what does GPS do?
            works on non-compiled, bad syntax code
            type 'with '; puts up a list of all packages in the project.
            type 'with Ada.'; list of all children of Ada
                requires scroll, <ret> to select
                while scrolling, puts up help text next to list

            type 'Put', puts up a list of all simple names in project matching that prefix
            type 'Put (', puts up a list of all params of all Puts (_not_ filtered by current context clause)

            does _not_ handle 'foo_io.put', where 'foo_io' is an instance of A.Tio.float_io.
                maybe it would if foo_io is:
                    a library package instantiation
                    a local instantiation, but was previously compiled

            find the GPS source code

use goto-decl-start to indent aspects?
    avoid lots of nested cond/cl-ecase in ada-wisi-before|after-cache

c:/Archive/Emacs/slime-2.10.1.tar.gz

http://wikemacs.org/wiki/Projectile

face actions in gpr grammar?

after ada-mode is fast enough:
    built-in ada-mode: (make-obsolete 'ada-mode "use later version from ELPA via `list-packages')

use cl-lib class/method for dispatching

"others" clauses in all case statements, that return an indention of 0
(or something similar) instead of throwing errors. They could still
throw errors if wisi-debug > 0.

emacs 25 compile.el supports HYPERLINK in compilation regexp; use for secondary ref?
    ada-gnat-compile.el ada-gnat-compilation-filter


 speed up, handle bad grammar

implement packrat in fasttoken, generate elisp

Use adacore langkit to generate parser, run as module
    too hard to design AST types for grammar, since don't need them for ada-mode; maybe ok if that's already done

parser speed dominated by set-text-properties
    compute indent directly in parser actions
        indent-action takes list of delta_indent, one per token
    only set text properties for other things

convert OpenToken to generate tables for LR1 parser
    add error handling

wisi-generate write defun for grammar actions
    so they can be byte compiled
    faster?

speed up by not binding wisi-tokens for null action

skip blocks of text unless needed for current user command

    two grammars
        use elisp parser
            simplifies debugging, installation

        coarse grammar skips all non-block statements

        sets high level caches that are start/end points for detailed grammar

        invalidate both for any change; "end" can make a new block.

        define both in one .wy file?
            share keywords, tokens

        start with test language in .wy


    skip statements at lexer level?
         mark all tokens as level 1 or 2
         level 1: function begin end if loop etc
         parse level 2 on demand

5.1.c: GPS sub-process indentation engine
    build/Makefile

    (progn
      (require 'ada-gps)
      (setq ada-gps-exec (concat default-directory "build/ada_mode_gps_indent")))

    Version in a_m_gps_i for upgrade control


    d:/Apps/GNAT-gpl_2016/gnatcoll-gpl-2016-src/src/sqlite/gnatcoll-xref.adb
        7252 lines, 256857 chars

    wisi timing:
    (progn
        (ada-wisi-setup)
        (wisi-invalidate-cache)
        (time-it (lambda () (indent-region (point-min) (point-max))) 1))
        2.062000

    (time-it (lambda () (indent-region (point-min) (point-max))) 1)
        0.531000

    (progn
        (goto-char (point-max))
        (forward-line -3)
        (time-it 'indent-according-to-mode 10))
        0.001 seconds

    ada-gps timing:
    (time-it (lambda () (indent-region (point-min) (point-max))) 1)
        ~700 seconds?

    (progn
        (goto-char (point-max))
        (forward-line -3)
        (time-it 'indent-according-to-mode 10))
        Total 1.857000 seconds; per iteration 0.185700

    include *.adb, build/Makefile in ELPA for gpr_query, ada_mode_gps_indent

see https://github.com/ensime for Emacs SCALA compiler interface
    c:/Archive/Emacs/ensime-emacs-master.zip

5.1.c: use compiled OpenToken parser in background process
    (setq wisi-ext-parse-exec "/Projects/org.emacs.ada-mode.stephe-1/build/wisi/ada_mode_wisi_parse.exe")
    build/wisi/Makefile
    build/Makefile

    (setq wisi-parser 'elisp)
    (setq wisi-parser 'ada)
    (setq wisi-ada-parse-exec-opts "-v")
    (setq wisi-ada-parse-exec-opts nil)
    (setq wisi-ada-parse-debug 1)
    (setq wisi-ada-parse-debug 0)
    (setq wisi-debug 2)
    (setq wisi-debug 1)
    (setq wisi-debug 0)

    c:/Projects/org.opentoken.stephe/build/debug/Makefile

run all ada-mode tests with ext parser

do FFI

wisi-parse-buffer is slow:
    philippe.waroquiers@eurocontrol.int has a file that takes 10 seconds to parse with Emacs Ada mode 5.1.4
        needs to be < 1 second
        apparantly around 70,000 lines, 250,000 bytes

    => gnatcoll-xref.adb needs to be < 0.2 second

time wisi-parse-buffer and portions thereof
    'ada-lex
        (time-it 'wisi-ext-lex 1)

    'wisi--lex
        (time-it 'wisi-lex-buffer 1)

    'actions:
        (progn
         (setq wisi-ext-parse-debug 1)
         (wisi-invalidate-cache)
         (wisi-ext-parse-exec-buffer " *ada_mode_wisi_parse*" ada_grammar-names))

    'actions-read
        (progn
         (setq wisi-ext-parse-debug 2)
         (wisi-invalidate-cache)
         (wisi-ext-parse-exec-buffer " *ada_mode_wisi_parse*" ada_grammar-names))

    'ada:
        (progn
            (setq wisi-parser 'ada)
            (setq wisi-ada-parse-debug 1))
        or
        (progn
            (setq wisi-parser 'ada)
            (setq wisi-ada-parse-debug 0)
            (wisi-invalidate-cache)
            (time-it 'wisi-parse-buffer 1))

    'cat:
        (require 'extract-text-props)
        (let ((w32-pipe-read-delay 0))
           (pipe-torture "cat.exe"))
        pipe-torture is in extract-text-props.el

    'command:
        time ./run_ada_parser file > parse.text

    'elisp:
        (progn
            (setq wisi-parser 'elisp)
            (wisi-invalidate-cache)
            (time-it 'wisi-parse-buffer 1))

    'text-props:
        M-x extract-text-props
        (progn (wisi-invalidate-cache) (time-it 'apply-text-props 1))

    (progn (profiler-start 'cpu) (time-it 'wisi-parse-buffer 10) (profiler-report) (profiler-stop))

    /apps/GNAT-gpl_2014/gnatcoll-1.7w-src/src/sqlite/gnatcoll-xref.adb
        7082 lines, 250780 bytes, 19946 caches
        actions: 20633  encoded actions: 78885 lines, 1393119 bytes
        coded actions saved in c:/Projects/org.emacs.ada-mode.stephe-1/gnatcoll-xref.actions

        cygwin:
            'ada: 0.995001, 0.890001, 0.845001

            'cat: 0.085000, 0.070000

            'elisp: 1.480002, 1.705002, 1.715003

        windows:
            'ada-lex: 0.637708 seconds, 0 gcs
            'wisi-lex: 0.569551 seconds, 2 gcs

            'actions: 0.982802, 1.076402

            'actions-read: 0.312001, 0.234000
                FFI would gain this plus 2 * cat

            'ada:     1.076402, 1.045202, 1.060802
                parse is fully parallel, and fast enough (just barely)

            'command: 0m0.874s, 0m0.905s, 0m0.842s
                _slower_ than elisp parser

            'cat: 0.075000, 0.075000

            'elisp: 1.638003, 1.622403, 1.669203
                'ada is (/ (- 1.6 1.0) 1.6) = 37.5% faster

            'text-props: 0.312001, 0.187200, 0.187200
                moving text-prop computation to ada would reduce total time to:
                    max (<parse-in-ada>, <apply-text-props>, <text-props-in-ada>)

        linux:
            'ada: using gnat 2013

            'cat:

    ada_mode_wisi_parse.adb
        lines: 251 bytes: 8846
        actions: 699 encoded actions: 2709 lines, 44252 bytes
        ada_mode_wisi_parse.actions

                'command: 0m0.047s

                'ada: 0.764402

    implement wisi actions in Ada
        compute a list of text properties in ada_mode_wisi_parse, and return
        that to the Emacs process to be applied.

        can leave some in elisp; send either computed text properties or encoded unrecognized actions
            leave face-action, extend-action in elisp
            start with statement-action, since that will create the data structure that the other actions need

        extract text properties from .adb, build elisp sexps, execute
            extract-text-props.el
            (load "extract-text-props")

            (progn (wisi-invalidate-cache) (time-it 'apply-text-props 1))
            gnatcoll-xref 0.310000 seconds! back in business

        need FFI
            15 Sept: sent email to Aurélien Aptel aurelien.aptel+emacs@gmail.com

    use gprof to find Ada bottleneck
        use array for stack
            obvious from code, but time it!
            stack size = generic = 100, double when need more


    Emacs read/write is slow: bug 18626
        ~/Mail/drafts/message-20141004-010440
        http://debbugs.gnu.org/cgi/bugreport.cgi?bug=18626

> You could try playing with 2 parameters that currently are fixed: the
> size of the pipe buffer (set by pipe2 in w32.c, where we use 0 which
> AFAIK defaults to 4KB); and the delay used by send_process in
> process.c when it gets EAGAIN/EWOULDBLOCK from the 'write' call
> (currently 20 milliseconds).

        (sal-msys32)
        (shell-msys)
        cd /c/Projects/emacs/emacs-24.3.94/src
        make

        c:/Projects/org.emacs.ada-mode.stephe-1/extract-text-props.el
        c:/Projects/emacs/emacs-24.3.94/src/xdisp.c

        c:/Projects/emacs/emacs-24.3.94/src/w32.c
            pipe2 : buffer size is second parameter in call to _pipe
            (pipe-torture-read "/Projects/emacs/emacs-24.3.94/src/xdisp.c")

            (setq w32-pipe-read-delay 50)
            pipe size 0 : 11.965184
                   9192 : 12.012684
                  80000 : 12.018934

            (setq w32-pipe-read-delay 0)
            pipe size 0 : 0.180000 0.095000


        c:/Projects/emacs/emacs-24.3.94/src/process.c
            send_process : delay is second arg in wait_reading_process_output

            windows:
            (pipe-torture "/Projects/org.emacs.ada-mode.stephe-1/build/wisi/debug.exe" "4096")
            (* 0.020 (/ 974233 4096)) = 4.74
            20 * 1000 * 1000 : 4.450068
            10 * 1000 * 1000 : 2.443788
             0 * 1000 * 1000 : hangs until C-g (blocking call)
            -1 : (busy wait)

            linux:
            (require 'extract-text-props)
            (pipe-torture "/home/Projects/org.emacs.ada-mode.stephe-1/build/wisi/debug_counted" "974233" "974233")
            send_process : delay is second arg in wait_reading_process_output
            internal pipe size is 65536
            20 * 1000 * 1000 : 0.3
            10 * 1000 * 1000 : 0.29
            -1 (busy wait)   : 0.3 !?

    Emacs dead lock: see bug 18420
        c:/home/stephe/Mail/drafts/message-20140907-003138
        http://debbugs.gnu.org/cgi/bugreport.cgi?bug=18420

        fixed in 24.3.94

        will be fixed in 24.4
            protocol 2
            parallel processing

        workaround for 24.2, 24.3
            protocol 1
            queue all output in ada_mode_wisi_parse till parse completed

    split out recursive descent stuff
        avoid compile time overhead, name conflicts/confusion, build runtime overhead
        make token.enumerated abstract?
        rd child
            Parse
        lalr child
            ?

    lalr does not need to be child of production

    move Source (= analyzer) out of Token, into new abstract root
        add missing functions from analyzer

    move lookahead_queue out of analyzer, into lookahead/rd child?

    OpenToken lexer is too slow?

        replace with aflex
            time ./run_ada_lexer /apps/GNAT-gpl_2014/gnatcoll-1.7w-src/src/sqlite/gnatcoll-xref.adb
            real    0m0.359s
            user    0m0.031s
            sys     0m0.000s

            from http://sourceforge.net/projects/p2ada/files/p2ada/Sources/
            c:/Projects/aflex/build/Makefile
            time ./run_ada_lexer /apps/GNAT-gpl_2014/gnatcoll-1.7w-src/src/sqlite/gnatcoll-xref.adb > foo.text
            real	0m0.200s
            user	0m0.000s
            sys	0m0.000s
            includes file io

            edit yylex.adb to remove "ECHO" call in state 104, warm file cache:
            real	0m0.080s
            user	0m0.000s
            sys	0m0.000s

            build with optimization
            no better; dominated by io

            (/ 0.36 0.08) = 4.5

        integrate aflex as an OpenToken lexer
            not yet; time parser first

            aflex generates ada_syntax.a, containing function yylex
                change aflex to name function ada_syntax.yylex

                ECHO is an error handler?
                    writes via "Text_IO.Put (user_output_file)"

            ada_syntax_dfa -> ada_syntax-dfa.ads

        generate *.l, associated packages from *.wy

        see http://harmonia.cs.berkeley.edu/papers/twagner-lexing.pdf
            ideas on incremental lexing after edit

    factor out generic for parser_lists stack, action_token

    add container iterators to wisi.*_Lists
        use in generate

    add container iterators to Token_Lists, use in wisi_tokens

    add error recovery to parser
        insert virtual tokens to take parser from current state to next token
            compute in lalr child package; enhance parser table error action?

        incremental GLR resources (from Danial Colascione <dancol@dancol.org>):
        [1] http://harmonia.cs.berkeley.edu/papers/twagner-thesis.pdf
            ../org.emacs.ada-mode/twagner-thesis.pdf

        [2] http://fileadmin.cs.lth.se/cs/Personal/Emma_Soderberg/docs/SLE08pres.pdf

        use while-no-input to run parser in background

        Bridge parsing: perform one pass over the buffer using a
        simplified grammar that looks only at nesting constructs,
        insert virtual braces to make everything balance, and then
        apply the usual parsing algorithm (with ad-hoc error recovery)
        to the result.

    more intelligent rules in wisi when parser fails?

    still too slow?:
        free list in wisi_tokens

        recursive_lalr child
            don't allocate new tokens for stack; just store token_id
                avoid runtime allocation overhead
            pass token region, lexeme to user action

        write rd grammar from .wy?
            see asu_example_5_10
            see gpr parser

    doc git/elpa checkout, config

    clear execute bits in git
        git update-index --chmod=-x <file>

    subtitle in ada-mode.texi doesn't appear in .info, .html

    don't do syntax-propertize for font-lock, unless parsing is already done
        triggered by 'return' keyword; see ada-wisi.el ada-wisi-post-local-vars

5.1.d handle parser errors more gracefully

    continue by adding virtual tokens
        find shortest path from current state to defined action on next real token
            go thru FIRST, look for actions on next token, use first found
                provide grammar source hint for picking? (prefer semicolon, or 'then')
            if none, recurse (breadth-first search)
        can compute at grammar compile time
        add result as 'error' entry in state machine?

        cache for virtual end token (if one needed) located after last real token in sentence
            needed for 'goto end', and for setting something in 'end' field
            add space if at eob?

        no storage cache for other virtual tokens

        adding 'if then else end if' before 'foo := bar;'; just typed 'if <expression>'; add 'then'
            that will later add 'end if;' before the next 'end', which will be wrong
                no problem; it will be deleted by invalidate-cache when the new 'end if' is typed/parsed
                invalidate-cache must also delete refs to the virtual token?
                    they will be overwritten?

    don't use virtual tokens for indent
        => don't set markers to them

    show location of virtual tokens in 'show parse error'?
        could be many

can abandon parse when reach desired point (not just for errors)
    ada-indent-region parse to end of region
        avoids reparsing for every line
        or is there an indent-region hook for that?

        handle ada-gps better

    if command is 'goto-end', "desired point" is end of current statement
    in goto-end, check if end reached is virtual; if so, reparse

5.1.x: misc

if specify project file in gnat_stub_opts, gnat stub can't find it due to changed directory
    change to gnat_stub_gpr, manage directory
    or edit gnat_stub_opts, insert project dir?

skeleton refactor/cleanup

ftp://alpha.gnu.org/gnu/emacs/pretest/emacs-24.3.91.tar.xz
    better compile trunk, emacs-24 branch
    (dvc-status-one "/Projects/emacs/trunk")

gpr-skel.el
    ./gpr-skel.el:111:;; FIXME: code below should be in skeleton.el
    ./gpr-skel.el:199:	;; FIXME: hook for Ada case adjust

    move skel-expand to emacs-compat-*?
        assume will be in emacs 24.5 or 25.*
    use in ada-skel?

move stuff out of ada-mode-keys.el
    ada-make-package-spec
        skel default to (ada-name-from-file-name (buffer-file-name))?

(grep-find "find . -type f -print | \"xargs\" grep -nH \"FIXME:\"")

C-c C-d on +Normalize_Pathname
    includes + in identifier

prev-statement-keyword in subprogram skips exception

ada_mode-parens.adb:214:09: (style) bad column

ada-set-point-accordingly
    use parse info to find identifier declaration instead of reference?

different casing for identifiers (uppercase) and attributes (mixed)

src_dir=/foo/bar/* for C++

ada-next-statement-keyword skip matched parens if on paren

emacs-ada-prj-mode
    or emacs-gnat-prj-mode?

./wisi.el	  ;; FIXME: insert newline in comment to create non-comment!?
    need tests for wisi-before/after-change vs comments, strings

test on debian testing?

gpr-add-log-current-function dispatch to gpr-wisi

ada-add-log-current-function

gpr log-edit-function-name
    use package.attribute:
        Source_Dirs
        Compiler.Default_Switches

separate color for vendor-specific aspects
    spark aspects in test/aspects.ads

completion:
    match GPS behavior
        get completion candidates from gpr_query
        all names in scope at point

    built-in pcomplete
        completion-at-point-functions

    http://elpa.gnu.org/packages/company.html
        including C++ parameters, class members

    MELPA package auto-complete
    https://github.com/auto-complete/auto-complete
    https://github.com/capitaomorte/yasnippet

find-identifer-in-prj
    prompt for identifier, goto declaration
    not useful until have completion

reflect changes in subprogram spec to subprogram body
    ada-resync-spec-body

fix wisi-compile.el needing comp.el, not comp.elc
    some systems don't install emacs source by default

handle all indent options like ada-case-strict
    need case-strict, ada-indent prj-wide for aflex
    need case-strict buffer-local for ada-mode ada_tokens

    set buffer-local from prj-get in ada-mode-hook
        use an alist or auto naming rule to define prj var

    or user write cond string-match on default-dir

use post-self-insert-hook for casing
    in 23.2?

use electric-indent-mode instead of ada-indent-newline-indent

refactoring

    rename entity:
        use xref to rename all uses (with/without confirm)

    change parameter_result_profile
        make same change in all overrides
        offer to walk thru all uses

    promote primitive subprogram-local variable to type component

    move primitive from parent to child class

    extract subprogram
        from Eclipse
        highlight lines of source
        prompt for name
        it guesses parameter_result_profile

support for "Adadoc"?
    formatted comments that mention parameters; check that they are all mentioned, spelled correctly

support for "ElDoc"?
    display parameter list for current function

Add Ada parser to gnu global?

 gpr_query
build/Makefile one

get casing from gpr file

gpr_query refs output distinguishes between read ref and write ref
    useful for "where is this var set?"
    xref filter?
    elisp filter?

use --display_progress

write tests!

implement C++ C-c ? children
    /home/Projects/GDS/work_stephe_2/common/itc/itcsb/libitcsb_1553/inc/Itcsb1553/Bus.hpp

    overridden_recursive

    child_types_recursive
        works

add Ada, C++ tests of xref
    /home/Projects/GDS/work_stephe_2/dscovr/build/x86_gnu_linux_release/Makefile
    /home/Projects/GDS/work_stephe_2/common/itc/opsim/itc_dscovr_gdsi/Gds1553/src/Gds1553.cpp


cd /home/Projects/GDS/work_stephe_2/dscovr/build/x86_gnu_linux_release/

export ADA_PROJECT_PATH=../../../makerules:../../../common/build/x86_gnu_linux_release:../../../sal/build:../../../sal/build/x86_gnu_linux_release:../../../opentoken/build/linux_release

parse linker cross reference output; -cref
    for pragma import


(require 'gpr-mode)
(gpr-set-as-project "c:/Apps/GNAT-7.1.2/gnatcoll-1.6w-src/src/gnatcoll_tools.gpr")
(browse-url "file:///c:/Apps/GNAT-7.1.2/gnatcoll-1.6w-src/docs/_build/html/xref.html")

 general
build/wisi/Makefile
build/Makefile

do C-x 5 prefix
    for Emacs 24.x
    after 24.4 feature freeze

move gpr-skel.el skel-expand to compat*.el
    use in ada-mode
    discuss on emacs-devel

need indent test of skel expansions
    verify they parse

tooltip/skel support for subprogram param names

implement secondary-error for scope in 'gnat-inspect-all'
    /Projects/GDS/work_dscovr_release/common/build/x86_gnu_windows_release/Makefile
    /Projects/GDS/work_dscovr_release/common/1553/gds-hardware-bus_1553.ads RX_Enable
    secondary-error in compilation regexp not working
        highlight can't be a function

    change ada-show-secondary-error to parse line, col from text, not text-property?

move gnat-inspect ada-* to ada-gnat-inspect.el

wisi-validate-cache should call grammar parser in a loop
    that would handle multiple compilation units; doesn't need to be in grammar
    parser needs to ignore invalid token following valid parse.

suggest jit-lock enable hook
    allow enforcing order in after-change-functions

ask about start-process vs --batch

expression functions

gpr fix errors
    gds_dscovr_utf_agg.gpr:12:19: expected "gds_dscovr_utf_agg"

add C++ tests

C-c C-d on <= use

'Access gives wrong face to following token:
     Percent_Percent & EOF + Output_Elisp'Access and

don't parse or move cache if narrowed

ada-fix-error.el
    sort 'limited private with' at end of context clause

add test for el_file

gnatprep
    the value of a preprocessor symbol is either empty, a string
    literal, or an Ada identifier/keyword; handle $symbol in lexer

    gnatprep minor mode?

manage "scenario variables" on project menu?
    GDS_DEVICE_PLATFORM

separate gpr-mode indent variables

gpr-next-statement-keyword

new align rule
    from Florian Schanda <florian.schanda@altran.com>
    >    case Foo |
    >         Some_Other_Thing |
    >         Bar |
    >         Baz =>
    >       null;
    >
    > It would be really nifty to have a macro that transforms it into this:
    >
    >    case Foo              |
    >         Some_Other_Thing |
    >         Bar              |
    >         Baz              =>

allow finding compiler libraries with no project
    define the default project search path to contain the compiler library dirs
    there is no default project!
        big change to support that.

test on debian testing?

 possible enhancements

make as much as possible work with no project
    use ada-build-require-project-file when a project is necessary

example custom indentation function for Markus Schöpflin <markus.schoepflin@comsoft.aero>
   FOOBAR.PROC (
      ARG1 => VAL1,
      ARG2 => VAL2
   );

EDE projects?
    just .el files with random code

skeleton
    see python-skeleton-autoinsert

    add else placeholders to all skeletons?
        add 'placeholder text property, before-change that deletes it/checks for "..."
        add goto-next-/prev-placeholder, kill-placeholder

    bug in skeleton handling of _; if skeleton-end-hook indents, the pos of _ moves; should be a marker.

    template system could be defined by parsing ada-grammar.wy
        for ada-skel-verbose

ada-align-paramlist
    test/ada_mode-parens.adb

    handle wrapping due to line length limit?

    handle single-line trailing comments, or longer comments, in paramlist?

DEC Ada legacy code
    foo.a for spec, foo_b.a for body

share/convert case exceptions with GPS
    see email for python script

file-local case exceptions
    for -fdump-spec C imports

vhdl-wisi

ada-control.el from JP Rosen; see email

completion
    http://emacswiki.org/emacs/CategoryCompletion
    autocomplete package

http://cedet.sourceforge.net/addlang.shtml

time on long code
    get stats on GDS file sizes

put-text-property fails if read-only

 possible new options
ada-wisi-comment
    add option to match gnat comment style check
        have tests in ada_mode-conditional_expressions.adb, ada_mode-parens.adb

from Simon Wright:
   --  I'd like (the option to have) the 'is' line up with the 'type'.
   type A;
   type A_Finalizer
     (AP : access A)
   is new Ada.Finalization.Limited_Controlled with null record;

Markus Schöpflin <markus.schoepflin@comsoft.aero> wants this style (including all caps):

   FOOBAR.PROC (
      ARG1 => VAL1,
      ARG2 => VAL2
   );

    add a custom indent function, like the one for opentoken
    12 sep 2013: sent email

 relevant files, debug hints
use elp (emacs lisp profiler)?
    (with-current-buffer (find-file-noselect "~/src/xdisp.c")
      (elp-instrument-function 'c-beginning-of-defun)
      (goto-char (point-max))
      (condition-case nil
          (while (beginning-of-defun) nil)
        (error nil))
      (elp-results))

(progn (profiler-start 'cpu) (time-it 'wisi-parse-buffer 10) (profiler-report) (profiler-stop))
    B - profiler-report-render-reversed-calltree shows low-level time hogs

attach gud-gdb to running emacs: attach <process id>
    source emacs/src/.gdbinit
    xbacktrace shows lisp backtrace

"kill -USR2 <emacspid>" which should also drop you into the (elisp?) debugger.

(browse-url "c:/Projects/arm_info/org.adaic.arm_form/build/html/arm2012/RM-P.html")
(info "(aarm2012)Annex P" "*info Annex P*")
http://www.ada-auth.org/standards/
(info "(elisp)Parser State" "*info syntax-ppss*")
"c:/home/stephe/Backup/eBooks/Dick Grune/Parsing.pdf" [dickgrune]

http://savannah.gnu.org/projects/emacs/

http://git.savannah.gnu.org/cgit/emacs.git/tree/README?h=elpa
http://elpa.gnu.org/

https://www.dropbox.com/sh/7jr3vbv9tm1zod0/jPuvfrJAe8
    w32 builds of cutting-edge emacs branches, pretests

ftp://alpha.gnu.org/gnu/emacs/pretest/
    untar with cygwin
    in mys32 under emacs:
        cd /c/Projects/emacs/emacs-24.3.9x
        ./configure --prefix=/mingw32
        make
        # don't make install, just run from the build dir

 access to ada-france:

anonymous (read only) access:
    mtn --db ~/monotone-dbs/ada-france.db --key '' pull www.ada-france.org "org.emacs.*"

read/write access requires a public key:
    send output of 'mtn pubkey' to Ludovic Brenta
    <ludovic@ludovic-brenta.org> or Stephe Leake
    <stephen_leake@stephe-leake.org>

    add it to monotone db via 'mtn read'
    add it to /etc/monotone/write-permissions
    /etc/init.d/monotone restart

    mtn --db ~/monotone-dbs/ada-france.db sync "mtn://www.ada-france.org?org.emacs.*"

 git config for elpa checkout
[core]
	repositoryformatversion = 0
	filemode = false # don't set exec bits
	bare = false
	logallrefupdates = true
	ignorecase = true
[remote "origin"]
	fetch = +refs/heads/master:refs/remotes/origin/master
	push  = +refs/heads/master
	url = stephen_leake@git.sv.gnu.org:/srv/git/emacs/elpa.git
[branch "master"]
	remote = origin
	merge = refs/heads/master

 release process
do opentoken release, if needed

(dvc-status ".")
(dvc-status "/Projects/org.opentoken")

# uninstall elpa packages before change version
build/Makefile uninstall-elpa

check for ELPA patches by others
    (dvc-status "/Projects/elpa")
        revert local changes
    (dvc-pull "/Projects/elpa")
    (dvc-sync-review "/Projects/elpa")
        update
        clean sync
    cd /Projects/elpa
    git log -2 -- packages/wisi
    git log -2 -- packages/ada-mode
    git log -2 -- packages/ada-ref-man
    if changes:
        (dvc-log "/Projects/elpa/packages/<dir>/<file>")
        apply changes to current

check emacs buglist
    http://debbugs.gnu.org/cgi/pkgreport.cgi?package=ada-mode

bump versions
    bump if _any_ changes other than autoloads, so ELPA package handler knows to update

    build stuff to compare with previous release in elpa:
        build/Makefile docs pub-ada pub-ada-ref-man pub-wisi

        (list-packages) install ada-mode, wisi, ada-ref-man from public ELPA

    change versions in compares below to match installed versions.

    compare:
        (ediff-directories "~/.emacs.d/elpa/wisi-1.1.3" "/Projects/elpa/packages/wisi" nil)
            NEWS-wisi.text
                add release date
                add new features

            wisi.el
                Version:

        (ediff-directories "~/.emacs.d/elpa/ada-mode-5.2.0" "/Projects/elpa/packages/ada-mode" nil)
            NEWS-ada-mode.text
                add release date
                add new features

            ada-mode.el
                Version:
                package-requires wisi version
                ada-mode-version

            more below

        (ediff-directories "~/.emacs.d/elpa/ada-ref-man-2012.0" "/Projects/elpa/packages/ada-ref-man" nil)
            ada-ref-man.el
                Version:

    ada-mode.texi
        @title
        top node
    README-ada-mode
        first line
    README-ada-ref-man
        first line
    README-wisi
        first line
    ada_mode_wisi_parse.adb
        Version
    build/Makefile
        ADA_MODE_VERSION
        ADA_REF_MAN_VERSION
        WISI_VERSION

    (find-file "d:/Web/savannah/ada-mode/index.html")
        ada-mode find-replace i.j.k
        opentoken find-replace i.jk

    (find-file "d:/Web/savannah/ada-mode/wisi/wisi.html")
        wisi-i.j.k find-replace
        wisi-generate version
        opentoken version

    (d:/Web/stephe-leake/ada/opentoken.html copied by web makefile)

    ~/Web/Makefile
        ADA_MODE_VERSION

verify other metadata
    ada-mode.el
    ada-ref-man.el
    wisi.el

check for latest Emacs release
    http://ftp.gnu.org/gnu/emacs/windows/

Emacs 25.1, gnat 2016:
    build/wisi/Makefile all byte-compile-clean

prep for other version tests:
    build/Makefile all
    # pushes to elpa workspace, builds archive, uninstalls

Emacs 24.5, gnat 2015, installed elpa (Eurocontrol)
    (gnat-2015)
    (setenv "ADA_MODE_DIR" "-f package-initialize")
    org.opentoken/build/release/Makefile clean
    build/Makefile install-elpa
    build/wisi/Makefile all
    build/Makefile uninstall-elpa

Emacs 24.4, gnat 2016 (sal-standard), installed ada-mode:
    (setenv "ADA_MODE_DIR" "-f package-initialize")
    build/Makefile install-elpa
    build/wisi/Makefile all
    build/Makefile uninstall-elpa

Emacs 24.3, gnat 2016 (sal-standard), installed ada-mode:
    (setenv "ADA_MODE_DIR" "-f package-initialize")
    build/Makefile install-elpa
    build/wisi/Makefile all
    build/Makefile uninstall-elpa

Emacs 24.2, gnat 2016 (sal-standard), installed ada-mode:
    (setenv "ADA_MODE_DIR" "-f package-initialize")
    build/Makefile install-elpa
    build/wisi/Makefile all
        ignore byte-compile warnings about 'foo' from cl package called at runtime
    build/Makefile uninstall-elpa

sync for Debian:
    Emacs 25 for dvc
    (dvc-status ".")
    (dvc-status "/Projects/org.opentoken")
    (dvc-sync-run ".")
    (dvc-sync-review ".")

Debian stable is 8.2 jessie as of 5 Sept 2015
    emacs  24.5
    gnat   4.9.2

    emacs-stable.sh ;; for dvc and testing
    (sal-debian)

    (dvc-sync-run "/home/Projects/org.emacs.ada-mode")
    (dvc-sync-review "/home/Projects/org.emacs.ada-mode")

    /home/Projects/org.emacs.ada-mode/build/wisi/Makefile
        all

    emacs.sh ;; current for dvc
    (dvc-status)
    (dvc-sync-run "/home/Projects/org.emacs.ada-mode")
    (dvc-sync-review "/home/Projects/org.emacs.ada-mode")

(dvc-sync-run ".")
(dvc-sync-review ".")

commit elpa:
    (dvc-pull "/Projects/elpa")
    (dvc-sync-review "/Projects/elpa")

    build/Makefile docs pub-ada pub-ada-ref-man pub-wisi

    (dvc-state-one "/Projects/elpa")
        add, stage, commit ada-mode, ada-ref-man, wisi

    (dvc-push "/Projects/elpa")
    (dvc-sync-review "/Projects/elpa")
    # 24 hrs for web repository to update

test install from elpa
    5.1.8 crashed emacs for me

(dvc-state-one ".")
mtn tag h:org.emacs.ada-mode "org.emacs.ada-mode-<version>"

(dvc-sync-run ".")
(dvc-sync-review ".")

mtn checkout -b org.emacs.ada-mode -r t:org.emacs.ada-mode-5.2.1 ../org.emacs.ada-mode-5.2.1

build/Makefile zip

not under emacs:
    cd /Projects/org.emacs.ada-mode/build/
    rm <old>.tar.gz .sig
    gpg2 -b *.tar.gz

    scp *.tar.gz     stephen_leake@dl.sv.nongnu.org:/releases/ada-mode/
    scp *.tar.gz.sig stephen_leake@dl.sv.nongnu.org:/releases/ada-mode/

~/Web/Makefile
    ada-mode wisi

(cvs-examine "d:/Web/savannah/ada-mode/" nil)
    mark all, commit

FIXME: wisi-generate.exe to savannah?

after Gnu ELPA updated, post on emacs-ada-mode mailing list, c.l.a newsgroup
http://www.nongnu.org/ada-mode/
https://savannah.nongnu.org/projects/ada-mode

mark fixed bugs
    http://debbugs.gnu.org/cgi/pkgreport.cgi?package=ada-mode
    http://debbugs.gnu.org/Developer.html

check https://www.emacswiki.org/emacs/AdaMode


-- end of file
