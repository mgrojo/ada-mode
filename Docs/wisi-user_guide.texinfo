\input texinfo
@c Author : Stephen Leake stephen_leake@stephe-leake.org
@c Web    : http://stephe-leake.org/ada/opentoken.html
@setfilename wisi-generate
@settitle wisi-generate User Guide

@copying
Copyright @copyright{} 2014 Stephen Leake.

@quotation
Permission is granted to copy, distribute and/or modify this
document under the terms of the GNU Free Documentation License,
Version 1.3 or any later version published by the Free Software
Foundation; with no Invariant Sections, no Front-Cover Texts and
no Back-Cover Texts.  A copy of the license is included in the
section entitled "GNU Free Documentation License".
@end quotation
@end copying

@dircategory Parser generators
@direntry
* wisi-generate: (wisi-generate).         Ada and Elisp parser generator
@end direntry

@titlepage
@sp 10
@title wisi-generate User Guide
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top, Overview, (dir), (dir)
@top Wisi User Guide

@ifnottex
@insertcopying
@end ifnottex

@menu
* Overview::
* Common grammar problems::
* Syntax::
@end menu

@node Overview, Common grammar problems, Top, Top
@chapter Overview

Wisi is an add-on to OpenToken, that allows using Bison-style input
files, and generates either OpenToken Ada source, or elisp source for
the elisp wisi parser.

At one point, ``wisi'' was short for ``Wisent Indentation engine'';
the Emacs 'wisi' package implements an indentation engine that used to
be based on the Emacs wisent parser. However, that parser has now been
replaced by a generalized LALR parser, so ``wisi'' is just a name.

``wisent'' is the European bison @url{http://en.wikipedia.org/wiki/Wisent}.

The wisent parser generator is the Gnu parser generator implemented in
Emacs elisp, as part of the semantic package
@url{http://cedet.sourceforge.net/semantic.shtml}.  The parser is an
LALR parser; see ``Compilers, Principles, Techniques, and Tools'' by
Aho, Sethi, Ullman (The Red Dragon Book) for more information on LALR
parsers.

While implementing the Emacs Ada indentation engine, it became clear
that forcing the Ada grammar to be LALR was hard; it was easier to
implement a generalized LALR parser, which tolerates some grammar
conflicts.

The OpenToken grammar compiler (wisi-generate) reads a grammar file in
wisi syntax, and outputs a compiled grammar in elisp format; it can
then be used by wisi-parse.

Alternately, wisi-generate can output Ada code, for use with the
OpenToken parser.

@node Common grammar problems, Syntax, Overview, Top
@chapter Common grammar problems

LALR grammars are tricky. Here we describe some common problems people
run into.

@menu
* Empty choice in list::
@end menu

@node Empty choice in list,  , Common grammar problems, Common grammar problems
@section Empty choice in list

Many programming languages have lists in the grammar. For example, Ada
has lists of declarations:

@example
package_body
  : PACKAGE name IS declaration_list BEGIN statement_list END SEMICOLON
  ;

declaration_list
  : declaration
  | declaration_list declaration
  ;

declaration
  : object_declaration
  | subprogram_declaration
  ;; ...
  ;
@end example

Note that the above grammar fragment does not allow an empty
declaration_list. But Ada does, so the question is how can we add that
to the grammar.

There are four choices:

@enumerate
@item
Add an empty declaration choice to declaration_list:

@example
declaration_list
  : ;; empty list
  | declaration
  | declaration_list declaration
  ;
@end example
This is now redundant; since declaration_list can be empty, the second
choice is not needed:
@example
declaration_list
  : ;; empty list
  | declaration_list declaration
  ;
@end example


@item
Add an empty declaration choice to declaration:

@example
declaration
  : ;; empty declaration
  | object_declaration
  | subprogram_declaration
  ;; ...
  ;
@end example

@item
Add another rule with the empty production:

@example
package_body
  : PACKAGE name IS declarative_part BEGIN statement_list END SEMICOLON
  ;

declarative_part
  : ;; empty
  | declaration_list
  ;

declaration_list
  : declaration
  | declaration_list declaration
  ;

declaration
  : object_declaration
  | subprogram_declaration
  ;; ...
  ;
@end example

@item
Add another choice in package_body that leaves out declaration_list:
@example
package_body
  : PACKAGE name IS declaration_list BEGIN statement_list END SEMICOLON
  | PACKAGE name IS BEGIN statement_list END SEMICOLON
  ;
@end example
@end enumerate

Choice 1 is redundant, giving parse errors at parse time.
Consider the following statements, where "<empty>" is used to indicate
an empty declaration:

1) package One is <empty> begin end ;
2) package One is package One is <empty> begin end ; begin end ;
3) package One is <empty> package One is <empty declaration> begin end ; begin end ;

In parsing 3), the second 'package' causes a shift/reduce conflict;
shift to start the nested declaration (as in 2), reduce to the empty
declaration. Both are correct according to the grammar.

Choice 2 leads to a shift/reduce conflict in the production for
package_body; implementing the wisi parser as a generalized LALR parser
allows it to handle this option.

Choice 2 is the preferred choice for Ada, since it involves the least
modifications to the original Ada grammar in the Ada reference manual.

@node Syntax,  , Common grammar problems, Top
@chapter Syntax

The wisi input file syntax is the based on Wisent and Gnu bison syntax
with some additions and deletions (@pxref{Top,Bison,Overview,bison}).

The top level file structure is:
@verbatim
%{
PROLOGUE
%}

DECLARATIONS

%%
RULES
%%
@end verbatim

Comments are started by ``;;'' and terminated by end of line.

@menu
* Prologue::
* Declarations::
* Rules::
@end menu

@node Prologue, Declarations, Syntax, Syntax
@section Prologue

The Prologue contains arbitrary code, copied verbatim into the
output. For Emacs, this will typically contain:

@verbatim
%{
(require 'wisi)
(require 'semantic/lex)
(require 'wisi-compile)
%}
@end verbatim

@node Declarations, Rules, Prologue, Syntax
@section Declarations

The Declarations sections declares terminal tokens, conflicts, and
the start symbol.

@menu
* Tokens::
* Conflicts::
* Start symbol::
@end menu

@node Tokens, Conflicts, Declarations, Declarations
@subsection Tokens
There are two types of tokens; keywords and other:

@verbatim
%keyword SEMICOLON ";"

%token <symbol> IDENTIFIER
%token <punctuation> TICK "'"
@end verbatim

``Keywords'' are reserved words in the target language; the Emacs wisi
and OpenToken lexers recognize them by the given string.

In the Emacs wisi lexer, ``Tokens'' are recognized by Emacs syntax
properties. There some predefined token classes:

@table @code
@item <punctuation>
A string of characters that have punctuation syntax, and match the
token string.

@item <symbol>
A string of characters that have word syntax.

@item <string-double>
A string of characters that have string syntax, with double quote delimiters.

@item <string-single>
A string of characters that have string syntax, with single quote delimiters.

@end table

@node Conflicts, Start symbol, Tokens, Declarations
@subsection Conflicts

@verbatim
%conflict REDUCE/REDUCE in state abstract_limited_opt, abstract_limited_synchronized_opt on token NEW
@end verbatim

The conflict description is output by wisi-generate when an undeclared
conflict is detected.

@node Start symbol,  , Conflicts, Declarations
@subsection Start symbol

@table @code
@item %start
The start token for the grammar.

@end table

@node Rules,  , Declarations, Syntax
@section Rules

The rules section declares the non-terminal tokens, and the associated
production rules and actions.

The syntax of rules is:

@verbatim
{non-terminal} : {token} ... [action] | {token} ... [action] ;
@end verbatim

Each rule gives the expansion of a non-terminal token into a list of
tokens (both terminal and non-terminal); optional productions are
separated by ``|''. Each list of tokens is followed by an ``action'',
which is an elisp form that will be executed the production is reduced.

@bye
