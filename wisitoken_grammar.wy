;;; WisiToken grammar for WisiToken grammar, for wisitoken-bnf-generate.
;;
;;  wisitoken_grammar-mode uses the same grammar for parsing .wy
;;  files, but with different actions.
;;  (ediff "wisitoken_grammar_1.wy" "../org.wisitoken/wisitoken_grammar.wy")
;;
;;  The supported syntax is similar to several flavors of Extended
;;  Backus-Naur form, as defined by
;;  https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form
;;
;;  In particular, we support grammars for popular languages:
;;
;;  - the Python grammar file given at
;;    https://docs.python.org/3.8/reference/grammar.html
;;
;;  - the Java grammar file given at
;;    https://github.com/antlr/grammars-v4/tree/master/java
;;
;;  - the Ada grammar given in the Ada Language Reference Manual Annex
;;    P; see http://ada-auth.org/arm.html
;;
;;  This file uses only plain BNF syntax, to simplify working on the
;;  EBNF syntax.

%code copyright_license %{
;;  Copyright (C) 2017 - 2023 Free Software Foundation, Inc.
;;
;;  Author: Stephen Leake <stephe-leake@stephe-leake.org>
;;
;;  This file is part of GNU Emacs.
;;
;;  GNU Emacs is free software: you can redistribute it and/or modify
;;  it under the terms of the GNU General Public License as published by
;;  the Free Software Foundation, either version 3 of the License, or
;;  (at your option) any later version.
;;
;;  GNU Emacs is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;  GNU General Public License for more details.
;;
;;  You should have received a copy of the GNU General Public License
;;  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
}%

%code actions body context %{
with WisiToken_Grammar_Runtime; use WisiToken_Grammar_Runtime;
}%

%generate LALR Ada re2c
%start compilation_unit_list

%keyword ACCEPT_I 'accept_it'
%keyword CODE "code"
%keyword CONFLICT "conflict"
%keyword CONFLICT_RESOLUTION "conflict_resolution"
%keyword END "end"
%keyword ELSIF "elsif"
%keyword IF "if"
%keyword IN "in"
%keyword KEYWORD "keyword"
%keyword NON_GRAMMAR "non_grammar"
%keyword ON "on"
%keyword REDUCE_I 'reduce'
%keyword SHIFT_I 'shift'
%keyword TOKEN "token"

%token <delimited-text> RAW_CODE "%{" "}%"
%token <delimited-text> REGEXP "%[" "]%"
%token <delimited-text> ACTION "%(" ")%"

%token <punctuation> BAR "|"
%token <punctuation> COLON ":"
%token <punctuation> COLON_COLON_EQUAL "::="
%token <punctuation> EQUAL "="
%token <punctuation> GREATER ">"
%token <punctuation> LEFT_BRACE "{"
%token <punctuation> LEFT_BRACKET "["
%token <punctuation> LEFT_PAREN "("
%token <punctuation> LESS "<"
%token <punctuation> MINUS "-" ;; for {}-
%token <punctuation> PERCENT "%"
%token <punctuation> PLUS "+" ;; for ()+
%token <punctuation> QUESTION "?" ;; for ()? same as []
%token <punctuation> RIGHT_BRACE "}"
%token <punctuation> RIGHT_BRACKET "]"
%token <punctuation> RIGHT_PAREN ")"
%token <punctuation> SEMICOLON ";"
%token <punctuation> STAR "*" ;; for ()* same as {}

%token <number> NUMERIC_LITERAL %[ [0-9-][0-9_]* ]% "1234567890"
%token <symbol> IDENTIFIER %[ [a-zA-Z\x80-\U0010FFFF][-0-9a-zA-Z_\x80-\U0010FFFF]* ]% "bogus"

;; In re2c regexps, '...' indicates a case-insensitive match, "..." a
;; case-sensitive match.
;;
;; In nonterminals, '...' indicates a literal, which we translate to a
;; token; case-sensitive is then determined by the 'case_insensitive'
;; declaration.
;;
;; 0x22 = "
;; 0x27 = '
%token <string-double-one-line> STRING_LITERAL_DOUBLE %[ (["][\x20-\x21\x23-\U0010FFFF]*["])+ ]% '""'
%token <string-single-one-line> STRING_LITERAL_SINGLE %[ (['][\x20-\x26\x28-\U0010FFFF]*['])+ ]% "''"

%non_grammar <non-reporting> WHITESPACE %[ [ \t] ]%
%non_grammar <new-line> NEW_LINE %[ [\x0a]|[\x0d][\x0a] ]%
%non_grammar <comment-new-line> COMMENT ";;"

%elisp_face font-lock-constant-face
%elisp_face font-lock-function-name-face
%elisp_face font-lock-keyword-face
%elisp_face font-lock-string-face
%elisp_face font-lock-type-face
%elisp_face nil

;; No error recovery, because this grammar is not intended for
;; interactive use, and to keep wisitoken-bnf-generate independent of
;; mckenzie_recover, to simplify working on mckenzie_recover.

%conflict SHIFT IDENTIFIER_BAR_list | REDUCE rhs_list on token BAR
%conflict SHIFT declaration_item | REDUCE declaration on token IDENTIFIER
%conflict SHIFT identifier_list | REDUCE declaration on token IDENTIFIER
%conflict SHIFT rhs_element | REDUCE rhs on token IDENTIFIER
%conflict SHIFT rhs_list | REDUCE semicolon_opt on token PERCENT

;;;; grammar rules, no particular order

regexp_string
  : REGEXP
  | STRING_LITERAL_DOUBLE
  | STRING_LITERAL_SINGLE
  ;

conflict_item
  : SHIFT_I IDENTIFIER
  | REDUCE_I IDENTIFIER
  | ACCEPT_I IDENTIFIER
  | IDENTIFIER
  ;

conflict_item_list
  : conflict_item
  | conflict_item_list BAR conflict_item
  ;

token_name : IDENTIFIER | STRING_LITERAL_SINGLE ;

declaration
  : PERCENT TOKEN LESS IDENTIFIER GREATER IDENTIFIER regexp_string regexp_string
    %(Add_Declaration (User_Data, Tree, Nonterm);)%
  | PERCENT TOKEN LESS IDENTIFIER GREATER IDENTIFIER regexp_string
    %(Add_Declaration (User_Data, Tree, Nonterm);)%
  | PERCENT NON_GRAMMAR LESS IDENTIFIER GREATER IDENTIFIER regexp_string regexp_string
    %(Add_Declaration (User_Data, Tree, Nonterm);)%
  | PERCENT NON_GRAMMAR LESS IDENTIFIER GREATER IDENTIFIER regexp_string
    %(Add_Declaration (User_Data, Tree, Nonterm);)%
  | PERCENT NON_GRAMMAR LESS IDENTIFIER GREATER IDENTIFIER
    %(Add_Declaration (User_Data, Tree, Nonterm);)%
  | PERCENT KEYWORD IDENTIFIER regexp_string
    %(Add_Declaration (User_Data, Tree, Nonterm);)%
  | PERCENT CODE identifier_list RAW_CODE
    %(Add_Declaration (User_Data, Tree, Nonterm);)%
  | PERCENT CONFLICT identifier_list
    ;; Tree_Sitter format
    %(Add_Declaration (User_Data, Tree, Nonterm);)%
  | PERCENT CONFLICT conflict_item_list ON TOKEN token_name
    %(Add_Declaration (User_Data, Tree, Nonterm);)%
  | PERCENT CONFLICT_RESOLUTION conflict_item_list ON TOKEN token_name COLON IDENTIFIER
    %(Add_Declaration (User_Data, Tree, Nonterm);)%

  ;; %start, %mckenzie*, etc.
  | PERCENT IDENTIFIER declaration_item_list
    %(Add_Declaration (User_Data, Tree, Nonterm);)%
  ;; %case_insensitive etc
  | PERCENT IDENTIFIER
    %(Add_Declaration (User_Data, Tree, Nonterm);)%

  | PERCENT IF IDENTIFIER EQUAL IDENTIFIER
    %(Start_If (User_Data, Tree, Nonterm);)%
  | PERCENT IF IDENTIFIER IN IDENTIFIER_BAR_list
    %(Start_If (User_Data, Tree, Nonterm);)%
  | PERCENT ELSIF IDENTIFIER EQUAL IDENTIFIER
    %(Start_If (User_Data, Tree, Nonterm);)%
  | PERCENT ELSIF IDENTIFIER IN IDENTIFIER_BAR_list
    %(Start_If (User_Data, Tree, Nonterm);)%
  | PERCENT END IF
    %(End_If (User_Data);)%
  ;

identifier_list
  : IDENTIFIER
  | identifier_list IDENTIFIER
  ;

IDENTIFIER_BAR_list
  : IDENTIFIER
  | IDENTIFIER_BAR_list BAR IDENTIFIER
  ;

declaration_item
  : IDENTIFIER
  | NUMERIC_LITERAL
  | regexp_string
  ;

declaration_item_list
  : declaration_item
  | declaration_item_list declaration_item
  ;

nonterminal
  : IDENTIFIER COLON rhs_list semicolon_opt
    %(Add_Nonterminal (User_Data, Tree, Nonterm);)%
  | IDENTIFIER COLON_COLON_EQUAL rhs_list semicolon_opt
    %(Add_Nonterminal (User_Data, Tree, Nonterm);)%
  ;

semicolon_opt :
;; Terminating semicolon optional for Python grammar syntax (see
;; header comments).
  SEMICOLON | ;

rhs_list
  : rhs
  | rhs_list BAR rhs
  | rhs_list PERCENT IF IDENTIFIER EQUAL IDENTIFIER
  | rhs_list PERCENT IF IDENTIFIER IN IDENTIFIER_BAR_list
  | rhs_list PERCENT ELSIF IDENTIFIER EQUAL IDENTIFIER
  | rhs_list PERCENT ELSIF IDENTIFIER IN IDENTIFIER_BAR_list
  | rhs_list PERCENT END IF
  ;

rhs
  : ;; empty
  | rhs_item_list
  | rhs_item_list ACTION
  | rhs_item_list ACTION ACTION
  ;

rhs_attribute
  : LESS IDENTIFIER EQUAL IDENTIFIER GREATER
  ;

rhs_element
  : rhs_item
  | IDENTIFIER EQUAL rhs_item
  ;

rhs_item_list
  : rhs_element
  | rhs_item_list rhs_element
  ;

rhs_item
  : IDENTIFIER
  | STRING_LITERAL_SINGLE   ;; value of token
    %(Check_EBNF (User_Data, Tree, Nonterm, 1);)%
  | rhs_attribute ;; ANTLR attribute
    %(Check_EBNF (User_Data, Tree, Nonterm, 1);)%
  | rhs_optional_item
    %(Check_EBNF (User_Data, Tree, Nonterm, 1);)%
  | rhs_multiple_item
    %(Check_EBNF (User_Data, Tree, Nonterm, 1);)%
  | rhs_group_item
    %(Check_EBNF (User_Data, Tree, Nonterm, 1);)%
  ;

rhs_group_item
  : LEFT_PAREN rhs_alternative_list RIGHT_PAREN
  ;; rhs_alternative_list is _not_ marked as an EBNF node; translating
  ;; rhs_group_item handles it.
  ;

rhs_optional_item
  : LEFT_BRACKET rhs_alternative_list RIGHT_BRACKET
  ;; rhs_alternative_list is _not_ marked as an EBNF node; translating
  ;; rhs_optional_item handles it.
  | LEFT_PAREN rhs_alternative_list RIGHT_PAREN QUESTION
  | IDENTIFIER QUESTION
  | STRING_LITERAL_SINGLE QUESTION
    %(Check_EBNF (User_Data, Tree, Nonterm, 1);)%
  ;

rhs_multiple_item
  : LEFT_BRACE rhs_alternative_list RIGHT_BRACE       ;; can be empty
  | LEFT_BRACE rhs_alternative_list RIGHT_BRACE MINUS ;; not empty
  | LEFT_PAREN rhs_alternative_list RIGHT_PAREN PLUS  ;; not empty
  | LEFT_PAREN rhs_alternative_list RIGHT_PAREN STAR  ;; can be empty
  | IDENTIFIER PLUS
  | IDENTIFIER STAR
  ;

rhs_alternative_list
  : rhs_item_list
  | rhs_alternative_list BAR rhs_item_list
  ;

;; We don't enforce a complete order, nor require all parts, so
;; partial files can still be parsed successfully.
compilation_unit
  : declaration
  | nonterminal
  ;

compilation_unit_list
  : compilation_unit
  | compilation_unit_list compilation_unit
  ;

;; end of file
