;;; Wisi grammar for Wisi grammar, for wisi-generate.

;; Copyright (C) 2017, 2018 Free Software Foundation, Inc.
;;
;; Author: Stephen Leake <stephe-leake@stephe-leake.org>
;;
;; This file is part of GNU Emacs.
;;
;; GNU Emacs is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; GNU Emacs is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
;;
;;; Discussion:
;;
;; The main goal is to provide indentation and navigation, which does
;; not require a full semantic understanding of the contents of the
;; file. We do not support generating grammars by parsing the source
;; file with this grammar - that's what the Ada package WisiToken is
;; for.

%{
%%
%%
with WisiToken.Wisi_Grammar_Runtime; use WisiToken.Wisi_Grammar_Runtime;
%}

%keyword END "end"
%keyword IF "if"
%keyword KEYWORD "keyword"
%keyword NON_GRAMMAR "non_grammar"
%keyword TOKEN "token"

%token <delimited-text> PREAMBLE "%{" "%}"
%token <delimited-text> REGEXP "%[" "]%"
%token <delimited-text> ACTION "%(" ")%"

%token <punctuation> BAR "|"
%token <punctuation> COLON ":"
%token <punctuation> COMMA ","
%token <punctuation> EQUAL "="
%token <punctuation> GREATER ">"
%token <punctuation> LESS "<"
%token <punctuation> PERCENT "%"
%token <punctuation> PERCENT_PERCENT "%%"
%token <punctuation> SEMICOLON ";"
%token <punctuation> SLASH "/"

%elisp_regexp wisi-number-p %[ [0-9][0-9_]* ]%
%token <number> NUMERIC_LITERAL wisi-number-p
%token <symbol> IDENTIFIER %[ [a-zA-Z][0-9a-zA-Z_-]* ]%

;; 0x22 = "
;; 0x27 = '
%token <string-double> STRING_LITERAL %[ (["][\x20-\x21\x23-\U0010FFFF]*["])+ ]%
%token <string-single> STRING_LITERAL_CASE_INS %[ (['][\x20-\x26\x28-\U0010FFFF]*['])+ ]%

%non_grammar <non-reporting> WHITESPACE %[ [ \t] ]%
%non_grammar <new-line> NEW_LINE %[ [\x0a]|[\x0d][\x0a] ]%
%non_grammar <comment> COMMENT %[ ";;"[^\x0a\x04]* ]%

%elisp_face font-lock-constant-face
%elisp_face font-lock-function-name-face
%elisp_face font-lock-keyword-face
%elisp_face font-lock-string-face
%elisp_face font-lock-type-face
%elisp_face nil

%output_language Ada
%lexer re2c
%generator_algorithm LALR
%start compilation_unit_list

;; no error recovery, so wisi-generate is independent of mckenzie_recover.

%conflict SHIFT/REDUCE in state declaration, declaration  on token IDENTIFIER
%conflict SHIFT/REDUCE in state declaration_item_list, declaration  on token IDENTIFIER

%%
;;;; grammar rules

declaration
  : PERCENT token_keyword_non_grammar IDENTIFIER declaration_item_list
    %(Add_Declaration (User_Data, Tree, Tokens);)%
  | PERCENT IDENTIFIER declaration_item_list
    %(Add_Declaration (User_Data, Tree, Tokens);)%
  | PERCENT IDENTIFIER
    %(Add_Declaration (User_Data, Tree, Tokens);)%
  | PERCENT IF IDENTIFIER EQUAL IDENTIFIER
    %(Start_If (User_Data, Tree, Tokens);)%
  | PERCENT END IF
    %(End_If (User_Data);)%
  ;

token_keyword_non_grammar
  : KEYWORD
  | NON_GRAMMAR LESS IDENTIFIER GREATER
  | TOKEN LESS IDENTIFIER GREATER
  ;

declaration_item_list
  : declaration_item
  | declaration_item_list declaration_item
  ;

declaration_item
  : COMMA
  | IDENTIFIER
  | EQUAL
  | NUMERIC_LITERAL
  | REGEXP
  | SLASH
  | STRING_LITERAL
  | STRING_LITERAL_CASE_INS
  | TOKEN
  ;; ",", "token", "/" appear in %conflict declarations
  ;

nonterminal
  : IDENTIFIER COLON rhs_list SEMICOLON
    %(Add_Nonterminal (User_Data, Tree, Tokens);)%
  ;

rhs_list
  : rhs
  | rhs_list BAR rhs
  | rhs_list PERCENT IF IDENTIFIER EQUAL IDENTIFIER
  | rhs_list PERCENT END IF
  ;

rhs
  : ;; empty
  | token_list
  | token_list ACTION
  | token_list ACTION ACTION
  ;

token_list
  : IDENTIFIER
  | token_list IDENTIFIER
  ;

;; We don't enforce a complete order, nor require all parts, so
;; partial files can still be parsed successfully.
compilation_unit
  : PREAMBLE
    %(Add_Preamble (User_Data, Tree, Tokens);)%
  | declaration
  | PERCENT_PERCENT
  | nonterminal
  ;

compilation_unit_list
  : compilation_unit
  | compilation_unit_list compilation_unit
  ;

;; end of file
