;;; show an incorrect way to declare an empty production in a list

;; This grammar is ambiguous. Consider the following statements:
;;
;; 1) is <empty declaration> begin ;
;; 2) is is <empty declaration> begin ; begin ;
;; 3) is <empty declaration> is <empty declaration> begin ; begin ;
;;
;; In parsing 3), the second 'is' causes a shift/reduce conflict;
;; shift to start the nested declaration (as in 2), reduce to the
;; empty declaration. Both are correct according to the grammar; this
;; is reported as shift/reduce conflicts.

%{
(require 'wisi)
%}

%keyword BEGIN "begin"
%keyword IS "is"

%token <punctuation> SEMICOLON ";"

%token <whitespace> WHITESPACE ""
%token <line_comment> COMMENT "--"

%start declarations

;; The OpenToken parser doesn't handle conflicts, so it doesn't
;; use these; the execution stops at the end of grammar generation
;; with an "unknown conflicts" error.
;;
;; IMPROVEME: add --ignore-unknown-conflicts to generated -parse.adb
%conflict SHIFT/REDUCE in state body, declaration on token BEGIN
%conflict SHIFT/REDUCE in state opentoken_accept, declaration on token EOI
%conflict SHIFT/REDUCE in state body, declaration on token IS

%%

declaration
  : ;; empty
  | body
  ;

declarations
  : declaration
  | declarations declaration
  ;

body
  : IS declarations BEGIN SEMICOLON
  ;

%%
;;; end of file
