;;; show an incorrect way to declare an empty production in a list

;; This grammar is ambiguous. Consider the following statements:
;;
;; 1) is <empty declaration> begin ;
;; 2) is is <empty declaration> begin ; begin ;
;; 3) is <empty declaration> is <empty declaration> begin ; begin ;
;;
;; In parsing 3), the second 'is' causes a shift/reduce conflict;
;; shift to start the nested declaration (as in 2), reduce to the
;; empty declaration. Both are correct according to the grammar; this
;; is reported as shift/reduce conflicts when compiling the grammar.
;;
;; In the actual parse, an infinite number of parsers are spawned,
;; terminating when the parallel parse limit is reached. Because the
;; conflict is never resolved, no actions are output.

%{
%%
%}

%keyword BEGIN "begin"
%keyword IS "is"

%token <punctuation> SEMICOLON ";"

%non_grammar <non-reporting> WHITESPACE %[ [ \t\n] ]%
%non_grammar <non-reporting> COMMENT %[ "--"[^\n]*[\n] ]%

%start declarations
%first_state_index 1
%first_parser_label 1

;; LR1 generates different conflict names, so we only do LALR
%generator_algorithm LALR

%output_language Ada
%lexer re2c

%conflict SHIFT/REDUCE in state wisitoken_accept, wisitoken_accept  on token IS
%conflict SHIFT/REDUCE in state body, body  on token IS
%conflict ACCEPT_IT/REDUCE in state wisitoken_accept, wisitoken_accept  on token Wisi_EOI
%conflict SHIFT/REDUCE in state declarations, declarations  on token IS
%conflict SHIFT/REDUCE in state body, declarations  on token BEGIN

%%

declaration
  : ;; empty
  | body
  ;

declarations
  : declaration
  | declarations declaration
  ;

body
  : IS declarations BEGIN SEMICOLON
    %(null; -- wisi-statement-action [1 block-middle 3 block-middle 4 statement-end])%
  ;

%%
;;; end of file
