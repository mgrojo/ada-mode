 1 stack:  1 : , 
 1: 1: BEGIN : shift and goto state 2
spawn parser (2 active)
 2 stack:  2 : (BEGIN 1 . 5),  1 : , 
 2: 2: IDENTIFIER : reduce 0 tokens to label_opt
 ... goto state 8
 1 stack:  2 : (BEGIN 1 . 5),  1 : , 
 1: 2: IDENTIFIER : shift and goto state 5
 2 stack:  8 : (label_opt nil),  2 : (BEGIN 1 . 5),  1 : , 
 2: 8: IDENTIFIER : shift and goto state 9
 2 stack:  9 : (IDENTIFIER 10 . 14),  8 : (label_opt nil),  2 : (BEGIN 1 . 5),  1 : , 
 2: 9: COLON : ERROR
 1 stack:  5 : (IDENTIFIER 10 . 14),  2 : (BEGIN 1 . 5),  1 : , 
 1: 5: COLON : shift and goto state 12
 2: terminate (1 active)
 1 stack:  12 : (COLON 16 . 16),  5 : (IDENTIFIER 10 . 14),  2 : (BEGIN 1 . 5),  1 : , 
 1: 12: IDENTIFIER : reduce 2 tokens to label_opt
(let ((tokens '((IDENTIFIER 10 . 14) (COLON 16 . 16))))
(wisi-statement-action 1 'block-start)
)
 ... goto state 8
 1 stack:  8 : (label_opt 10 . 16),  2 : (BEGIN 1 . 5),  1 : , 
 1: 8: IDENTIFIER : shift and goto state 9
 1 stack:  9 : (IDENTIFIER 21 . 21),  8 : (label_opt 10 . 16),  2 : (BEGIN 1 . 5),  1 : , 
 1: 9: COLON_EQUAL : shift and goto state 14
 1 stack:  14 : (COLON_EQUAL 23 . 24),  9 : (IDENTIFIER 21 . 21),  8 : (label_opt 10 . 16),  2 : (BEGIN 1 . 5),  1 : , 
 1: 14: IDENTIFIER : shift and goto state 15
 1 stack:  15 : (IDENTIFIER 26 . 26),  14 : (COLON_EQUAL 23 . 24),  9 : (IDENTIFIER 21 . 21),  8 : (label_opt 10 . 16),  2 : (BEGIN 1 . 5),  1 : , 
 1: 15: SEMICOLON : shift and goto state 16
 1 stack:  16 : (SEMICOLON 27 . 27),  15 : (IDENTIFIER 26 . 26),  14 : (COLON_EQUAL 23 . 24),  9 : (IDENTIFIER 21 . 21),  8 : (label_opt 10 . 16),  2 : (BEGIN 1 . 5),  1 : , 
 1: 16: END : reduce 5 tokens to statement
 ... goto state 6
 1 stack:  6 : (statement 10 . 27),  2 : (BEGIN 1 . 5),  1 : , 
 1: 6: END : reduce 1 tokens to sequence_of_statements
 ... goto state 7
 1 stack:  7 : (sequence_of_statements 10 . 27),  2 : (BEGIN 1 . 5),  1 : , 
 1: 7: END : shift and goto state 10
 1 stack:  10 : (END 29 . 31),  7 : (sequence_of_statements 10 . 27),  2 : (BEGIN 1 . 5),  1 : , 
 1: 10: SEMICOLON : shift and goto state 13
 1 stack:  13 : (SEMICOLON 32 . 32),  10 : (END 29 . 31),  7 : (sequence_of_statements 10 . 27),  2 : (BEGIN 1 . 5),  1 : , 
 1: 13: EOF_ID : reduce 4 tokens to compilation_unit
(let ((tokens '((BEGIN 1 . 5) (sequence_of_statements 10 . 27) (END 29 . 31) (SEMICOLON 32 . 32))))
(setq wisi-test-success t)
)
 ... goto state 3
 1 stack:  3 : (compilation_unit 1 . 32),  1 : , 
 1: 3: EOF_ID : shift and goto state 4
 1 stack:  4 : (EOF_ID 33 . 33),  3 : (compilation_unit 1 . 32),  1 : , 
 1: 4: EOF_ID : accept it
