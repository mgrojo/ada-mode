;;; body_instantiation_conflict-elisp.el --- Generated parser support file  -*- lexical-binding:t -*-

;; Copyright (C) 2013 Stephen Leake.  All Rights Reserved.

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3, or (at
;; your option) any later version.
;;
;; This software is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

(require 'wisi)
(require 'semantic/lex)
(require 'wisi-compile)

(defconst body_instantiation_conflict-elisp-keyword-table
  (semantic-lex-make-keyword-table
   '(
    ("begin" . BEGIN)
    ("end" . END)
    ("is" . IS)
    ("(" . LEFT_PAREN)
    ("new" . NEW)
    ("null" . NULL)
    ("procedure" . PROCEDURE)
    (")" . RIGHT_PAREN)
    )
   nil)
  "Table of language keywords.")

(defconst body_instantiation_conflict-elisp-token-table
  (semantic-lex-make-type-table
   '(
     ("punctuation"
      (SEMICOLON . ";")
     )
     ("symbol"
      (IDENTIFIER)
     )
     ("string"
      (STRING_LITERAL)
     )
    )
   nil)
  "Table of language tokens.")

(defconst body_instantiation_conflict-elisp-parse-table
   (wisi-compile-grammar
   '((SEMICOLON IDENTIFIER STRING_LITERAL BEGIN END IS LEFT_PAREN NEW NULL PROCEDURE RIGHT_PAREN )
     ((compilation_unit
       ((library_item library_item )
        (setq wisi-test-success t)))
      (library_item
       ((subprogram_body ))
       ((generic_instantiation )))
      (subprogram_body
       ((subprogram_specification IS BEGIN NULL END SEMICOLON )
        `,(wisi-statement-action 1 'statement-start 6 'statement-end)))
      (subprogram_specification
       ((PROCEDURE IDENTIFIER parameter_list )))
      (parameter_list
       (())
       ((LEFT_PAREN IDENTIFIER RIGHT_PAREN )))
      (generic_instantiation
       ((PROCEDURE IDENTIFIER IS NEW IDENTIFIER LEFT_PAREN IDENTIFIER RIGHT_PAREN SEMICOLON )
        `,(wisi-statement-action 1 'statement-start 9 'statement-end))
       ((STRING_LITERAL ))))
     [((default . error) (STRING_LITERAL .  2) (PROCEDURE .  1))
      ((default . error) (IDENTIFIER .  10))
      ((default . error) (Wisi_EOI . (generic_instantiation . 1)) (STRING_LITERAL . (generic_instantiation . 1)) (PROCEDURE . (generic_instantiation . 1)))
      ((default . error) (Wisi_EOI . accept))
      ((default . error) (STRING_LITERAL .  2) (PROCEDURE .  1))
      ((default . error) (Wisi_EOI . (library_item . 0)) (STRING_LITERAL . (library_item . 0)) (PROCEDURE . (library_item . 0)))
      ((default . error) (IS .  8))
      ((default . error) (Wisi_EOI . (library_item . 1)) (STRING_LITERAL . (library_item . 1)) (PROCEDURE . (library_item . 1)))
      ((default . error) (BEGIN .  14))
      ((default . error) (Wisi_EOI . (compilation_unit . 0)))
      ((default . error) (LEFT_PAREN .  12) (IS . ( 11 (parameter_list . 0))))
      ((default . error) (NEW .  17))
      ((default . error) (IDENTIFIER .  16))
      ((default . error) (IS . (subprogram_specification . 0)))
      ((default . error) (NULL .  15))
      ((default . error) (END .  20))
      ((default . error) (RIGHT_PAREN .  19))
      ((default . error) (IDENTIFIER .  18))
      ((default . error) (LEFT_PAREN .  22))
      ((default . error) (IS . (parameter_list . 1)))
      ((default . error) (SEMICOLON .  21))
      ((default . error) (Wisi_EOI . (subprogram_body . 0)) (STRING_LITERAL . (subprogram_body . 0)) (PROCEDURE . (subprogram_body . 0)))
      ((default . error) (IDENTIFIER .  23))
      ((default . error) (RIGHT_PAREN .  24))
      ((default . error) (SEMICOLON .  25))
      ((default . error) (Wisi_EOI . (generic_instantiation . 0)) (STRING_LITERAL . (generic_instantiation . 0)) (PROCEDURE . (generic_instantiation . 0)))]
     [((compilation_unit . 3)(library_item . 4)(subprogram_body . 5)(subprogram_specification . 6)(generic_instantiation . 7))
      nil
      nil
      nil
      ((library_item . 9)(subprogram_body . 5)(subprogram_specification . 6)(generic_instantiation . 7))
      nil
      nil
      nil
      nil
      nil
      ((parameter_list . 13))
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil]))
  "Parser table.")

(provide 'body_instantiation_conflict-elisp)

;; end of file
