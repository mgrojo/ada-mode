;;; range_conflict-lr1-elisp.el --- Generated parser support file  -*- lexical-binding:t -*-
;;  command line: wisi-generate.exe --generator_algorithm LALR_LR1 --output_language Elisp --lexer Elisp
;;  ../wisi/test/range_conflict.wy

;; Copyright (C) 2013, 2017, 2018 Stephen Leake.  All Rights Reserved.

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3, or (at
;; your option) any later version.
;;
;; This software is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

(require 'wisi)
(require 'wisi-compile)
(require 'wisi-elisp-parse)

(defconst range_conflict-lr1-elisp-keyword-table-raw
  '(
   ("in" . IN)
   ("(" . LEFT_PAREN)
   ("range" . RANGE)
   (")" . RIGHT_PAREN)
   ))

(defconst range_conflict-lr1-elisp-token-table-raw
  '(
   ("punctuation"
    (DOT_DOT . "..")
    (TICK . "'")
    )
   ("symbol"
    (IDENTIFIER . "")
    )
   ("string-double"
    (STRING_LITERAL . "")
    )
   ))

(defconst range_conflict-lr1-elisp-parse-table
   (wisi-compile-grammar
   '(((compilation_unit
       ((membership_choice range )
        (setq wisi-test-success t)))
      (membership_choice
       ((primary ))
       ((range )))
      (primary
       ((IDENTIFIER ))
       ((STRING_LITERAL ))
       ((LEFT_PAREN relation RIGHT_PAREN )))
      (range
       ((IDENTIFIER TICK RANGE LEFT_PAREN relation RIGHT_PAREN ))
       ((IDENTIFIER TICK RANGE ))
       ((primary DOT_DOT primary )))
      (relation
       ((primary IN membership_choice ))))
     [((default . error) (LEFT_PAREN .  1) (IDENTIFIER .  2) (STRING_LITERAL .  3))
      ((default . error) (LEFT_PAREN .  15) (IDENTIFIER .  16) (STRING_LITERAL .  17))
      ((default . error) (LEFT_PAREN . (primary . 0)) (DOT_DOT . (primary . 0)) (TICK .  14) (IDENTIFIER . (primary . 0)) (STRING_LITERAL . (primary . 0)))
      ((default . error) (LEFT_PAREN . (primary . 1)) (DOT_DOT . (primary . 1)) (IDENTIFIER . (primary . 1)) (STRING_LITERAL . (primary . 1)))
      ((default . error) (Wisi_EOI . accept))
      ((default . error) (LEFT_PAREN .  9) (IDENTIFIER .  10) (STRING_LITERAL .  11))
      ((default . error) (LEFT_PAREN . (membership_choice . 0)) (DOT_DOT .  8) (IDENTIFIER . (membership_choice . 0)) (STRING_LITERAL . (membership_choice . 0)))
      ((default . error) (LEFT_PAREN . (membership_choice . 1)) (IDENTIFIER . (membership_choice . 1)) (STRING_LITERAL . (membership_choice . 1)))
      ((default . error) (LEFT_PAREN .  27) (IDENTIFIER .  28) (STRING_LITERAL .  29))
      ((default . error) (LEFT_PAREN .  15) (IDENTIFIER .  16) (STRING_LITERAL .  17))
      ((default . error) (DOT_DOT . (primary . 0)) (TICK .  25))
      ((default . error) (DOT_DOT . (primary . 1)))
      ((default . error) (DOT_DOT .  24))
      ((default . error) (Wisi_EOI . (compilation_unit . 0)))
      ((default . error) (RANGE .  23))
      ((default . error) (LEFT_PAREN .  15) (IDENTIFIER .  16) (STRING_LITERAL .  17))
      ((default . error) (IN . (primary . 0)))
      ((default . error) (IN . (primary . 1)))
      ((default . error) (IN .  21))
      ((default . error) (RIGHT_PAREN .  20))
      ((default . error) (LEFT_PAREN . (primary . 2)) (DOT_DOT . (primary . 2)) (IDENTIFIER . (primary . 2)) (STRING_LITERAL . (primary . 2)))
      ((default . error) (LEFT_PAREN .  40) (IDENTIFIER .  41) (STRING_LITERAL .  42))
      ((default . error) (RIGHT_PAREN .  39))
      ((default . error) (LEFT_PAREN . ( 38 (range . 1))) (IDENTIFIER . (range . 1)) (STRING_LITERAL . (range . 1)))
      ((default . error) (LEFT_PAREN .  34) (IDENTIFIER .  35) (STRING_LITERAL .  36))
      ((default . error) (RANGE .  33))
      ((default . error) (RIGHT_PAREN .  32))
      ((default . error) (LEFT_PAREN .  15) (IDENTIFIER .  16) (STRING_LITERAL .  17))
      ((default . error) (LEFT_PAREN . (primary . 0)) (IDENTIFIER . (primary . 0)) (STRING_LITERAL . (primary . 0)))
      ((default . error) (LEFT_PAREN . (primary . 1)) (IDENTIFIER . (primary . 1)) (STRING_LITERAL . (primary . 1)))
      ((default . error) (LEFT_PAREN . (range . 2)) (IDENTIFIER . (range . 2)) (STRING_LITERAL . (range . 2)))
      ((default . error) (RIGHT_PAREN .  52))
      ((default . error) (DOT_DOT . (primary . 2)))
      ((default . error) (LEFT_PAREN .  51) (Wisi_EOI . (range . 1)))
      ((default . error) (LEFT_PAREN .  15) (IDENTIFIER .  16) (STRING_LITERAL .  17))
      ((default . error) (Wisi_EOI . (primary . 0)))
      ((default . error) (Wisi_EOI . (primary . 1)))
      ((default . error) (Wisi_EOI . (range . 2)))
      ((default . error) (LEFT_PAREN .  15) (IDENTIFIER .  16) (STRING_LITERAL .  17))
      ((default . error) (IN . (primary . 2)))
      ((default . error) (LEFT_PAREN .  15) (IDENTIFIER .  16) (STRING_LITERAL .  17))
      ((default . error) (RIGHT_PAREN . (primary . 0)) (DOT_DOT . (primary . 0)) (TICK .  47))
      ((default . error) (RIGHT_PAREN . (primary . 1)) (DOT_DOT . (primary . 1)))
      ((default . error) (RIGHT_PAREN . (relation . 0)))
      ((default . error) (RIGHT_PAREN . (membership_choice . 0)) (DOT_DOT .  46))
      ((default . error) (RIGHT_PAREN . (membership_choice . 1)))
      ((default . error) (LEFT_PAREN .  58) (IDENTIFIER .  59) (STRING_LITERAL .  60))
      ((default . error) (RANGE .  57))
      ((default . error) (RIGHT_PAREN .  56))
      ((default . error) (RIGHT_PAREN .  55))
      ((default . error) (RIGHT_PAREN .  54))
      ((default . error) (LEFT_PAREN .  15) (IDENTIFIER .  16) (STRING_LITERAL .  17))
      ((default . error) (LEFT_PAREN . (primary . 2)) (IDENTIFIER . (primary . 2)) (STRING_LITERAL . (primary . 2)))
      ((default . error) (RIGHT_PAREN .  64))
      ((default . error) (Wisi_EOI . (primary . 2)))
      ((default . error) (LEFT_PAREN . (range . 0)) (IDENTIFIER . (range . 0)) (STRING_LITERAL . (range . 0)))
      ((default . error) (RIGHT_PAREN . (primary . 2)) (DOT_DOT . (primary . 2)))
      ((default . error) (LEFT_PAREN .  63) (RIGHT_PAREN . (range . 1)))
      ((default . error) (LEFT_PAREN .  15) (IDENTIFIER .  16) (STRING_LITERAL .  17))
      ((default . error) (RIGHT_PAREN . (primary . 0)))
      ((default . error) (RIGHT_PAREN . (primary . 1)))
      ((default . error) (RIGHT_PAREN . (range . 2)))
      ((default . error) (RIGHT_PAREN .  66))
      ((default . error) (LEFT_PAREN .  15) (IDENTIFIER .  16) (STRING_LITERAL .  17))
      ((default . error) (Wisi_EOI . (range . 0)))
      ((default . error) (RIGHT_PAREN .  67))
      ((default . error) (RIGHT_PAREN . (primary . 2)))
      ((default . error) (RIGHT_PAREN . (range . 0)))]
     [((compilation_unit . 4)(membership_choice . 5)(primary . 6)(range . 7))
      ((primary . 18)(relation . 19))
      nil
      nil
      nil
      ((primary . 12)(range . 13))
      nil
      nil
      ((primary . 30))
      ((primary . 18)(relation . 26))
      nil
      nil
      nil
      nil
      nil
      ((primary . 18)(relation . 22))
      nil
      nil
      nil
      nil
      nil
      ((membership_choice . 43)(primary . 44)(range . 45))
      nil
      nil
      ((primary . 37))
      nil
      nil
      ((primary . 18)(relation . 31))
      nil
      nil
      nil
      nil
      nil
      nil
      ((primary . 18)(relation . 50))
      nil
      nil
      nil
      ((primary . 18)(relation . 49))
      nil
      ((primary . 18)(relation . 48))
      nil
      nil
      nil
      nil
      nil
      ((primary . 61))
      nil
      nil
      nil
      nil
      ((primary . 18)(relation . 53))
      nil
      nil
      nil
      nil
      nil
      nil
      ((primary . 18)(relation . 62))
      nil
      nil
      nil
      nil
      ((primary . 18)(relation . 65))
      nil
      nil
      nil
      nil]))
  "Parser table.")

(provide 'range_conflict-lr1-elisp)
;; end of file
