 1 stack:  1 : , 
 1: 1: IS : shift and goto state 2
 1 stack:  2 : (IS 43 . 44),  1 : , 
 1: 2: BEGIN : reduce 0 tokens to declarative_part
 ... goto state 8
 1 stack:  8 : (declarative_part nil),  2 : (IS 43 . 44),  1 : , 
 1: 8: BEGIN : shift and goto state 9
 1 stack:  9 : (BEGIN 46 . 50),  8 : (declarative_part nil),  2 : (IS 43 . 44),  1 : , 
 1: 9: SEMICOLON : shift and goto state 10
 1 stack:  10 : (SEMICOLON 51 . 51),  9 : (BEGIN 46 . 50),  8 : (declarative_part nil),  2 : (IS 43 . 44),  1 : , 
 1: 10: IS : reduce 4 tokens to body
(let ((tokens '((IS 43 . 44) (declarative_part nil) (BEGIN 46 . 50) (SEMICOLON 51 . 51))))
(wisi-statement-action 1 'block-middle 3 'block-middle 4 'statement-end)
)
 ... goto state 5
 1 stack:  5 : (body 43 . 51),  1 : , 
 1: 5: IS : reduce 1 tokens to declarations
 ... goto state 3
 1 stack:  3 : (declarations 43 . 51),  1 : , 
 1: 3: IS : shift and goto state 2
 1 stack:  2 : (IS 105 . 106),  3 : (declarations 43 . 51),  1 : , 
 1: 2: IS : shift and goto state 2
 1 stack:  2 : (IS 112 . 113),  2 : (IS 105 . 106),  3 : (declarations 43 . 51),  1 : , 
 1: 2: BEGIN : reduce 0 tokens to declarative_part
 ... goto state 8
 1 stack:  8 : (declarative_part nil),  2 : (IS 112 . 113),  2 : (IS 105 . 106),  3 : (declarations 43 . 51),  1 : , 
 1: 8: BEGIN : shift and goto state 9
 1 stack:  9 : (BEGIN 115 . 119),  8 : (declarative_part nil),  2 : (IS 112 . 113),  2 : (IS 105 . 106),  3 : (declarations 43 . 51),  1 : , 
 1: 9: SEMICOLON : shift and goto state 10
 1 stack:  10 : (SEMICOLON 120 . 120),  9 : (BEGIN 115 . 119),  8 : (declarative_part nil),  2 : (IS 112 . 113),  2 : (IS 105 . 106),  3 : (declarations 43 . 51),  1 : , 
 1: 10: BEGIN : reduce 4 tokens to body
(let ((tokens '((IS 112 . 113) (declarative_part nil) (BEGIN 115 . 119) (SEMICOLON 120 . 120))))
(wisi-statement-action 1 'block-middle 3 'block-middle 4 'statement-end)
)
 ... goto state 5
 1 stack:  5 : (body 112 . 120),  2 : (IS 105 . 106),  3 : (declarations 43 . 51),  1 : , 
 1: 5: BEGIN : reduce 1 tokens to declarations
 ... goto state 3
 1 stack:  3 : (declarations 112 . 120),  2 : (IS 105 . 106),  3 : (declarations 43 . 51),  1 : , 
 1: 3: BEGIN : reduce 1 tokens to declarative_part
 ... goto state 8
 1 stack:  8 : (declarative_part 112 . 120),  2 : (IS 105 . 106),  3 : (declarations 43 . 51),  1 : , 
 1: 8: BEGIN : shift and goto state 9
 1 stack:  9 : (BEGIN 122 . 126),  8 : (declarative_part 112 . 120),  2 : (IS 105 . 106),  3 : (declarations 43 . 51),  1 : , 
 1: 9: SEMICOLON : shift and goto state 10
 1 stack:  10 : (SEMICOLON 127 . 127),  9 : (BEGIN 122 . 126),  8 : (declarative_part 112 . 120),  2 : (IS 105 . 106),  3 : (declarations 43 . 51),  1 : , 
 1: 10: EOF_ID : reduce 4 tokens to body
(let ((tokens '((IS 105 . 106) (declarative_part 112 . 120) (BEGIN 122 . 126) (SEMICOLON 127 . 127))))
(wisi-statement-action 1 'block-middle 3 'block-middle 4 'statement-end)
)
 ... goto state 7
 1 stack:  7 : (body 105 . 127),  3 : (declarations 43 . 51),  1 : , 
 1: 7: EOF_ID : reduce 2 tokens to declarations
 ... goto state 3
 1 stack:  3 : (declarations 43 . 127),  1 : , 
 1: 3: EOF_ID : reduce 1 tokens to declarative_part
 ... goto state 4
 1 stack:  4 : (declarative_part 43 . 127),  1 : , 
 1: 4: EOF_ID : shift and goto state 6
 1 stack:  6 : (EOF_ID 128 . 128),  4 : (declarative_part 43 . 127),  1 : , 
 1: 6: EOF_ID : accept it
