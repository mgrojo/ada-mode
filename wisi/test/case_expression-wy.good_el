;;; case_expression-wy.el --- Generated parser support file  -*- lexical-binding:t -*-

;; Copyright (C) 2013 Stephen Leake.  All Rights Reserved.

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3, or (at
;; your option) any later version.
;;
;; This software is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

(require 'wisi)
(require 'semantic/lex)
(require 'wisi-compile)

(defconst case_expression-wy--keyword-table
  (semantic-lex-make-keyword-table
   '(
    ("range" . RANGE)
    ("when" . WHEN)
    )
   nil)
  "Table of language keywords.")

(defconst case_expression-wy--token-table
  (semantic-lex-make-type-table
   '(
     ("punctuation"
      (DOT_DOT . "..")
      (EQUAL_GREATER . "=>")
      (TICK . "'")
     )
     ("number"
      (NUMBER_LITERAL . wisi-number-p)
     )
     ("symbol"
      (IDENTIFIER)
     )
    )
   nil)
  "Table of language tokens.")

(defconst case_expression-wy--parse-table
   (wisi-compile-grammar
   '((DOT_DOT EQUAL_GREATER TICK NUMBER_LITERAL IDENTIFIER RANGE WHEN )
     ((case_expression
       ((WHEN discrete_choice EQUAL_GREATER factor )
        (setq wisi-test-success t)))
      (choice_expression
       ((choice_relation )))
      (choice_relation
       ((factor_list )))
      (discrete_choice
       ((choice_expression ))
       ((range_nt )))
      (factor
       ((IDENTIFIER ))
       ((NUMBER_LITERAL )))
      (factor_list
       ((factor )))
      (range_nt
       ((IDENTIFIER TICK RANGE ))
       ((factor_list DOT_DOT factor_list ))))
     [((default . error) (WHEN .  1))
      ((default . error) (IDENTIFIER .  5) (NUMBER_LITERAL .  4))
      ((default . error) ($EOI .  3))
      ((default . error) ($EOI . accept) (IDENTIFIER . accept) (NUMBER_LITERAL . accept) (TICK . accept) (EQUAL_GREATER . accept) (DOT_DOT . accept) (WHEN . accept) (RANGE . accept))
      ((default . error) ($EOI . (factor . 1)) (DOT_DOT . (factor . 1)) (EQUAL_GREATER . (factor . 1)))
      ((default . error) (TICK .  14) (DOT_DOT . (factor . 0)) (EQUAL_GREATER . (factor . 0)))
      ((default . error) (EQUAL_GREATER . (discrete_choice . 0)))
      ((default . error) (EQUAL_GREATER . (choice_expression . 0)))
      ((default . error) (EQUAL_GREATER .  13))
      ((default . error) (DOT_DOT . (factor_list . 0)) (EQUAL_GREATER . (factor_list . 0)))
      ((default . error) (DOT_DOT .  12) (EQUAL_GREATER . (choice_relation . 0)))
      ((default . error) (EQUAL_GREATER . (discrete_choice . 1)))
      ((default . error) (IDENTIFIER .  16) (NUMBER_LITERAL .  4))
      ((default . error) (IDENTIFIER .  16) (NUMBER_LITERAL .  4))
      ((default . error) (RANGE .  15))
      ((default . error) (EQUAL_GREATER . (range_nt . 0)))
      ((default . error) ($EOI . (factor . 0)) (EQUAL_GREATER . (factor . 0)))
      ((default . error) ($EOI . (case_expression . 0)))
      ((default . error) (EQUAL_GREATER . (range_nt . 1)))]
     [((case_expression . 2))
      ((choice_expression . 6)(choice_relation . 7)(discrete_choice . 8)(factor . 9)(factor_list . 10)(range_nt . 11))
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      ((factor . 9)(factor_list . 18))
      ((factor . 17))
      nil
      nil
      nil
      nil
      nil]))
  "Parser table.")

(provide 'case_expression-wy)

;; end of file
