--  generated parser support file.
--  command line: wisi-generate.exe  --generate LALR ADA ../../wisi/test/range_conflict.wy
--

--  Copyright (C) 2013, 2017, 2018 Stephen Leake.  All Rights Reserved.

--  This program is free software; you can redistribute it and/or
--  modify it under the terms of the GNU General Public License as
--  published by the Free Software Foundation; either version 3, or (at
--  your option) any later version.
--
--  This software is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

with WisiToken.Lexer.re2c;
with range_conflict_re2c_c;
package body Range_Conflict_LALR_Main is

   package Lexer is new WisiToken.Lexer.re2c
     (range_conflict_re2c_c.New_Lexer,
      range_conflict_re2c_c.Free_Lexer,
      range_conflict_re2c_c.Reset_Lexer,
      range_conflict_re2c_c.Next_Token);

   procedure Create_Parser
     (Parser                       :    out WisiToken.LR.Parser_No_Recover.Parser;
      Trace                        : not null access WisiToken.Trace'Class;
      User_Data                    : in     WisiToken.Syntax_Trees.User_Data_Access)
   is
      use WisiToken.LR;
      Table : constant Parse_Table_Ptr := new Parse_Table
        (State_First       => 0,
         State_Last        => 22,
         First_Terminal    => Trace.Descriptor.First_Terminal,
         Last_Terminal     => Trace.Descriptor.Last_Terminal,
         First_Nonterminal => Trace.Descriptor.First_Nonterminal,
         Last_Nonterminal  => Trace.Descriptor.Last_Nonterminal);
   begin
      Table.McKenzie_Param :=
        (First_Terminal    => 2,
         Last_Terminal     => 10,
         First_Nonterminal => 11,
         Last_Nonterminal  => 16,
         Insert =>
           (0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0),
         Delete =>
           (0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0),
         Push_Back =>
           (0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0),
         Task_Count  => 0,
         Cost_Limit  => 2147483647,
         Check_Limit => 2147483647,
         Check_Delta_Limit => 2147483647,
         Enqueue_Limit => 2147483647);


      Add_Action (Table.States (0), (1 => (14, 2)), 3, 1);
      Add_Action (Table.States (0), ((14, 0), (15, 0), (15, 1)), 8, 2);
      Add_Action (Table.States (0), (1 => (14, 1)), 9, 3);
      Add_Error (Table.States (0));
      Add_Goto (Table.States (0), 12, 4);
      Add_Goto (Table.States (0), 13, 5);
      Add_Goto (Table.States (0), 14, 6);
      Add_Goto (Table.States (0), 15, 7);
      Add_Action (Table.States (1), (1 => (14, 2)), 3, 1);
      Add_Action (Table.States (1), (1 => (14, 0)), 8, 12);
      Add_Action (Table.States (1), (1 => (14, 1)), 9, 3);
      Add_Error (Table.States (1));
      Add_Goto (Table.States (1), 14, 13);
      Add_Goto (Table.States (1), 16, 14);
      Add_Action (Table.States (2), 3, Reduce, (14, 0), 1, null, null);
      Add_Action (Table.States (2), 5, Reduce, (14, 0), 1, null, null);
      Add_Action (Table.States (2), 6, Reduce, (14, 0), 1, null, null);
      Add_Action (Table.States (2), ((15, 0), (15, 1)), 7, 11);
      Add_Action (Table.States (2), 8, Reduce, (14, 0), 1, null, null);
      Add_Action (Table.States (2), 9, Reduce, (14, 0), 1, null, null);
      Add_Error (Table.States (2));
      Add_Action (Table.States (3), (2, 3, 5, 6, 8, 9, 10), (14, 1), 1, null, null);
      Add_Action (Table.States (4), 10, Accept_It, (11, 0), 1, null, null);
      Add_Error (Table.States (4));
      Add_Action (Table.States (5), (1 => (14, 2)), 3, 1);
      Add_Action (Table.States (5), ((14, 0), (15, 0), (15, 1)), 8, 2);
      Add_Action (Table.States (5), (1 => (14, 1)), 9, 3);
      Add_Error (Table.States (5));
      Add_Goto (Table.States (5), 14, 9);
      Add_Goto (Table.States (5), 15, 10);
      Add_Action (Table.States (6), 3, Reduce, (13, 0), 1, null, null);
      Add_Action (Table.States (6), 5, Reduce, (13, 0), 1, null, null);
      Add_Action (Table.States (6), (1 => (15, 2)), 6, 8);
      Add_Action (Table.States (6), 8, Reduce, (13, 0), 1, null, null);
      Add_Action (Table.States (6), 9, Reduce, (13, 0), 1, null, null);
      Add_Error (Table.States (6));
      Add_Action (Table.States (7), (3, 5, 8, 9), (13, 1), 1, null, null);
      Add_Action (Table.States (8), (1 => (14, 2)), 3, 1);
      Add_Action (Table.States (8), (1 => (14, 0)), 8, 12);
      Add_Action (Table.States (8), (1 => (14, 1)), 9, 3);
      Add_Error (Table.States (8));
      Add_Goto (Table.States (8), 14, 18);
      Add_Action (Table.States (9), (1 => (15, 2)), 6, 8);
      Add_Error (Table.States (9));
      Add_Action (Table.States (10), (1 =>  10), (12, 0), 2, null, null);
      Add_Action (Table.States (11), ((15, 0), (15, 1)), 4, 17);
      Add_Error (Table.States (11));
      Add_Action (Table.States (12), (2, 3, 5, 8, 9, 10), (14, 0), 1, null, null);
      Add_Action (Table.States (13), (1 => (16, 0)), 2, 16);
      Add_Error (Table.States (13));
      Add_Action (Table.States (14), (1 => (14, 2)), 5, 15);
      Add_Error (Table.States (14));
      Add_Action (Table.States (15), (2, 3, 5, 6, 8, 9, 10), (14, 2), 3, null, null);
      Add_Action (Table.States (16), (1 => (14, 2)), 3, 1);
      Add_Action (Table.States (16), ((14, 0), (15, 0), (15, 1)), 8, 2);
      Add_Action (Table.States (16), (1 => (14, 1)), 9, 3);
      Add_Error (Table.States (16));
      Add_Goto (Table.States (16), 13, 20);
      Add_Goto (Table.States (16), 14, 6);
      Add_Goto (Table.States (16), 15, 7);
      Add_Action (Table.States (17), (1 => (15, 0)), 3, 19, (15, 1), 3, null, null);
      Add_Action (Table.States (17), 5, Reduce, (15, 1), 3, null, null);
      Add_Action (Table.States (17), 8, Reduce, (15, 1), 3, null, null);
      Add_Action (Table.States (17), 9, Reduce, (15, 1), 3, null, null);
      Add_Action (Table.States (17), 10, Reduce, (15, 1), 3, null, null);
      Add_Error (Table.States (17));
      Add_Action (Table.States (18), (3, 5, 8, 9, 10), (15, 2), 3, null, null);
      Add_Action (Table.States (19), (1 => (14, 2)), 3, 1);
      Add_Action (Table.States (19), (1 => (14, 0)), 8, 12);
      Add_Action (Table.States (19), (1 => (14, 1)), 9, 3);
      Add_Error (Table.States (19));
      Add_Goto (Table.States (19), 14, 13);
      Add_Goto (Table.States (19), 16, 21);
      Add_Action (Table.States (20), (1 =>  5), (16, 0), 3, null, null);
      Add_Action (Table.States (21), (1 => (15, 0)), 5, 22);
      Add_Error (Table.States (21));
      Add_Action (Table.States (22), (3, 5, 8, 9, 10), (15, 0), 6, null, null);

      WisiToken.LR.Parser_No_Recover.New_Parser
        (Parser,
         Trace,
         Lexer.New_Lexer (Trace),
         Table,
         User_Data,
         Max_Parallel         => 15,
         Terminate_Same_State => True);
   end Create_Parser;
end Range_Conflict_LALR_Main;
