;; Test regular expressions vs Ada tick, character literal, string

%{
--  Copyright (C) 2013, 2015, 2017 Stephen Leake.  All Rights Reserved.
--
--  This program is free software; you can redistribute it and/or
--  modify it under the terms of the GNU General Public License as
--  published by the Free Software Foundation; either version 3, or (at
--  your option) any later version.
--
--  This software is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
%%
Character_Literal_Count     : Integer := 0;
Bad_Character_Literal_Count : Integer := 0;
String_Literal_Count        : Integer := 0;
%}

;; wisi-generate requires some keywords
%keyword FOO "foo"

%token <line_comment> COMMENT "\-\-[^\n]*\n"
%token <punctuation> SEMICOLON ";"
%token <punctuation> TICK "'"
%token <punctuation> LEFT_PAREN "("
%token <punctuation> RIGHT_PAREN ")"
%token <whitespace> WHITESPACE "[ \t\n]"
%token <symbol> IDENTIFIER "[a-zA-Z][0-9a-zA-Z_]*"

%token <punctuation> CHARACTER_LITERAL '[^']'|''''
%token <string-double> STRING_LITERAL "\"[^\"]*\""

%start compilation_unit
%first_state_index 1
%first_parser_label 1
%parser_algorithm LR1
%output_language Ada
%lexer Aflex

%%

compilation_unit
  : FOO statement_list
  ;

statement_list
  : statement
  | statement_list statement
  ;

;; For CHARACTER_LITERAL and TICK, the input consists of variations of:
;;
;; Character'('C');
;;
;; with whitespace in different places. That should match this rule
statement
  : IDENTIFIER TICK LEFT_PAREN CHARACTER_LITERAL RIGHT_PAREN SEMICOLON ;; "correct"
   (Character_Literal_Count := Character_Literal_Count + 1;)

;; FIXME: some of them actually match this rule:
  | IDENTIFIER CHARACTER_LITERAL IDENTIFIER TICK RIGHT_PAREN SEMICOLON ;; "wrong"
   (Bad_Character_Literal_Count := Bad_Character_Literal_Count + 1;)

;; Here the input is Ada strings, with and without embedded quotes.
  | STRING_LITERAL
   (String_Literal_Count := String_Literal_Count + 1;)
  ;
%%

;;; end of file
