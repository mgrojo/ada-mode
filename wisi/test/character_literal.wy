;; Test regular expressions vs Ada tick, character literal, string,
;; demonstrating a problem with regular expression lexers, fixed by
;; re2c lookahead.

%{
--  Copyright (C) 2013, 2015, 2017 Stephen Leake.  All Rights Reserved.
--
--  This program is free software; you can redistribute it and/or
--  modify it under the terms of the GNU General Public License as
--  published by the Free Software Foundation; either version 3, or (at
--  your option) any later version.
--
--  This software is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
%%
Character_Literal_Count     : Integer := 0;
Bad_Character_Literal_Count : Integer := 0;
String_Literal_Count        : Integer := 0;
%}

;; wisi-generate requires some keywords
%keyword FOO "foo"

%token <line_comment> COMMENT "--"[^\n]*[\n]
%token <punctuation> SEMICOLON ";"

;; re2c lookahead regular expression; this is not a character literal.
;; re2c does not allow combining | with /, so we need three tokens for
;; this (sigh).
;;
;; In this simple grammar, we could take advantage of the fact that
;; TICK is always followed by LEFT_PAREN, but we want to find a
;; solution that works for full Ada, where that is not true. All of
;; the ambiguous cases for full Ada are given in
;; character_literal.input; this set of regexps sorts them out.
%token <punctuation> TICK_1 "'"
%token <punctuation> TICK_2 "'" / "('"[\x20-\x26\x28-\U0010FFFF]"')"
%token <punctuation> TICK_3 "'" / "('''')"

%token <punctuation> LEFT_PAREN "("
%token <punctuation> RIGHT_PAREN ")"

%token <punctuation> CHARACTER_LITERAL ("'"[\x20-\x26\x28-\U0010FFFF]"'")|("''''")

%token <whitespace> WHITESPACE [ \t\n]

;; full Unicode range, starting with non-control, non-digit
%token <symbol> IDENTIFIER [a-zA-Z\x80-\U0010FFFF][0-9a-zA-Z_\x80-\U0010FFFF]+

%token <string-double> STRING_LITERAL (["][\x20-\U0010FFFF]*["])+

%start compilation_unit
%first_state_index 1
%first_parser_label 1
%parser_algorithm LR1
%output_language Ada
%lexer re2c

%%

compilation_unit
  : FOO statement_list
  ;

statement_list
  : statement
  | statement_list statement
  ;

;; For CHARACTER_LITERAL and TICK, the input consists of variations of:
;;
;; Character'('C');
;;
;; with whitespace in different places. That should match this rule, a
;; qualified expression.
;;
;; Action spans two lines to test wisi-rules.adb
statement
  : IDENTIFIER tick LEFT_PAREN CHARACTER_LITERAL RIGHT_PAREN SEMICOLON
   (Character_Literal_Count :=
     Character_Literal_Count + 1;)

 ;; A different use of TICK; attribute reference
  | IDENTIFIER tick IDENTIFIER SEMICOLON

 ;; Here the input is Ada strings, with and without embedded quotes.
  | STRING_LITERAL SEMICOLON
   (String_Literal_Count := String_Literal_Count + 1;)
  ;

tick
  : TICK_1
  | TICK_2
  | TICK_3
  ;
%%

;;; end of file
