;;; body_instantiation_conflict-lalr-elisp.el --- Generated parser support file  -*- lexical-binding:t -*-
;;  command line: wisi-generate.exe  --generate LALR ELISP ../wisi/test/body_instantiation_conflict.wy

;;  Copyright (C) 2013, 2017, 2018 Stephen Leake.  All Rights Reserved.

;;  This program is free software; you can redistribute it and/or
;;  modify it under the terms of the GNU General Public License as
;;  published by the Free Software Foundation; either version 3, or (at
;;  your option) any later version.
;;
;;  This software is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;  General Public License for more details.
;;
;;  You should have received a copy of the GNU General Public License
;;  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

(require 'wisi)
(require 'wisi-compile)
(require 'wisi-elisp-parse)

(defconst body_instantiation_conflict-lalr-elisp-keyword-table-raw
  '(
   ("begin" . BEGIN)
   ("end" . END)
   ("is" . IS)
   ("(" . LEFT_PAREN)
   ("new" . NEW)
   ("null" . NULL)
   ("procedure" . PROCEDURE)
   (")" . RIGHT_PAREN)
   ))

(defconst body_instantiation_conflict-lalr-elisp-token-table-raw
  '(
   ("punctuation"
    (SEMICOLON . ";")
    )
   ("symbol"
    (IDENTIFIER . "")
    )
   ))

(defconst body_instantiation_conflict-lalr-elisp-parse-table
   (wisi-compile-grammar
   '(((compilation_unit
       ((library_item library_item )))
      (library_item
       ((subprogram_body ))
       ((generic_instantiation )))
      (subprogram_body
       ((subprogram_specification IS BEGIN NULL END SEMICOLON )))
      (subprogram_specification
       ((PROCEDURE IDENTIFIER parameter_list )))
      (parameter_list
       ((LEFT_PAREN IDENTIFIER RIGHT_PAREN ))
       (()))
      (generic_instantiation
       ((PROCEDURE IDENTIFIER IS NEW IDENTIFIER LEFT_PAREN IDENTIFIER RIGHT_PAREN SEMICOLON ))))
     [((default . error) (PROCEDURE .  1))
      ((default . error) (IDENTIFIER .  9))
      ((default . error) (Wisi_EOI . accept))
      ((default . error) (PROCEDURE .  1))
      ((default . error) (PROCEDURE . (library_item . 0)) (Wisi_EOI . (library_item . 0)))
      ((default . error) (IS .  7))
      ((default . error) (PROCEDURE . (library_item . 1)) (Wisi_EOI . (library_item . 1)))
      ((default . error) (BEGIN .  13))
      ((default . error) (Wisi_EOI . (compilation_unit . 0)))
      ((default . error) (IS . ( 10 (parameter_list . 1))) (LEFT_PAREN .  11))
      ((default . error) (NEW .  16))
      ((default . error) (IDENTIFIER .  15))
      ((default . error) (IS . (subprogram_specification . 0)))
      ((default . error) (NULL .  14))
      ((default . error) (END .  19))
      ((default . error) (RIGHT_PAREN .  18))
      ((default . error) (IDENTIFIER .  17))
      ((default . error) (LEFT_PAREN .  21))
      ((default . error) (IS . (parameter_list . 0)))
      ((default . error) (SEMICOLON .  20))
      ((default . error) (PROCEDURE . (subprogram_body . 0)) (Wisi_EOI . (subprogram_body . 0)))
      ((default . error) (IDENTIFIER .  22))
      ((default . error) (RIGHT_PAREN .  23))
      ((default . error) (SEMICOLON .  24))
      ((default . error) (PROCEDURE . (generic_instantiation . 0)) (Wisi_EOI . (generic_instantiation . 0)))]
     [((compilation_unit . 2)(library_item . 3)(subprogram_body . 4)(subprogram_specification . 5)(generic_instantiation . 6))
      nil
      nil
      ((library_item . 8)(subprogram_body . 4)(subprogram_specification . 5)(generic_instantiation . 6))
      nil
      nil
      nil
      nil
      nil
      ((parameter_list . 12))
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil]))
  "Parser table.")

(provide 'body_instantiation_conflict-lalr-elisp)
;; end of file
