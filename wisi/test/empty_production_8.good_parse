LALR_Parser parse:
 1: 1: (IDENTIFIER, (1 . 7)) : shift and goto state 2
 1: 2: (SEMICOLON, (8 . 8)) : reduce 0 tokens to aliased_opt
aliased_opt_0: (aliased_opt) <= ()
 ... goto state 8
 1: 8: (SEMICOLON, (8 . 8)) : reduce 0 tokens to constant_opt
constant_opt_0: (constant_opt) <= ()
 ... goto state 11
 1: 11: (SEMICOLON, (8 . 8)) : shift and goto state 12
 1: 12: (IDENTIFIER, (10 . 16)) : reduce 4 tokens to object_declaration
object_declaration_0: (object_declaration, (1 . 8)) <= ((IDENTIFIER, (1 . 7)), (aliased_opt), (constant_opt), (SEMICOLON, (8 . 8)))
 ... goto state 4
 1: 4: (IDENTIFIER, (10 . 16)) : reduce 1 tokens to object_declaration_list
object_declaration_list_0: (object_declaration_list, (1 . 8)) <= ((object_declaration, (1 . 8)))
 ... goto state 3
 1: 3: (IDENTIFIER, (10 . 16)) : shift and goto state 2
spawn parser from 1 (2 active)
 2: 2: (CONSTANT, (18 . 25)) : reduce 0 tokens to aliased_opt
aliased_opt_0: (aliased_opt) <= ()
 ... goto state 8
 1: 2: (CONSTANT, (18 . 25)) : shift and goto state 7
 2: 8: (CONSTANT, (18 . 25)) : shift and goto state 7
 2: 7: (SEMICOLON, (26 . 26)) : reduce 1 tokens to constant_opt
constant_opt_1: (constant_opt, (18 . 25)) <= ((CONSTANT, (18 . 25)))
 ... goto state 11
 1: 7: (SEMICOLON, (26 . 26)) : reduce 1 tokens to constant_opt
constant_opt_1: (constant_opt, (18 . 25)) <= ((CONSTANT, (18 . 25)))
 ... goto state 9
 2: 11: (SEMICOLON, (26 . 26)) : shift and goto state 12
 1: 9: (SEMICOLON, (26 . 26)) : ERROR
 1: expecting: COLON_EQUAL
 1: zombie
 2: 12: (IDENTIFIER, (28 . 34)) : reduce 4 tokens to object_declaration
object_declaration_0: (object_declaration, (10 . 26)) <= ((IDENTIFIER, (10 . 16)), (aliased_opt), (constant_opt, (18 . 25)), (SEMICOLON, (26 . 26)))
 ... goto state 5
 1: terminate (1 active)
 2: 5: (IDENTIFIER, (28 . 34)) : reduce 2 tokens to object_declaration_list
object_declaration_list_1: (object_declaration_list, (1 . 26)) <= ((object_declaration_list, (1 . 8)), (object_declaration, (10 . 26)))
 ... goto state 3
 2: 3: (IDENTIFIER, (28 . 34)) : shift and goto state 2
 2: 2: (ALIASED, (36 . 42)) : shift and goto state 6
 2: 6: (SEMICOLON, (43 . 43)) : reduce 1 tokens to aliased_opt
aliased_opt_1: (aliased_opt, (36 . 42)) <= ((ALIASED, (36 . 42)))
 ... goto state 8
 2: 8: (SEMICOLON, (43 . 43)) : reduce 0 tokens to constant_opt
constant_opt_0: (constant_opt) <= ()
 ... goto state 11
 2: 11: (SEMICOLON, (43 . 43)) : shift and goto state 12
 2: 12: (IDENTIFIER, (45 . 51)) : reduce 4 tokens to object_declaration
object_declaration_0: (object_declaration, (28 . 43)) <= ((IDENTIFIER, (28 . 34)), (aliased_opt, (36 . 42)), (constant_opt), (SEMICOLON, (43 . 43)))
 ... goto state 5
 2: 5: (IDENTIFIER, (45 . 51)) : reduce 2 tokens to object_declaration_list
object_declaration_list_1: (object_declaration_list, (1 . 43)) <= ((object_declaration_list, (1 . 26)), (object_declaration, (28 . 43)))
 ... goto state 3
 2: 3: (IDENTIFIER, (45 . 51)) : shift and goto state 2
 2: 2: (ALIASED, (53 . 59)) : shift and goto state 6
 2: 6: (CONSTANT, (61 . 68)) : reduce 1 tokens to aliased_opt
aliased_opt_1: (aliased_opt, (53 . 59)) <= ((ALIASED, (53 . 59)))
 ... goto state 8
 2: 8: (CONSTANT, (61 . 68)) : shift and goto state 7
 2: 7: (SEMICOLON, (69 . 69)) : reduce 1 tokens to constant_opt
constant_opt_1: (constant_opt, (61 . 68)) <= ((CONSTANT, (61 . 68)))
 ... goto state 11
 2: 11: (SEMICOLON, (69 . 69)) : shift and goto state 12
 2: 12: (IDENTIFIER, (71 . 77)) : reduce 4 tokens to object_declaration
object_declaration_0: (object_declaration, (45 . 69)) <= ((IDENTIFIER, (45 . 51)), (aliased_opt, (53 . 59)), (constant_opt, (61 . 68)), (SEMICOLON, (69 . 69)))
 ... goto state 5
 2: 5: (IDENTIFIER, (71 . 77)) : reduce 2 tokens to object_declaration_list
object_declaration_list_1: (object_declaration_list, (1 . 69)) <= ((object_declaration_list, (1 . 43)), (object_declaration, (45 . 69)))
 ... goto state 3
 2: 3: (IDENTIFIER, (71 . 77)) : shift and goto state 2
 2: 2: (COLON_EQUAL, (79 . 80)) : reduce 0 tokens to constant_opt
constant_opt_0: (constant_opt) <= ()
 ... goto state 9
 2: 9: (COLON_EQUAL, (79 . 80)) : shift and goto state 10
 2: 10: (SEMICOLON, (82 . 82)) : shift and goto state 13
 2: 13: (IDENTIFIER, (84 . 90)) : reduce 4 tokens to object_declaration
object_declaration_1: (object_declaration, (71 . 82)) <= ((IDENTIFIER, (71 . 77)), (constant_opt), (COLON_EQUAL, (79 . 80)), (SEMICOLON, (82 . 82)))
 ... goto state 5
 2: 5: (IDENTIFIER, (84 . 90)) : reduce 2 tokens to object_declaration_list
object_declaration_list_1: (object_declaration_list, (1 . 82)) <= ((object_declaration_list, (1 . 69)), (object_declaration, (71 . 82)))
 ... goto state 3
 2: 3: (IDENTIFIER, (84 . 90)) : shift and goto state 2
spawn parser from 2 (2 active)
 3: 2: (CONSTANT, (92 . 99)) : reduce 0 tokens to aliased_opt
aliased_opt_0: (aliased_opt) <= ()
 ... goto state 8
 2: 2: (CONSTANT, (92 . 99)) : shift and goto state 7
 3: 8: (CONSTANT, (92 . 99)) : shift and goto state 7
 3: 7: (COLON_EQUAL, (101 . 102)) : reduce 1 tokens to constant_opt
constant_opt_1: (constant_opt, (92 . 99)) <= ((CONSTANT, (92 . 99)))
 ... goto state 11
 2: 7: (COLON_EQUAL, (101 . 102)) : reduce 1 tokens to constant_opt
constant_opt_1: (constant_opt, (92 . 99)) <= ((CONSTANT, (92 . 99)))
 ... goto state 9
 3: 11: (COLON_EQUAL, (101 . 102)) : ERROR
 3: expecting: SEMICOLON
 3: zombie
 2: 9: (COLON_EQUAL, (101 . 102)) : shift and goto state 10
 3: terminate (1 active)
 2: 10: (SEMICOLON, (104 . 104)) : shift and goto state 13
 2: 13: (Wisi_EOI, (106 . 105)) : reduce 4 tokens to object_declaration
object_declaration_1: (object_declaration, (84 . 104)) <= ((IDENTIFIER, (84 . 90)), (constant_opt, (92 . 99)), (COLON_EQUAL, (101 . 102)), (SEMICOLON, (104 . 104)))
 ... goto state 5
 2: 5: (Wisi_EOI, (106 . 105)) : reduce 2 tokens to object_declaration_list
object_declaration_list_1: (object_declaration_list, (1 . 104)) <= ((object_declaration_list, (1 . 82)), (object_declaration, (84 . 104)))
 ... goto state 3
 2: 3: (Wisi_EOI, (106 . 105)) : accept it
wisitoken_accept_0: (wisitoken_accept, (1 . 104)) <= ((object_declaration_list, (1 . 104)))
 2: succeed
