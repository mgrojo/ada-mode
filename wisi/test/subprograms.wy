;; Grammar has no conflicts; test wisi cache actions in Emacs
;; (ediff "subprograms.wy" "../../../org.wisitoken.stephe-1/wisi/test/subprograms.wy")

%{
;;  Copyright (C) 2013, 2017 Stephen Leake.  All Rights Reserved.

;;  This program is free software; you can redistribute it and/or
;;  modify it under the terms of the GNU General Public License as
;;  published by the Free Software Foundation; either version 3, or (at
;;  your option) any later version.
;;
;;  This software is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;  General Public License for more details.
;;
;;  You should have received a copy of the GNU General Public License
;;  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
%}

%keyword BEGIN "begin"
%keyword END "end"
%keyword EXCEPTION "exception"
%keyword FOR "for"
%keyword FUNCTION "function"
%keyword IN "in"
%keyword LOOP "loop"
%keyword PROCEDURE "procedure"
%keyword WHEN "when"
%keyword USE "use"

%token <left-paren> LEFT_PAREN "("
%token <right-paren> RIGHT_PAREN ")"

%token <punctuation> COMMA ","
%token <punctuation> DOT "."
%token <punctuation> SEMICOLON ";"

%token <symbol> SYMBOL [a-zA-Z][0-9a-zA-Z_]*

%non_grammar <non-reporting> WHITESPACE [ \t]
%non_grammar <new-line> NEW_LINE [\n]
%non_grammar <comment> COMMENT "--"[^\n]*

%start compilation_unit
%parser_algorithm LALR
%output_language Ada_Emacs
%lexer Elisp

;; elisp names in face actions
%elisp_face font-lock-keyword-face
%elisp_face font-lock-type-face
%elisp_face font-lock-function-name-face
%elisp_face nil

;; language-specific elisp names in indent actions
%elisp_indent subp-indent-function Function_1

%%

block
  : BEGIN END
  | BEGIN loop_statement EXCEPTION WHEN name END
    (progn
      (wisi-statement-action [3 motion 4 motion])
      (wisi-indent-action [0 subp-indent 0 subp-indent 0 0]))
;

compilation_unit
  : declarations
  ;

declarations
  : declaration
  | declarations declaration
  ;

declaration
  : subprogram
  | use_clause
  ;

loop_statement
  : FOR SYMBOL IN subtype LOOP SEMICOLON
    (progn
      (wisi-face-remove-action [4])
      (wisi-indent-action [(- subp-indent) 0 (- subp-indent subp-indent-broken) subp-indent 0 0]))
  ;

name
  : SYMBOL
    (wisi-face-mark-action [1 suffix])
    (wisi-propagate-name 1)
  | name DOT SYMBOL
    (wisi-face-mark-action [1 prefix 3 suffix])
    (wisi-merge-names 1 3)
  ;

name_list
  : name
  | name_list COMMA name
  ;

;; not on one line, empty production with comment
parameter_list
  : LEFT_PAREN RIGHT_PAREN ;; c-like no parameters
    (wisi-statement-action [1 misc 2 misc]) ;; single action; no progn
  | ;; ada-like no parameters
  | LEFT_PAREN SYMBOL RIGHT_PAREN
    (progn
      (wisi-statement-action [2 misc]) ;; single pair
      (wisi-indent-action [0 (wisi-anchored 1 1) (wisi-anchored 1 0)]))
  ;

subprogram
  : FUNCTION name parameter_list block SEMICOLON
    (progn
      ;; an example of each supported action, with somewhat complex parameter syntax
      (wisi-statement-action [1 statement-start 2 name 3 misc 4 motion 5 statement-end])
      (wisi-containing-action 1 2)
      (wisi-containing-action 1 4)
      (wisi-motion-action [1 [4 EXCEPTION WHEN] 5])
      (wisi-face-apply-action [1 nil font-lock-keyword-face 2 font-lock-type-face font-lock-function-name-face])
      (wisi-indent-action [0 [subp-indent-broken subp-indent-broken]
                             (subp-indent-function (* 2 subp-indent-broken))
                             0 0])) ;; single action on multiple lines
  | PROCEDURE name parameter_list END name SEMICOLON
    (progn
      (wisi-statement-action [1 statement-start 2 name 6 statement-end])
      (wisi-containing-action 1 2)
      (wisi-face-apply-action [1 nil font-lock-keyword-face 2 font-lock-type-face font-lock-function-name-face])
      (wisi-indent-action [0 subp-indent-broken subp-indent-broken 0 0 0]))
    (wisi-match-names 2 5 nil)
 ;; We don't have procedures nested in another named statement, so we
 ;; can't test that 'wisi-match-names' actually helps here (note that
 ;; there are no McKenzie parameters defined). But this serves to test
 ;; that wisi-output_ada_emacs generates check source code properly.
  ;

subtype
  : name
    (wisi-face-apply-action [1 font-lock-type-face font-lock-function-name-face])
  ;

use_clause
  : USE name_list SEMICOLON
    (progn
      (wisi-face-apply-list-action [2 font-lock-type-face font-lock-function-name-face])
      (wisi-indent-action [0 subp-indent-broken 0]))
  ;
%%
;; end of file
