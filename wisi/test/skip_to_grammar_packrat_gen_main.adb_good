--  generated parser support file.
--  command line: wisi-generate.exe  --generate PACKRAT_GEN ADA ../../wisi/test/skip_to_grammar.wy
--

with WisiToken.Lexer.re2c;
with skip_to_grammar_re2c_c;
with Skip_To_Grammar_Actions; use Skip_To_Grammar_Actions;
with WisiToken.Parse.Packrat.Generated;
package body Skip_To_Grammar_Packrat_Gen_Main is

   package Lexer is new WisiToken.Lexer.re2c
     (skip_to_grammar_re2c_c.New_Lexer,
      skip_to_grammar_re2c_c.Free_Lexer,
      skip_to_grammar_re2c_c.Reset_Lexer,
      skip_to_grammar_re2c_c.Next_Token);

   use WisiToken;
   use WisiToken.Parse.Packrat;
   use WisiToken.Parse.Packrat.Generated;
   function Parse_wisitoken_accept
     (Parser : in out Generated.Parser; Last_Pos : in Base_Token_Index) return Result_Type;
   function Parse_declaration
     (Parser : in out Generated.Parser; Last_Pos : in Base_Token_Index) return Result_Type;
   function Parse_declaration_item_list
     (Parser : in out Generated.Parser; Last_Pos : in Base_Token_Index) return Result_Type;
   function Parse_declaration_item
     (Parser : in out Generated.Parser; Last_Pos : in Base_Token_Index) return Result_Type;
   function Parse_compilation_unit
     (Parser : in out Generated.Parser; Last_Pos : in Base_Token_Index) return Result_Type;
   function Parse_compilation_unit_list
     (Parser : in out Generated.Parser; Last_Pos : in Base_Token_Index) return Result_Type;

   function Parse_wisitoken_accept
     (Parser : in out Generated.Parser; Last_Pos : in Base_Token_Index) return Result_Type
   is
      Descriptor : WisiToken.Descriptor renames Parser.Trace.Descriptor.all;
      Start_Pos  : constant Token_Index := Last_Pos + 1; --  first token in current nonterm
      Pos        : Base_Token_Index := Last_Pos; --  last token parsed.
      Memo_0_1 : Memo_Entry;
      Pos_0_2  : Token_Index;
   begin
      if Pos = Parser.Terminals.Last_Index then
         return (State => Failure);
      end if;
      declare
         Memo : Memo_Entry renames Parser.Derivs (7)(Start_Pos);
      begin
         case Memo.State is
         when Success =>
            return Parser.Derivs (7)(Start_Pos);
         when Failure =>
            goto RHS_0_Fail;
         when No_Result =>
            if Memo.Recursive then
               raise Recursive with Image (7, Descriptor) & Token_Index'Image (Start_Pos) & ": recursive";
            end if;
            Memo.Recursive := True;
         end case;
      end;

      --  7.0: wisitoken_accept <= compilation_unit_list Wisi_EOI
      Pos := Last_Pos;
      Memo_0_1 := Parse_compilation_unit_list (Parser, Pos);
      case Result_States'(Memo_0_1.State) is
      when Success =>
         Pos := Memo_0_1.Last_Token;
      when Failure =>
         goto RHS_0_Fail;
      end case;
      if Parser.Terminals (Pos + 1).ID = 6 then
         Pos := Pos + 1;
         Pos_0_2 := Pos;
         Parser.Derivs (7).Replace_Element
           (Start_Pos,
            (State              => Success,
             Result             => Parser.Tree.Add_Nonterm
               (Production      => (7, 0),
                Action          => null,
                Children        =>
                 (Memo_0_1.Result,
                  Tree_Index (Pos_0_2)),
                Default_Virtual => False),
             Last_Token      => Pos));
         goto Succeed;
      else
         goto RHS_0_Fail;
      end if;
      <<RHS_0_Fail>>

      Parser.Derivs (7).Replace_Element (Start_Pos, (State => Failure));
      return Parser.Derivs (7)(Start_Pos);

      <<Succeed>>
      if WisiToken.Trace_Parse > Detail then
         Parser.Trace.Put_Line
           (Parser.Tree.Image
             (Parser.Derivs (7)(Start_Pos).Result, Descriptor, Include_Children => True));
      end if;
      return Parser.Derivs (7)(Start_Pos);
   end Parse_wisitoken_accept;

   function Parse_declaration
     (Parser : in out Generated.Parser; Last_Pos : in Base_Token_Index) return Result_Type
   is
      Descriptor : WisiToken.Descriptor renames Parser.Trace.Descriptor.all;
      Start_Pos  : constant Token_Index := Last_Pos + 1; --  first token in current nonterm
      Pos        : Base_Token_Index := Last_Pos; --  last token parsed.
      Pos_0_1  : Token_Index;
      Pos_0_2  : Token_Index;
      Memo_0_3 : Memo_Entry;
   begin
      if Pos = Parser.Terminals.Last_Index then
         return (State => Failure);
      end if;
      declare
         Memo : Memo_Entry renames Parser.Derivs (8)(Start_Pos);
      begin
         case Memo.State is
         when Success =>
            return Parser.Derivs (8)(Start_Pos);
         when Failure =>
            goto RHS_0_Fail;
         when No_Result =>
            if Memo.Recursive then
               raise Recursive with Image (8, Descriptor) & Token_Index'Image (Start_Pos) & ": recursive";
            end if;
            Memo.Recursive := True;
         end case;
      end;

      --  8.0: declaration <= PERCENT IDENTIFIER declaration_item_list
      Pos := Last_Pos;
      if Parser.Terminals (Pos + 1).ID = 3 then
         Pos := Pos + 1;
         Pos_0_1 := Pos;
      else
         goto RHS_0_Fail;
      end if;
      if Parser.Terminals (Pos + 1).ID = 5 then
         Pos := Pos + 1;
         Pos_0_2 := Pos;
      else
         goto RHS_0_Fail;
      end if;
      Memo_0_3 := Parse_declaration_item_list (Parser, Pos);
      case Result_States'(Memo_0_3.State) is
      when Success =>
         Pos := Memo_0_3.Last_Token;
         Parser.Derivs (8).Replace_Element
           (Start_Pos,
            (State              => Success,
             Result             => Parser.Tree.Add_Nonterm
               (Production      => (8, 0),
                Action          => declaration_0'Access,
                Children        =>
                 (Tree_Index (Pos_0_1),
                  Tree_Index (Pos_0_2),
                  Memo_0_3.Result),
                Default_Virtual => False),
             Last_Token      => Pos));
         goto Succeed;
      when Failure =>
         goto RHS_0_Fail;
      end case;
      <<RHS_0_Fail>>

      Parser.Derivs (8).Replace_Element (Start_Pos, (State => Failure));
      return Parser.Derivs (8)(Start_Pos);

      <<Succeed>>
      if WisiToken.Trace_Parse > Detail then
         Parser.Trace.Put_Line
           (Parser.Tree.Image
             (Parser.Derivs (8)(Start_Pos).Result, Descriptor, Include_Children => True));
      end if;
      return Parser.Derivs (8)(Start_Pos);
   end Parse_declaration;

   function Parse_declaration_item_list
     (Parser : in out Generated.Parser; Last_Pos : in Base_Token_Index) return Result_Type
   is
      Descriptor : WisiToken.Descriptor renames Parser.Trace.Descriptor.all;
      Start_Pos  : constant Token_Index := Last_Pos + 1; --  first token in current nonterm
      Pos        : Base_Token_Index := Last_Pos; --  last token parsed.
      Memo_0_1 : Memo_Entry;
      Memo_0_2 : Memo_Entry;
      Memo_1_1 : Memo_Entry;
      Pos_Recurse_Last : Base_Token_Index := Last_Pos;
      Result_Recurse   : Memo_Entry;
   begin
      if Pos = Parser.Terminals.Last_Index then
         return (State => Failure);
      end if;
      declare
         Memo : Memo_Entry renames Parser.Derivs (9)(Start_Pos);
      begin
         case Memo.State is
         when Success =>
            return Parser.Derivs (9)(Start_Pos);
         when Failure =>
            goto RHS_1_Fail;
         when No_Result =>
            if Memo.Recursive then
               raise Recursive with Image (9, Descriptor) & Token_Index'Image (Start_Pos) & ": recursive";
            end if;
            Memo.Recursive := True;
         end case;
      end;

      Parser.Derivs (9).Replace_Element (Start_Pos, (State => Failure));
      <<Recurse_Start>>
      --  9.0: declaration_item_list <= declaration_item_list declaration_item
      Pos := Last_Pos;
      Memo_0_1 := Parse_declaration_item_list (Parser, Pos);
      case Result_States'(Memo_0_1.State) is
      when Success =>
         Pos := Memo_0_1.Last_Token;
      when Failure =>
         goto RHS_0_Fail;
      end case;
      Memo_0_2 := Parse_declaration_item (Parser, Pos);
      case Result_States'(Memo_0_2.State) is
      when Success =>
         Pos := Memo_0_2.Last_Token;
         Result_Recurse :=
           (State              => Success,
            Result             => Parser.Tree.Add_Nonterm
              (Production      => (9, 0),
               Action          => null,
               Children        =>
                (Memo_0_1.Result,
                 Memo_0_2.Result),
               Default_Virtual => False),
            Last_Token      => Pos);
         goto Finish;
      when Failure =>
         goto RHS_0_Fail;
      end case;
      <<RHS_0_Fail>>

      --  9.1: declaration_item_list <= declaration_item
      Pos := Last_Pos;
      Memo_1_1 := Parse_declaration_item (Parser, Pos);
      case Result_States'(Memo_1_1.State) is
      when Success =>
         Pos := Memo_1_1.Last_Token;
         Result_Recurse :=
           (State              => Success,
            Result             => Parser.Tree.Add_Nonterm
              (Production      => (9, 1),
               Action          => null,
               Children        => (1 => Memo_1_1.Result),
               Default_Virtual => False),
            Last_Token      => Pos);
         goto Finish;
      when Failure =>
         goto RHS_1_Fail;
      end case;
      <<RHS_1_Fail>>

      Result_Recurse := (State => Failure);
      <<Finish>>
      if Result_Recurse.State = Success then
         if Pos > Pos_Recurse_Last then
            Parser.Derivs (9).Replace_Element (Start_Pos, Result_Recurse);
            Pos_Recurse_Last := Pos;
            if WisiToken.Trace_Parse > Detail then
               Parser.Trace.Put_Line
                 (Parser.Tree.Image (Result_Recurse.Result, Descriptor, Include_Children => True));
            end if;
            goto Recurse_Start;
         elsif Pos = Pos_Recurse_Last and then Parser.Tree.Is_Empty (Result_Recurse.Result) then
                        Parser.Derivs (8).Replace_Element (Start_Pos, Result_Recurse);
         end if;
      end if;

      return Parser.Derivs (9)(Start_Pos);
   end Parse_declaration_item_list;

   function Parse_declaration_item
     (Parser : in out Generated.Parser; Last_Pos : in Base_Token_Index) return Result_Type
   is
      Descriptor : WisiToken.Descriptor renames Parser.Trace.Descriptor.all;
      Start_Pos  : constant Token_Index := Last_Pos + 1; --  first token in current nonterm
      Pos        : Base_Token_Index := Last_Pos; --  last token parsed.
      Pos_0_1  : Token_Index;
   begin
      if Pos = Parser.Terminals.Last_Index then
         return (State => Failure);
      end if;
      declare
         Memo : Memo_Entry renames Parser.Derivs (10)(Start_Pos);
      begin
         case Memo.State is
         when Success =>
            return Parser.Derivs (10)(Start_Pos);
         when Failure =>
            goto RHS_0_Fail;
         when No_Result =>
            if Memo.Recursive then
               raise Recursive with Image (10, Descriptor) & Token_Index'Image (Start_Pos) & ": recursive";
            end if;
            Memo.Recursive := True;
         end case;
      end;

      --  10.0: declaration_item <= IDENTIFIER
      Pos := Last_Pos;
      if Parser.Terminals (Pos + 1).ID = 5 then
         Pos := Pos + 1;
         Pos_0_1 := Pos;
         Parser.Derivs (10).Replace_Element
           (Start_Pos,
            (State              => Success,
             Result             => Parser.Tree.Add_Nonterm
               (Production      => (10, 0),
                Action          => null,
                Children        => (1 => Tree_Index (Pos_0_1)),
                Default_Virtual => False),
             Last_Token      => Pos));
         goto Succeed;
      else
         goto RHS_0_Fail;
      end if;
      <<RHS_0_Fail>>

      Parser.Derivs (10).Replace_Element (Start_Pos, (State => Failure));
      return Parser.Derivs (10)(Start_Pos);

      <<Succeed>>
      if WisiToken.Trace_Parse > Detail then
         Parser.Trace.Put_Line
           (Parser.Tree.Image
             (Parser.Derivs (10)(Start_Pos).Result, Descriptor, Include_Children => True));
      end if;
      return Parser.Derivs (10)(Start_Pos);
   end Parse_declaration_item;

   function Parse_compilation_unit
     (Parser : in out Generated.Parser; Last_Pos : in Base_Token_Index) return Result_Type
   is
      Descriptor : WisiToken.Descriptor renames Parser.Trace.Descriptor.all;
      Start_Pos  : constant Token_Index := Last_Pos + 1; --  first token in current nonterm
      Pos        : Base_Token_Index := Last_Pos; --  last token parsed.
      Pos_0_1  : Token_Index;
      Memo_1_1 : Memo_Entry;
   begin
      if Pos = Parser.Terminals.Last_Index then
         return (State => Failure);
      end if;
      declare
         Memo : Memo_Entry renames Parser.Derivs (11)(Start_Pos);
      begin
         case Memo.State is
         when Success =>
            return Parser.Derivs (11)(Start_Pos);
         when Failure =>
            goto RHS_1_Fail;
         when No_Result =>
            if Memo.Recursive then
               raise Recursive with Image (11, Descriptor) & Token_Index'Image (Start_Pos) & ": recursive";
            end if;
            Memo.Recursive := True;
         end case;
      end;

      --  11.0: compilation_unit <= PREAMBLE
      Pos := Last_Pos;
      if Parser.Terminals (Pos + 1).ID = 4 then
         Pos := Pos + 1;
         Pos_0_1 := Pos;
         Parser.Derivs (11).Replace_Element
           (Start_Pos,
            (State              => Success,
             Result             => Parser.Tree.Add_Nonterm
               (Production      => (11, 0),
                Action          => null,
                Children        => (1 => Tree_Index (Pos_0_1)),
                Default_Virtual => False),
             Last_Token      => Pos));
         goto Succeed;
      else
         goto RHS_0_Fail;
      end if;
      <<RHS_0_Fail>>

      --  11.1: compilation_unit <= declaration
      Pos := Last_Pos;
      Memo_1_1 := Parse_declaration (Parser, Pos);
      case Result_States'(Memo_1_1.State) is
      when Success =>
         Pos := Memo_1_1.Last_Token;
         Parser.Derivs (11).Replace_Element
           (Start_Pos,
            (State              => Success,
             Result             => Parser.Tree.Add_Nonterm
               (Production      => (11, 1),
                Action          => null,
                Children        => (1 => Memo_1_1.Result),
                Default_Virtual => False),
             Last_Token      => Pos));
         goto Succeed;
      when Failure =>
         goto RHS_1_Fail;
      end case;
      <<RHS_1_Fail>>

      Parser.Derivs (11).Replace_Element (Start_Pos, (State => Failure));
      return Parser.Derivs (11)(Start_Pos);

      <<Succeed>>
      if WisiToken.Trace_Parse > Detail then
         Parser.Trace.Put_Line
           (Parser.Tree.Image
             (Parser.Derivs (11)(Start_Pos).Result, Descriptor, Include_Children => True));
      end if;
      return Parser.Derivs (11)(Start_Pos);
   end Parse_compilation_unit;

   function Parse_compilation_unit_list
     (Parser : in out Generated.Parser; Last_Pos : in Base_Token_Index) return Result_Type
   is
      Descriptor : WisiToken.Descriptor renames Parser.Trace.Descriptor.all;
      Start_Pos  : constant Token_Index := Last_Pos + 1; --  first token in current nonterm
      Pos        : Base_Token_Index := Last_Pos; --  last token parsed.
      Memo_0_1 : Memo_Entry;
      Memo_0_2 : Memo_Entry;
      Memo_1_1 : Memo_Entry;
      Pos_Recurse_Last : Base_Token_Index := Last_Pos;
      Result_Recurse   : Memo_Entry;
   begin
      if Pos = Parser.Terminals.Last_Index then
         return (State => Failure);
      end if;
      declare
         Memo : Memo_Entry renames Parser.Derivs (12)(Start_Pos);
      begin
         case Memo.State is
         when Success =>
            return Parser.Derivs (12)(Start_Pos);
         when Failure =>
            goto RHS_1_Fail;
         when No_Result =>
            if Memo.Recursive then
               raise Recursive with Image (12, Descriptor) & Token_Index'Image (Start_Pos) & ": recursive";
            end if;
            Memo.Recursive := True;
         end case;
      end;

      Parser.Derivs (12).Replace_Element (Start_Pos, (State => Failure));
      <<Recurse_Start>>
      --  12.0: compilation_unit_list <= compilation_unit_list compilation_unit
      Pos := Last_Pos;
      Memo_0_1 := Parse_compilation_unit_list (Parser, Pos);
      case Result_States'(Memo_0_1.State) is
      when Success =>
         Pos := Memo_0_1.Last_Token;
      when Failure =>
         goto RHS_0_Fail;
      end case;
      Memo_0_2 := Parse_compilation_unit (Parser, Pos);
      case Result_States'(Memo_0_2.State) is
      when Success =>
         Pos := Memo_0_2.Last_Token;
         Result_Recurse :=
           (State              => Success,
            Result             => Parser.Tree.Add_Nonterm
              (Production      => (12, 0),
               Action          => null,
               Children        =>
                (Memo_0_1.Result,
                 Memo_0_2.Result),
               Default_Virtual => False),
            Last_Token      => Pos);
         goto Finish;
      when Failure =>
         goto RHS_0_Fail;
      end case;
      <<RHS_0_Fail>>

      --  12.1: compilation_unit_list <= compilation_unit
      Pos := Last_Pos;
      Memo_1_1 := Parse_compilation_unit (Parser, Pos);
      case Result_States'(Memo_1_1.State) is
      when Success =>
         Pos := Memo_1_1.Last_Token;
         Result_Recurse :=
           (State              => Success,
            Result             => Parser.Tree.Add_Nonterm
              (Production      => (12, 1),
               Action          => null,
               Children        => (1 => Memo_1_1.Result),
               Default_Virtual => False),
            Last_Token      => Pos);
         goto Finish;
      when Failure =>
         goto RHS_1_Fail;
      end case;
      <<RHS_1_Fail>>

      Result_Recurse := (State => Failure);
      <<Finish>>
      if Result_Recurse.State = Success then
         if Pos > Pos_Recurse_Last then
            Parser.Derivs (12).Replace_Element (Start_Pos, Result_Recurse);
            Pos_Recurse_Last := Pos;
            if WisiToken.Trace_Parse > Detail then
               Parser.Trace.Put_Line
                 (Parser.Tree.Image (Result_Recurse.Result, Descriptor, Include_Children => True));
            end if;
            goto Recurse_Start;
         elsif Pos = Pos_Recurse_Last and then Parser.Tree.Is_Empty (Result_Recurse.Result) then
                        Parser.Derivs (8).Replace_Element (Start_Pos, Result_Recurse);
         end if;
      end if;

      return Parser.Derivs (12)(Start_Pos);
   end Parse_compilation_unit_list;

   function Parse_wisitoken_accept_1
     (Parser : in out WisiToken.Parse.Base_Parser'Class; Last_Pos : in Base_Token_Index) return Result_Type
   is begin
      return Parse_wisitoken_accept (Generated.Parser (Parser), Last_Pos);
   end Parse_wisitoken_accept_1;

   function Create_Parser
     (Trace     : not null access WisiToken.Trace'Class;
      User_Data : in     WisiToken.Syntax_Trees.User_Data_Access)
     return WisiToken.Parse.Base_Parser'Class
   is begin
      return Parser : WisiToken.Parse.Packrat.Generated.Parser do
         Parser.Trace := Trace;
         Parser.Lexer := Lexer.New_Lexer (Trace);
         Parser.User_Data := User_Data;
         Parser.Parse_WisiToken_Accept := Parse_wisitoken_accept_1'Access;
      end return;
   end Create_Parser;

end Skip_To_Grammar_Packrat_Gen_Main;
