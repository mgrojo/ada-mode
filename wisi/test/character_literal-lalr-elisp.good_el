;;; character_literal-lalr-elisp.el --- Generated parser support file  -*- lexical-binding:t -*-
;;; with command line: wisi-generate.exe --parser_algorithm LALR_LR1 --output_language Elisp --lexer Elisp
;;; ../wisi/test/character_literal.wy

;;  spec context clause

;;  Copyright (C) 2013, 2015, 2017, 2018 Stephen Leake.  All Rights Reserved.
;;
;;  This program is free software; you can redistribute it and/or
;;  modify it under the terms of the GNU General Public License as
;;  published by the Free Software Foundation; either version 3, or (at
;;  your option) any later version.
;;
;;  This software is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;  General Public License for more details.
;;
;;  You should have received a copy of the GNU General Public License
;;  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.


(require 'wisi)
(require 'wisi-compile)
(require 'wisi-elisp-parse)

(defconst character_literal-lalr-elisp-keyword-table-raw
  '(
   ("foo" . FOO)
   ))

(defconst character_literal-lalr-elisp-token-table-raw
  '(
   ("punctuation"
    (SEMICOLON . ";")
    (TICK_1 . "'")
    (LEFT_PAREN . "(")
    (RIGHT_PAREN . ")")
    )
   ("string-single"
    (CHARACTER_LITERAL . "")
    )
   ("symbol"
    (IDENTIFIER . "")
    )
   ("string-double"
    (STRING_LITERAL . "")
    )
   ))

(defconst character_literal-lalr-elisp-parse-table
   (wisi-compile-grammar
   '(((compilation_unit
       ((statement_list )))
      (statement_list
       ((statement )
        (Test_Statement_List_0 (Tree.Augmented_Token_Ref (Tree_Nonterm));))
       ((statement_list statement )))
      (statement
       ((IDENTIFIER tick LEFT_PAREN CHARACTER_LITERAL RIGHT_PAREN SEMICOLON )
        (declare
        Data : Test_Character_Literal_Aux.User_Data renames Test_Character_Literal_Aux.User_Data (User_Data);
        begin
        Data.Character_Literal_Count := Data.Character_Literal_Count + 1;
        Test_Statement_0 (Data, Tree.Augmented_Token_Array (State.Terminals, Tree_Tokens));
        end;))
       ((IDENTIFIER tick IDENTIFIER SEMICOLON )
        (declare
        Data : Test_Character_Literal_Aux.User_Data renames Test_Character_Literal_Aux.User_Data (User_Data);
        Tokens : WisiToken.Semantic_State.Augmented_Token_Array renames Tree.Augmented_Token_Array (State.Terminals, Tree_Tokens);
        begin
        Data.Char_Region := Tokens (3).Char_Region;
        Test_Statement_1 (Tokens);
        end;))
       ((STRING_LITERAL SEMICOLON )
        (declare
        Data : Test_Character_Literal_Aux.User_Data renames Test_Character_Literal_Aux.User_Data (User_Data);
        begin
        Data.String_Literal_Count := Data.String_Literal_Count + 1;
        Test_Statement_2 (Tree.Augmented_Token_Array (State.Terminals, Tree_Tokens));
        end;))
       ((FOO SEMICOLON )))
      (tick
       ((TICK_1 ))))
     [((default . error) (FOO .  2) (IDENTIFIER .  3) (STRING_LITERAL .  4))
      ((default . error) (SEMICOLON .  12))
      ((default . error) (TICK_1 .  10))
      ((default . error) (SEMICOLON .  9))
      ((default . error) (Wisi_EOI . accept))
      ((default . error) (FOO .  2) (IDENTIFIER .  3) (STRING_LITERAL .  4) (Wisi_EOI . (compilation_unit . 0)))
      ((default . error) (FOO . (statement_list . 0)) (IDENTIFIER . (statement_list . 0)) (STRING_LITERAL . (statement_list . 0)) (Wisi_EOI . (statement_list . 0)))
      ((default . error) (FOO . (statement_list . 1)) (IDENTIFIER . (statement_list . 1)) (STRING_LITERAL . (statement_list . 1)) (Wisi_EOI . (statement_list . 1)))
      ((default . error) (FOO . (statement . 2)) (IDENTIFIER . (statement . 2)) (STRING_LITERAL . (statement . 2)) (Wisi_EOI . (statement . 2)))
      ((default . error) (LEFT_PAREN . (tick . 0)) (IDENTIFIER . (tick . 0)))
      ((default . error) (LEFT_PAREN .  13) (IDENTIFIER .  14))
      ((default . error) (FOO . (statement . 3)) (IDENTIFIER . (statement . 3)) (STRING_LITERAL . (statement . 3)) (Wisi_EOI . (statement . 3)))
      ((default . error) (CHARACTER_LITERAL .  16))
      ((default . error) (SEMICOLON .  15))
      ((default . error) (FOO . (statement . 1)) (IDENTIFIER . (statement . 1)) (STRING_LITERAL . (statement . 1)) (Wisi_EOI . (statement . 1)))
      ((default . error) (RIGHT_PAREN .  17))
      ((default . error) (SEMICOLON .  18))
      ((default . error) (FOO . (statement . 0)) (IDENTIFIER . (statement . 0)) (STRING_LITERAL . (statement . 0)) (Wisi_EOI . (statement . 0)))]
     [((compilation_unit . 5)(statement_list . 6)(statement . 7))
      nil
      ((tick . 11))
      nil
      nil
      ((statement . 8))
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil]))
  "Parser table.")

(provide 'character_literal-lalr-elisp)
;; end of file
