--  generated parser support file.
--  command line: wisi-generate.exe -v 1 --output_language Ada_Emacs --lexer re2c --interface process
--  ../wisi/test/subprograms.wy
--

--  Copyright (C) 2013, 2017, 2018 Stephen Leake.  All Rights Reserved.

--  This program is free software; you can redistribute it and/or
--  modify it under the terms of the GNU General Public License as
--  published by the Free Software Foundation; either version 3, or (at
--  your option) any later version.
--
--  This software is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

with Subprograms_Process_Actions; use Subprograms_Process_Actions;
with WisiToken.Lexer.re2c;
with subprograms_re2c_c;
package body Subprograms_Process_Main is

   package Lexer is new WisiToken.Lexer.re2c
     (subprograms_re2c_c.New_Lexer,
      subprograms_re2c_c.Free_Lexer,
      subprograms_re2c_c.Reset_Lexer,
      subprograms_re2c_c.Next_Token);

   procedure Create_Parser
     (Parser                       :    out WisiToken.LR.Parser.Parser;
      Language_Fixes               : in     WisiToken.LR.Parser.Language_Fixes_Access;
      Language_Constrain_Terminals : in     WisiToken.LR.Parser.Language_Constrain_Terminals_Access;
      Language_String_ID_Set       : in     WisiToken.LR.Parser.Language_String_ID_Set_Access;
      Algorithm                    : in     WisiToken.Generator_Algorithm_Type;
      Trace                        : not null access WisiToken.Trace'Class;
      User_Data                    : in     WisiToken.Syntax_Trees.User_Data_Access)
   is
      use WisiToken.LR;
      Table : constant Parse_Table_Ptr := new Parse_Table
        (State_First       => 0,
         State_Last        => 44,
         First_Terminal    => Descriptor.First_Terminal,
         Last_Terminal     => Descriptor.Last_Terminal,
         First_Nonterminal => Descriptor.First_Nonterminal,
         Last_Nonterminal  => Descriptor.Last_Nonterminal);
      pragma Unreferenced (Algorithm);
   begin
      Table.McKenzie_Param :=
        (First_Terminal    => 3,
         Last_Terminal     => 19,
         First_Nonterminal => 20,
         Last_Nonterminal  => 31,
         Insert =>
           (4, 4, 4, 4, 4, 4, 4, 4,
            4, 4, 4, 4, 4, 4, 4, 4,
            4, 4, 4, 4, 4, 4, 4, 4,
            4, 4, 4, 4, 4),
         Delete =>
           (4, 4, 4, 4, 4, 4, 4, 4,
            4, 4, 4, 4, 4, 4, 4, 4,
            4, 8, 8, 8, 8, 8, 8, 8,
            8, 8, 8, 8, 8),
         Push_Back =>
           (2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2),
         Task_Count  => 0,
         Cost_Limit  => 10,
         Check_Limit => 3,
         Check_Delta_Limit => 200,
         Enqueue_Limit => 10000);


      Table.Productions.Set_Length (20);
      Set_Production (Table.Productions (1), 20, (22, 19));
      Set_Production (Table.Productions (2), 21, (3, 4));
      Set_Production (Table.Productions (3), 21, (3, 25, 5, 11, 26, 4));
      Set_Production (Table.Productions (4), 22, (1 => 23));
      Set_Production (Table.Productions (5), 23, (1 => 24));
      Set_Production (Table.Productions (6), 23, (23, 24));
      Set_Production (Table.Productions (7), 24, (1 => 29));
      Set_Production (Table.Productions (8), 24, (1 => 31));
      Set_Production (Table.Productions (9), 25, (6, 18, 8, 30, 9, 17));
      Set_Production (Table.Productions (10), 26, (1 => 18));
      Set_Production (Table.Productions (11), 26, (26, 16, 18));
      Set_Production (Table.Productions (12), 27, (1 => 26));
      Set_Production (Table.Productions (13), 27, (27, 15, 26));
      Set_Production (Table.Productions (14), 28, (13, 14));
      Set_Production (Table.Productions (15), 28, (1 .. 0 => <>));
      Set_Production (Table.Productions (16), 28, (13, 18, 14));
      Set_Production (Table.Productions (17), 29, (7, 26, 28, 21, 17));
      Set_Production (Table.Productions (18), 29, (10, 26, 28, 4, 26, 17));
      Set_Production (Table.Productions (19), 30, (1 => 26));
      Set_Production (Table.Productions (20), 31, (12, 27, 17));

      Table.Minimal_Terminal_Sequences.Set_First (20);
      Table.Minimal_Terminal_Sequences.Set_Last (31);
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (20), (12, 18, 17, 19));
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (21), (3, 4));
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (22), (12, 18, 17));
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (23), (12, 18, 17));
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (24), (12, 18, 17));
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (25), (6, 18, 8, 18, 9, 17));
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (26), (1 => 18));
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (27), (1 => 18));
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (28), (1 .. 0 => <>));
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (29), (10, 18, 4, 18, 17));
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (30), (1 => 18));
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (31), (12, 18, 17));

      Table.States (0).Productions := WisiToken.To_Vector ((1 => 1));
      Add_Action (Table.States (0), (1 => 17), 7, 1);
      Add_Action (Table.States (0), (1 => 18), 10, 2);
      Add_Action (Table.States (0), (1 => 20), 12, 3);
      Add_Error (Table.States (0));
      Add_Goto (Table.States (0), 1, 22, 4);
      Add_Goto (Table.States (0), 4, 23, 5);
      Add_Goto (Table.States (0), 5, 24, 6);
      Add_Goto (Table.States (0), 7, 29, 7);
      Add_Goto (Table.States (0), 8, 31, 8);
      Table.States (1).Productions := WisiToken.To_Vector ((1 => 17));
      Add_Action (Table.States (1), (1 => 10), 18, 10);
      Add_Error (Table.States (1));
      Add_Goto (Table.States (1), 11, 26, 14);
      Table.States (2).Productions := WisiToken.To_Vector ((1 => 18));
      Add_Action (Table.States (2), (1 => 10), 18, 10);
      Add_Error (Table.States (2));
      Add_Goto (Table.States (2), 11, 26, 13);
      Table.States (3).Productions := WisiToken.To_Vector ((1 => 20));
      Add_Action (Table.States (3), (1 => 10), 18, 10);
      Add_Error (Table.States (3));
      Add_Goto (Table.States (3), 11, 26, 11);
      Add_Goto (Table.States (3), 13, 27, 12);
      Table.States (4).Productions := WisiToken.To_Vector ((1 => 1));
      Add_Action (Table.States (4), 19, Accept_It, 1, 20, 1, 0, null, null);
      Add_Error (Table.States (4));
      Table.States (5).Productions := WisiToken.To_Vector ((4, 6));
      Add_Action (Table.States (5), (1 => 17), 7, 1);
      Add_Action (Table.States (5), (1 => 18), 10, 2);
      Add_Action (Table.States (5), (1 => 20), 12, 3);
      Add_Action (Table.States (5), 19, Reduce, 4, 22, 1, 0, null, null);
      Add_Error (Table.States (5));
      Add_Goto (Table.States (5), 6, 24, 9);
      Add_Goto (Table.States (5), 7, 29, 7);
      Add_Goto (Table.States (5), 8, 31, 8);
      Table.States (6).Productions := WisiToken.To_Vector ((1 => 5));
      Add_Action (Table.States (6), (7, 10, 12, 19), 5, 23, 1, 0, null, null);
      Table.States (7).Productions := WisiToken.To_Vector ((1 => 7));
      Add_Action (Table.States (7), (7, 10, 12, 19), 7, 24, 1, 0, null, null);
      Table.States (8).Productions := WisiToken.To_Vector ((1 => 8));
      Add_Action (Table.States (8), (7, 10, 12, 19), 8, 24, 1, 1, null, null);
      Table.States (9).Productions := WisiToken.To_Vector ((1 => 6));
      Add_Action (Table.States (9), (7, 10, 12, 19), 6, 23, 2, 1, null, null);
      Table.States (10).Productions := WisiToken.To_Vector ((1 => 10));
      Add_Action (Table.States (10), (3, 4, 9, 13, 15, 16, 17), 10, 26, 1, 0, name_0'Access, name_0_check'Access);
      Table.States (11).Productions := WisiToken.To_Vector ((11, 12));
      Add_Action (Table.States (11), 15, Reduce, 12, 27, 1, 0, null, null);
      Add_Action (Table.States (11), (1 => 11), 16, 16);
      Add_Action (Table.States (11), 17, Reduce, 12, 27, 1, 0, null, null);
      Add_Error (Table.States (11));
      Table.States (12).Productions := WisiToken.To_Vector ((13, 20));
      Add_Action (Table.States (12), (1 => 13), 15, 19);
      Add_Action (Table.States (12), (1 => 20), 17, 20);
      Add_Error (Table.States (12));
      Table.States (13).Productions := WisiToken.To_Vector ((11, 18));
      Add_Action (Table.States (13), 4, Reduce, 15, 28, 0, 1, null, null);
      Add_Action (Table.States (13), (14, 16), 13, 15);
      Add_Action (Table.States (13), (1 => 11), 16, 16);
      Add_Error (Table.States (13));
      Add_Goto (Table.States (13), 18, 28, 18);
      Table.States (14).Productions := WisiToken.To_Vector ((11, 17));
      Add_Action (Table.States (14), 3, Reduce, 15, 28, 0, 1, null, null);
      Add_Action (Table.States (14), (14, 16), 13, 15);
      Add_Action (Table.States (14), (1 => 11), 16, 16);
      Add_Error (Table.States (14));
      Add_Goto (Table.States (14), 17, 28, 17);
      Table.States (15).Productions := WisiToken.To_Vector ((14, 16));
      Add_Action (Table.States (15), (1 => 14), 14, 26);
      Add_Action (Table.States (15), (1 => 16), 18, 27);
      Add_Error (Table.States (15));
      Table.States (16).Productions := WisiToken.To_Vector ((1 => 11));
      Add_Action (Table.States (16), (1 => 11), 18, 25);
      Add_Error (Table.States (16));
      Table.States (17).Productions := WisiToken.To_Vector ((1 => 17));
      Add_Action (Table.States (17), (2, 3), 3, 23);
      Add_Error (Table.States (17));
      Add_Goto (Table.States (17), 17, 21, 24);
      Table.States (18).Productions := WisiToken.To_Vector ((1 => 18));
      Add_Action (Table.States (18), (1 => 18), 4, 22);
      Add_Error (Table.States (18));
      Table.States (19).Productions := WisiToken.To_Vector ((1 => 13));
      Add_Action (Table.States (19), (1 => 10), 18, 10);
      Add_Error (Table.States (19));
      Add_Goto (Table.States (19), 11, 26, 21);
      Table.States (20).Productions := WisiToken.To_Vector ((1 => 20));
      Add_Action (Table.States (20), (7, 10, 12, 19), 20, 31, 3, 0, use_clause_0'Access, null);
      Table.States (21).Productions := WisiToken.To_Vector ((11, 13));
      Add_Action (Table.States (21), 15, Reduce, 13, 27, 3, 1, null, null);
      Add_Action (Table.States (21), (1 => 11), 16, 16);
      Add_Action (Table.States (21), 17, Reduce, 13, 27, 3, 1, null, null);
      Add_Error (Table.States (21));
      Table.States (22).Productions := WisiToken.To_Vector ((1 => 18));
      Add_Action (Table.States (22), (1 => 10), 18, 10);
      Add_Error (Table.States (22));
      Add_Goto (Table.States (22), 11, 26, 33);
      Table.States (23).Productions := WisiToken.To_Vector ((2, 3));
      Add_Action (Table.States (23), (1 => 2), 4, 30);
      Add_Action (Table.States (23), (1 => 9), 6, 31);
      Add_Error (Table.States (23));
      Add_Goto (Table.States (23), 3, 25, 32);
      Table.States (24).Productions := WisiToken.To_Vector ((1 => 17));
      Add_Action (Table.States (24), (1 => 17), 17, 29);
      Add_Error (Table.States (24));
      Table.States (25).Productions := WisiToken.To_Vector ((1 => 11));
      Add_Action (Table.States (25), (3, 4, 9, 13, 15, 16, 17), 11, 26, 3, 1, name_1'Access, name_1_check'Access);
      Table.States (26).Productions := WisiToken.To_Vector ((1 => 14));
      Add_Action (Table.States (26), (3, 4), 14, 28, 2, 0, parameter_list_0'Access, null);
      Table.States (27).Productions := WisiToken.To_Vector ((1 => 16));
      Add_Action (Table.States (27), (1 => 16), 14, 28);
      Add_Error (Table.States (27));
      Table.States (28).Productions := WisiToken.To_Vector ((1 => 16));
      Add_Action (Table.States (28), (3, 4), 16, 28, 3, 2, parameter_list_2'Access, null);
      Table.States (29).Productions := WisiToken.To_Vector ((1 => 17));
      Add_Action (Table.States (29), (7, 10, 12, 19), 17, 29, 5, 0, subprogram_0'Access, null);
      Table.States (30).Productions := WisiToken.To_Vector ((1 => 2));
      Add_Action (Table.States (30), (1 =>  17), 2, 21, 2, 0, null, null);
      Table.States (31).Productions := WisiToken.To_Vector ((1 => 9));
      Add_Action (Table.States (31), (1 => 9), 18, 36);
      Add_Error (Table.States (31));
      Table.States (32).Productions := WisiToken.To_Vector ((1 => 3));
      Add_Action (Table.States (32), (1 => 3), 5, 35);
      Add_Error (Table.States (32));
      Table.States (33).Productions := WisiToken.To_Vector ((11, 18));
      Add_Action (Table.States (33), (1 => 11), 16, 16);
      Add_Action (Table.States (33), (1 => 18), 17, 34);
      Add_Error (Table.States (33));
      Table.States (34).Productions := WisiToken.To_Vector ((1 => 18));
      Add_Action (Table.States (34), (7, 10, 12, 19), 18, 29, 6, 1, subprogram_1'Access, null);
      Table.States (35).Productions := WisiToken.To_Vector ((1 => 3));
      Add_Action (Table.States (35), (1 => 3), 11, 38);
      Add_Error (Table.States (35));
      Table.States (36).Productions := WisiToken.To_Vector ((1 => 9));
      Add_Action (Table.States (36), (1 => 9), 8, 37);
      Add_Error (Table.States (36));
      Table.States (37).Productions := WisiToken.To_Vector ((1 => 9));
      Add_Action (Table.States (37), (1 => 10), 18, 10);
      Add_Error (Table.States (37));
      Add_Goto (Table.States (37), 11, 26, 40);
      Add_Goto (Table.States (37), 9, 30, 41);
      Table.States (38).Productions := WisiToken.To_Vector ((1 => 3));
      Add_Action (Table.States (38), (1 => 10), 18, 10);
      Add_Error (Table.States (38));
      Add_Goto (Table.States (38), 3, 26, 39);
      Table.States (39).Productions := WisiToken.To_Vector ((3, 11));
      Add_Action (Table.States (39), (1 => 3), 4, 43);
      Add_Action (Table.States (39), (1 => 11), 16, 16);
      Add_Error (Table.States (39));
      Table.States (40).Productions := WisiToken.To_Vector ((11, 19));
      Add_Action (Table.States (40), 9, Reduce, 19, 30, 1, 0, subtype_0'Access, null);
      Add_Action (Table.States (40), (1 => 11), 16, 16);
      Add_Error (Table.States (40));
      Table.States (41).Productions := WisiToken.To_Vector ((1 => 9));
      Add_Action (Table.States (41), (1 => 9), 9, 42);
      Add_Error (Table.States (41));
      Table.States (42).Productions := WisiToken.To_Vector ((1 => 9));
      Add_Action (Table.States (42), (1 => 9), 17, 44);
      Add_Error (Table.States (42));
      Table.States (43).Productions := WisiToken.To_Vector ((1 => 3));
      Add_Action (Table.States (43), (1 =>  17), 3, 21, 6, 1, block_1'Access, null);
      Table.States (44).Productions := WisiToken.To_Vector ((1 => 9));
      Add_Action (Table.States (44), (1 =>  5), 9, 25, 6, 0, loop_statement_0'Access, null);

      WisiToken.LR.Parser.New_Parser
        (Parser,
         Trace,
         Lexer.New_Lexer (Trace),
         Table,
         Language_Fixes,
         Language_Constrain_Terminals,
         Language_String_ID_Set,
         User_Data,
         Max_Parallel         => 15,
         First_Parser_Label   => 0,
         Terminate_Same_State => True);
   end Create_Parser;
end Subprograms_Process_Main;
