;; small Ada-like grammar illustrating the reduce/reduce conflict
;; between an identifier_list and a name.
;;
;; The grammar is ambiguous between an identifier_list and a
;; name_list, if none of the names are string literals. This shows up
;; in the the compiled grammar as several reduce/reduce conflicts, and
;; in the parser as two parsers reaching an identical state.

%{
%}

%keyword LEFT_PAREN "("
%keyword RIGHT_PAREN ")"

%token <punctuation> COMMA ","
%token <punctuation> EQUAL_GREATER "=>"

%token <string-double> STRING_LITERAL '"'[^"]*'"'
;; "
%token <symbol> IDENTIFIER [a-zA-Z][0-9a-zA-Z_]*

%non_grammar <non-reporting> WHITESPACE [ \t\n]
%non_grammar <non-reporting> COMMENT "--"[^\n]*[\n]

;; not first nonterminal
%start compilation
%parser_algorithm LALR_LR1
%output_language Ada
%lexer re2c

%conflict REDUCE/REDUCE in state identifier_list, name on token COMMA
%conflict REDUCE/REDUCE in state identifier_list, name on token LEFT_PAREN
%conflict REDUCE/REDUCE in state identifier_list, name on token IDENTIFIER
%conflict REDUCE/REDUCE in state identifier_list, name on token STRING_LITERAL
%conflict REDUCE/REDUCE in state identifier_list, name on token Wisi_EOI

%%

association
  : selector_name EQUAL_GREATER name
  ;

association_list
  : association
  | association_list COMMA association
  ;

compilation
  : compilation_unit compilation_unit compilation_unit
    (null; -- setq wisi-test-success t)
  ;

compilation_unit
  : identifier_list
  | name_list
  | LEFT_PAREN association_list RIGHT_PAREN
  ;

identifier_list
  : IDENTIFIER
  | identifier_list COMMA IDENTIFIER
  ;

name
  : IDENTIFIER
  | STRING_LITERAL  ;; operator_symbol
  ;

name_list
  : name
  | name_list COMMA name
  ;

selector_name
  : IDENTIFIER
  | STRING_LITERAL  ;; operator_symbol
  ;

%%

;;; end of file
