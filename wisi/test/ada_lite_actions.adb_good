--  generated parser support file.
--  command line: wisi-generate.exe --test_main --generate_output LALR ADA ../../wisi/test/ada_lite.wy
--

--  Copyright (C) 2017, 2018 Free Software Foundation, Inc.
--
--  Author: Stephen Leake <stephe-leake@stephe-leake.org>
--
--  This file is part of WisiToken.
--
--  WisiToken is free software: you can redistribute it and/or modify
--  it under the terms of the GNU General Public License as published by
--  the Free Software Foundation, either version 3 of the License, or
--  (at your option) any later version.
--
--  WisiToken is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with WisiToken.  If not, see <http://www.gnu.org/licenses/>.

package body Ada_Lite_Actions is

   use WisiToken.Semantic_Checks;

   function block_label_opt_0_check
    (Lexer   : access constant WisiToken.Lexer.Instance'Class;
     Nonterm : in out WisiToken.Recover_Token;
     Tokens  : in     WisiToken.Recover_Token_Array)
    return WisiToken.Semantic_Checks.Check_Status
   is
      pragma Unreferenced (Lexer);
   begin
      return Propagate_Name (Nonterm, Tokens, 1);
   end block_label_opt_0_check;

   function block_statement_0_check
    (Lexer   : access constant WisiToken.Lexer.Instance'Class;
     Nonterm : in out WisiToken.Recover_Token;
     Tokens  : in     WisiToken.Recover_Token_Array)
    return WisiToken.Semantic_Checks.Check_Status
   is
      pragma Unreferenced (Nonterm);
   begin
      return Match_Names (Lexer, Descriptor, Tokens, 1, 7, End_Name_Optional);
   end block_statement_0_check;

   function block_statement_1_check
    (Lexer   : access constant WisiToken.Lexer.Instance'Class;
     Nonterm : in out WisiToken.Recover_Token;
     Tokens  : in     WisiToken.Recover_Token_Array)
    return WisiToken.Semantic_Checks.Check_Status
   is
      pragma Unreferenced (Nonterm);
   begin
      return Match_Names (Lexer, Descriptor, Tokens, 1, 5, End_Name_Optional);
   end block_statement_1_check;

   function function_specification_0_check
    (Lexer   : access constant WisiToken.Lexer.Instance'Class;
     Nonterm : in out WisiToken.Recover_Token;
     Tokens  : in     WisiToken.Recover_Token_Array)
    return WisiToken.Semantic_Checks.Check_Status
   is
      pragma Unreferenced (Lexer);
   begin
      return Propagate_Name (Nonterm, Tokens, 2);
   end function_specification_0_check;

   function identifier_opt_0_check
    (Lexer   : access constant WisiToken.Lexer.Instance'Class;
     Nonterm : in out WisiToken.Recover_Token;
     Tokens  : in     WisiToken.Recover_Token_Array)
    return WisiToken.Semantic_Checks.Check_Status
   is
      pragma Unreferenced (Lexer);
   begin
      return Propagate_Name (Nonterm, Tokens, 1);
   end identifier_opt_0_check;

   function name_2_check
    (Lexer   : access constant WisiToken.Lexer.Instance'Class;
     Nonterm : in out WisiToken.Recover_Token;
     Tokens  : in     WisiToken.Recover_Token_Array)
    return WisiToken.Semantic_Checks.Check_Status
   is
      pragma Unreferenced (Lexer);
   begin
      return Propagate_Name (Nonterm, Tokens, 1);
   end name_2_check;

   function name_3_check
    (Lexer   : access constant WisiToken.Lexer.Instance'Class;
     Nonterm : in out WisiToken.Recover_Token;
     Tokens  : in     WisiToken.Recover_Token_Array)
    return WisiToken.Semantic_Checks.Check_Status
   is
      pragma Unreferenced (Lexer);
   begin
      return Propagate_Name (Nonterm, Tokens, 1);
   end name_3_check;

   function name_opt_0_check
    (Lexer   : access constant WisiToken.Lexer.Instance'Class;
     Nonterm : in out WisiToken.Recover_Token;
     Tokens  : in     WisiToken.Recover_Token_Array)
    return WisiToken.Semantic_Checks.Check_Status
   is
      pragma Unreferenced (Lexer);
   begin
      return Propagate_Name (Nonterm, Tokens, 1);
   end name_opt_0_check;

   function package_body_0_check
    (Lexer   : access constant WisiToken.Lexer.Instance'Class;
     Nonterm : in out WisiToken.Recover_Token;
     Tokens  : in     WisiToken.Recover_Token_Array)
    return WisiToken.Semantic_Checks.Check_Status
   is
      pragma Unreferenced (Nonterm);
   begin
      return Match_Names (Lexer, Descriptor, Tokens, 3, 10, End_Name_Optional);
   end package_body_0_check;

   function package_body_1_check
    (Lexer   : access constant WisiToken.Lexer.Instance'Class;
     Nonterm : in out WisiToken.Recover_Token;
     Tokens  : in     WisiToken.Recover_Token_Array)
    return WisiToken.Semantic_Checks.Check_Status
   is
      pragma Unreferenced (Nonterm);
   begin
      return Match_Names (Lexer, Descriptor, Tokens, 3, 8, End_Name_Optional);
   end package_body_1_check;

   function procedure_specification_0_check
    (Lexer   : access constant WisiToken.Lexer.Instance'Class;
     Nonterm : in out WisiToken.Recover_Token;
     Tokens  : in     WisiToken.Recover_Token_Array)
    return WisiToken.Semantic_Checks.Check_Status
   is
      pragma Unreferenced (Lexer);
   begin
      return Propagate_Name (Nonterm, Tokens, 2);
   end procedure_specification_0_check;

   function selected_component_0_check
    (Lexer   : access constant WisiToken.Lexer.Instance'Class;
     Nonterm : in out WisiToken.Recover_Token;
     Tokens  : in     WisiToken.Recover_Token_Array)
    return WisiToken.Semantic_Checks.Check_Status
   is
      pragma Unreferenced (Lexer);
   begin
      return Merge_Names (Nonterm, Tokens, 1, 3);
   end selected_component_0_check;

   procedure subprogram_body_0
    (User_Data : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     Tree      : in out WisiToken.Syntax_Trees.Tree;
     Nonterm   : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tokens    : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      pragma Unreferenced (User_Data, Tree, Nonterm, Tokens);
   begin
      Action_Count (+subprogram_body_ID) := Action_Count (+subprogram_body_ID) + 1;
   end subprogram_body_0;

   function subprogram_body_0_check
    (Lexer   : access constant WisiToken.Lexer.Instance'Class;
     Nonterm : in out WisiToken.Recover_Token;
     Tokens  : in     WisiToken.Recover_Token_Array)
    return WisiToken.Semantic_Checks.Check_Status
   is
      pragma Unreferenced (Nonterm);
   begin
      return Match_Names (Lexer, Descriptor, Tokens, 1, 8, End_Name_Optional);
   end subprogram_body_0_check;

   function subprogram_specification_0_check
    (Lexer   : access constant WisiToken.Lexer.Instance'Class;
     Nonterm : in out WisiToken.Recover_Token;
     Tokens  : in     WisiToken.Recover_Token_Array)
    return WisiToken.Semantic_Checks.Check_Status
   is
      pragma Unreferenced (Lexer);
   begin
      return Propagate_Name (Nonterm, Tokens, 1);
   end subprogram_specification_0_check;

   function subprogram_specification_1_check
    (Lexer   : access constant WisiToken.Lexer.Instance'Class;
     Nonterm : in out WisiToken.Recover_Token;
     Tokens  : in     WisiToken.Recover_Token_Array)
    return WisiToken.Semantic_Checks.Check_Status
   is
      pragma Unreferenced (Lexer);
   begin
      return Propagate_Name (Nonterm, Tokens, 1);
   end subprogram_specification_1_check;

end Ada_Lite_Actions;
