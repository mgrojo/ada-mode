;;; body_instantiation_conflict-lr1-elisp.el --- Generated parser support file  -*- lexical-binding:t -*-
;;; with command line: wisi-generate.exe --parser_algorithm LALR_LR1 --output_language Elisp --lexer Elisp
;;; ../wisi/test/body_instantiation_conflict.wy

;; Copyright (C) 2013, 2017 Stephen Leake.  All Rights Reserved.

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3, or (at
;; your option) any later version.
;;
;; This software is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

(require 'wisi)
(require 'semantic/lex)
(require 'wisi-compile)

(defconst body_instantiation_conflict-lr1-elisp-keyword-table-raw
  '(
   ("begin" . BEGIN)
   ("end" . END)
   ("is" . IS)
   ("(" . LEFT_PAREN)
   ("new" . NEW)
   ("null" . NULL)
   ("procedure" . PROCEDURE)
   (")" . RIGHT_PAREN)
   ))

(defconst body_instantiation_conflict-lr1-elisp-token-table-raw
  '(
   ("punctuation"
    (SEMICOLON . ";")
    )
   ("symbol"
    (IDENTIFIER . "[a-zA-Z][0-9a-zA-Z_]*")
    )
   ))

(defconst body_instantiation_conflict-lr1-elisp-parse-table
   (wisi-compile-grammar
   '((SEMICOLON IDENTIFIER BEGIN END IS LEFT_PAREN NEW NULL PROCEDURE RIGHT_PAREN )
     ((compilation_unit
       ((library_item library_item )
        (setq wisi-test-success t)))
      (library_item
       ((subprogram_body ))
       ((generic_instantiation )))
      (subprogram_body
       ((subprogram_specification IS BEGIN NULL END SEMICOLON )
        (wisi-statement-action [1 statement-start 6 statement-end])))
      (subprogram_specification
       ((PROCEDURE IDENTIFIER parameter_list )))
      (parameter_list
       (())
       ((LEFT_PAREN IDENTIFIER RIGHT_PAREN )))
      (generic_instantiation
       ((PROCEDURE IDENTIFIER IS NEW IDENTIFIER LEFT_PAREN IDENTIFIER RIGHT_PAREN SEMICOLON )
        (wisi-statement-action [1 statement-start 9 statement-end]))))
     [((default . error) (PROCEDURE .  1))
      ((default . error) (IDENTIFIER .  13))
      ((default . error) (Wisi_EOI . accept))
      ((default . error) (PROCEDURE .  8))
      ((default . error) (PROCEDURE . (library_item . 0)))
      ((default . error) (IS .  7))
      ((default . error) (PROCEDURE . (library_item . 1)))
      ((default . error) (BEGIN .  19))
      ((default . error) (IDENTIFIER .  18))
      ((default . error) (Wisi_EOI . (compilation_unit . 0)))
      ((default . error) (Wisi_EOI . (library_item . 0)))
      ((default . error) (IS .  17))
      ((default . error) (Wisi_EOI . (library_item . 1)))
      ((default . error) (IS . ( 14 (parameter_list . 0))) (LEFT_PAREN .  15))
      ((default . error) (NEW .  24))
      ((default . error) (IDENTIFIER .  23))
      ((default . error) (IS . (subprogram_specification . 0)))
      ((default . error) (BEGIN .  22))
      ((default . error) (IS . ( 21 (parameter_list . 0))) (LEFT_PAREN .  15))
      ((default . error) (NULL .  20))
      ((default . error) (END .  29))
      ((default . error) (NEW .  28))
      ((default . error) (NULL .  27))
      ((default . error) (RIGHT_PAREN .  26))
      ((default . error) (IDENTIFIER .  25))
      ((default . error) (LEFT_PAREN .  33))
      ((default . error) (IS . (parameter_list . 1)))
      ((default . error) (END .  32))
      ((default . error) (IDENTIFIER .  31))
      ((default . error) (SEMICOLON .  30))
      ((default . error) (PROCEDURE . (subprogram_body . 0)))
      ((default . error) (LEFT_PAREN .  36))
      ((default . error) (SEMICOLON .  35))
      ((default . error) (IDENTIFIER .  34))
      ((default . error) (RIGHT_PAREN .  38))
      ((default . error) (Wisi_EOI . (subprogram_body . 0)))
      ((default . error) (IDENTIFIER .  37))
      ((default . error) (RIGHT_PAREN .  40))
      ((default . error) (SEMICOLON .  39))
      ((default . error) (PROCEDURE . (generic_instantiation . 0)))
      ((default . error) (SEMICOLON .  41))
      ((default . error) (Wisi_EOI . (generic_instantiation . 0)))]
     [((compilation_unit . 2)(library_item . 3)(subprogram_body . 4)(subprogram_specification . 5)(generic_instantiation . 6))
      nil
      nil
      ((library_item . 9)(subprogram_body . 10)(subprogram_specification . 11)(generic_instantiation . 12))
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      ((parameter_list . 16))
      nil
      nil
      nil
      nil
      ((parameter_list . 16))
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil]))
  "Parser table.")

(provide 'body_instantiation_conflict-lr1-elisp)
;; end of file
