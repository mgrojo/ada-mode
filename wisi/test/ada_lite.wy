;;; Wisi grammar for Ada-Lite; a subset of Ada used for testing syntax
;;; error recovery.
;;
;; This file was produced by copying the full Ada grammar from Emacs
;; Ada mode (https://savannah.nongnu.org/projects/ada-mode/), and
;; deleting stuff. That was the simplest way to get all the
;; productions required.
;;
;; Copyright (C) 2017, 2018 Free Software Foundation, Inc.
;;
;; Author: Stephen Leake <stephe-leake@stephe-leake.org>
;;
;; This file is part of WisiToken.
;;
;; WisiToken is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; WisiToken is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with WisiToken.  If not, see <http://www.gnu.org/licenses/>.
;;
%{
with WisiToken.Text_IO_Trace;
%%
   Trace : aliased WisiToken.Text_IO_Trace.Trace (Descriptor'Access);

   End_Name_Optional : Boolean := True;

   Action_Count : array (Descriptor.First_Nonterminal .. Descriptor.Last_Nonterminal) of Integer := (others => 0);
%}
;; ' terminate quote

%keyword AND "and"
%keyword BEGIN "begin"
%keyword BODY "body"
%keyword CASE "case"
%keyword DECLARE "declare"
%keyword ELSE "else"
%keyword ELSIF "elsif"
%keyword END "end"
%keyword EXIT "exit"
%keyword EXCEPTION "exception"
%keyword FOR "for"
%keyword FUNCTION "function"
%keyword IF "if"
%keyword IN "in"
%keyword IS "is"
%keyword LEFT_PAREN "("
%keyword LOOP "loop"
%keyword NEW "new"
%keyword NOT "not"
%keyword OR "or"
%keyword PACKAGE "package"
%keyword PROCEDURE "procedure"
%keyword RANGE "range"
%keyword RETURN "return"
%keyword RIGHT_PAREN ")"
%keyword SEPARATE "separate"
%keyword THEN "then"
%keyword TYPE "type"
%keyword WHEN "when"
%keyword WITH "with"
%keyword XOR "xor"

;; all tokens that consist of characters with punctuation syntax
%token <punctuation> AMPERSAND "&"
%token <punctuation> COLON ":"
%token <punctuation> COLON_EQUAL ":="
%token <punctuation> COMMA ","
%token <punctuation> DOT "."
%token <punctuation> DOT_DOT ".."
%token <punctuation> EQUAL "="
%token <punctuation> EQUAL_GREATER "=>"
%token <punctuation> GREATER ">"
%token <punctuation> GREATER_EQUAL ">="
%token <punctuation> LESS "<"
%token <punctuation> LESS_EQUAL "<="
%token <punctuation> MINUS "-"
%token <punctuation> PLUS "+"
%token <punctuation> SEMICOLON ";"
%token <punctuation> SLASH "/"
%token <punctuation> SLASH_EQUAL "/="
%token <punctuation> STAR "*"

%token <string-double> STRING_LITERAL (["][\x20-\x21\x23-\U0010FFFF]*["])+
%token <number> NUMERIC_LITERAL [0-9]+
%token <symbol> IDENTIFIER [a-zA-Z][0-9a-zA-Z_]*

%non_grammar <non-reporting> WHITESPACE [ \t]
%non_grammar <new-line> NEW_LINE [\n]
%non_grammar <comment> COMMENT "--"[^\n]*[\n]

%start compilation_unit_list
%parser_algorithm LALR
%output_language Ada
%lexer re2c

;; Set costs to take advantage of syntax to get to solution faster.

%mckenzie_cost_limit 10
%mckenzie_check_limit 3

;; Default insert terminal, delete terminal, delete nonterminal, push back, undo_reduce cost.
%mckenzie_cost_default 4 4 8 2 2

;; Prefer inserting keywords over identifiers and operators to take
;; advantage of empty expressions.
;;
;; LEFT_PAREN is _not_ here, because inserting that turns a missing
;; 'then' into a function call; not a likely error.
;;
;; IDENTIFIER is here, so if we are inserting an expression, it is
;; prefered over "null".
%mckenzie_cost_insert BEGIN 3
%mckenzie_cost_insert CASE 3
%mckenzie_cost_insert DECLARE 3
%mckenzie_cost_insert ELSE 3
%mckenzie_cost_insert ELSIF 3
%mckenzie_cost_insert EXIT 3
%mckenzie_cost_insert FUNCTION 3
%mckenzie_cost_insert IS 3
%mckenzie_cost_insert IDENTIFIER 3
%mckenzie_cost_insert NEW 3
%mckenzie_cost_insert PROCEDURE 3
%mckenzie_cost_insert RETURN 3
%mckenzie_cost_insert RIGHT_PAREN 3
%mckenzie_cost_insert THEN 3
%mckenzie_cost_insert WHEN 3

;; These can follow 'end', or start new statements
%mckenzie_cost_insert IF 2
%mckenzie_cost_insert LOOP 2

;; We often have an extra 'begin' while moving stuff around. Deleting
;; that requires popping it and the corresponding nonterm off the
;; parse stack. Similarly, we often have an extra 'end'; deleting that
;; is simple.
%mckenzie_cost_delete BEGIN 1
%mckenzie_cost_delete declarative_part_opt 1
%mckenzie_cost_delete END 1

;; Recovering from a missing quote yields a STRING_LITERAL, but the
;; editing that lead to the missing quote may also lead to a grammar
;; syntax error where part of the best solution is to delete that
;; STRING_LITERAL, so make that cheaper than inserting operators and
;; keywords.
%mckenzie_cost_delete STRING_LITERAL 2

;; Prefer insert these over everything; lets us finish a
;; statement.
%mckenzie_cost_insert END 1
%mckenzie_cost_insert SEMICOLON 1

%conflict REDUCE/REDUCE in state actual_parameter_part, actual_parameter_part  on token RIGHT_PAREN
%conflict REDUCE/REDUCE in state discrete_subtype_definition, range_list  on token RIGHT_PAREN
%conflict REDUCE/REDUCE in state primary, subtype_indication  on token RIGHT_PAREN
%conflict SHIFT/REDUCE in state generic_instantiation, generic_instantiation  on token IS
%conflict SHIFT/REDUCE in state simple_return_statement, simple_return_statement  on token SEMICOLON
%conflict SHIFT/REDUCE in state subprogram_body, subprogram_body  on token IS

%%
;;;; grammar rules

actual_parameter_part
  : LEFT_PAREN association_list RIGHT_PAREN
  ;

aspect_specification_opt
  : ;; empty
  | WITH association_list
  ;
assignment_statement
  : name COLON_EQUAL expression_opt SEMICOLON
  ;

;; Allowing empty items makes many partially written programs legal;
;; make sure they don't confuse the error recovery.
association_opt
  : ;; empty
  | IDENTIFIER EQUAL_GREATER expression_opt
  | expression
  ;

association_list
  : association_opt
  | association_list COMMA association_opt
  ;

binary_adding_operator :
    PLUS
  | MINUS
  | AMPERSAND
  ;

block_label_opt
  : ;; empty
  | IDENTIFIER COLON
    ()
    (return Propagate_Name (Nonterm, Tokens, 1);)
  ;

block_statement
  : block_label_opt DECLARE declarative_part_opt BEGIN handled_sequence_of_statements END identifier_opt SEMICOLON
    ()
    (return Match_Names (Lexer, Tokens, 1, 7, End_Name_Optional);)

  | block_label_opt BEGIN handled_sequence_of_statements END identifier_opt SEMICOLON
    ()
    (return Match_Names (Lexer, Tokens, 1, 5, End_Name_Optional);)
  ;

body_g :
    proper_body
  | body_stub
  ;

body_stub :
    subprogram_body_stub
  ;

case_statement
  : CASE expression_opt IS case_statement_alternative_list END CASE SEMICOLON
  ;

case_statement_alternative
  : WHEN NUMERIC_LITERAL EQUAL_GREATER sequence_of_statements_opt
  ;

;; We don't allow an empty list here; that leads to parallel parser
;; explosion in nested case statements.
case_statement_alternative_list
  : case_statement_alternative
  | case_statement_alternative_list case_statement_alternative
  ;

compilation_unit
  : library_item
  ;

compilation_unit_list
  : compilation_unit
  | compilation_unit_list compilation_unit
  ;

compound_statement
  : if_statement
  | case_statement
  | loop_statement
  | block_statement
  | extended_return_statement
  ;

constraint
  : RANGE range_g
  | index_constraint
  ;

declaration
  : body_g
  | object_declaration
  | subprogram_declaration
  | type_declaration
  ;

declarations
  : declaration
  | declarations declaration
  ;

declarative_part_opt
  : ;; empty
  | declarations
  ;

discrete_subtype_definition : subtype_indication | range_g ;

elsif_statement_item
  : ELSIF expression_opt THEN sequence_of_statements_opt
  ;

elsif_statement_list
  : elsif_statement_item
  | elsif_statement_list elsif_statement_item
  ;

enumeration_literal_list
  : IDENTIFIER
  | enumeration_literal_list COMMA IDENTIFIER
  ;

enumeration_type_definition
  : LEFT_PAREN enumeration_literal_list RIGHT_PAREN
  ;

exception_choice : name ;

exception_handler
  : WHEN exception_choice EQUAL_GREATER sequence_of_statements_opt
  ;

exception_handler_list
  : exception_handler
  | exception_handler_list exception_handler
  ;

exception_handler_list_opt
  : ;; empty for user friendly
  | exception_handler_list
  ;

exit_statement
  : EXIT identifier_opt WHEN expression_opt SEMICOLON
  | EXIT identifier_opt SEMICOLON
  ;

expression
  : relation
  | relation_and_list
  | relation_or_list
  | relation_xor_list
  ;

expression_opt
  : ;; empty for user friendly
  | expression
  ;

extended_return_object_declaration
  : IDENTIFIER COLON subtype_indication
  ;

extended_return_statement
  : RETURN extended_return_object_declaration SEMICOLON
  ;

factor
  : primary
  | NOT primary
  ;


formal_part
  : LEFT_PAREN parameter_specification_list RIGHT_PAREN
  ;

full_type_declaration
  : TYPE IDENTIFIER IS type_definition SEMICOLON
  ;

function_specification
  : FUNCTION name parameter_and_result_profile
    ()
    (return Propagate_Name (Nonterm, Tokens, 2);)
  ;

generic_instantiation
  : PACKAGE name IS NEW name SEMICOLON
  | PROCEDURE name IS NEW name SEMICOLON
  ;

handled_sequence_of_statements
  : sequence_of_statements_opt EXCEPTION exception_handler_list_opt
  | sequence_of_statements_opt
  ;

identifier_opt
  : ;; empty
  | IDENTIFIER
    ()
    (return Propagate_Name (Nonterm, Tokens, 1);)
  ;

if_statement
  : IF expression_opt THEN sequence_of_statements_opt elsif_statement_list ELSE sequence_of_statements_opt END IF SEMICOLON
  | IF expression_opt THEN sequence_of_statements_opt elsif_statement_list END IF SEMICOLON
  | IF expression_opt THEN sequence_of_statements_opt ELSE sequence_of_statements_opt END IF SEMICOLON
  | IF expression_opt THEN sequence_of_statements_opt END IF SEMICOLON
  ;

index_constraint
  : LEFT_PAREN discrete_subtype_definition RIGHT_PAREN
  ;

iteration_scheme
  : FOR IDENTIFIER IN discrete_subtype_definition
  ;

library_item
  : package_body
  | subprogram_declaration
  | subprogram_body
  | generic_instantiation
  ;

loop_statement
  : iteration_scheme LOOP sequence_of_statements_opt END LOOP identifier_opt SEMICOLON
  | LOOP sequence_of_statements_opt END LOOP identifier_opt SEMICOLON
  ;

multiplying_operator : STAR | SLASH ;

name
  : IDENTIFIER
    ()
    (return Propagate_Name (Nonterm, Tokens, 1);)
  | name LEFT_PAREN range_list RIGHT_PAREN ;; slice or constraint
  | selected_component
    ()
    (return Propagate_Name (Nonterm, Tokens, 1);)
  | name actual_parameter_part ;; function_call, procedure call.
  ;

name_opt
  : ;; empty
  | name
    ()
    (return Propagate_Name (Nonterm, Tokens, 1);)
  ;

object_declaration
  : IDENTIFIER COLON subtype_indication COLON_EQUAL expression_opt SEMICOLON
  | IDENTIFIER COLON subtype_indication SEMICOLON
  ;

package_body
  : PACKAGE BODY name aspect_specification_opt IS declarative_part_opt BEGIN handled_sequence_of_statements END name_opt SEMICOLON
    ()
    (return Match_Names (Lexer, Tokens, 3, 10, End_Name_Optional);)
  | PACKAGE BODY name aspect_specification_opt IS declarative_part_opt END name_opt SEMICOLON
    ()
    (return Match_Names (Lexer, Tokens, 3, 8, End_Name_Optional);)
  ;

parameter_and_result_profile
  : formal_part RETURN IDENTIFIER
  | RETURN IDENTIFIER
  ;

parameter_profile_opt
  : ;; empty
  | formal_part
  ;

parameter_specification
  : ;; empty
  | IDENTIFIER COLON IDENTIFIER COLON_EQUAL expression_opt
  | IDENTIFIER COLON IDENTIFIER
  ;

parameter_specification_list
  : parameter_specification
  | parameter_specification_list SEMICOLON parameter_specification
  ;

paren_expression
  : LEFT_PAREN expression_opt RIGHT_PAREN
  ;

primary
  : NUMERIC_LITERAL
  | STRING_LITERAL
  | name
  | paren_expression
  ;

procedure_call_statement
  : name SEMICOLON
  ;

procedure_specification
  : PROCEDURE name parameter_profile_opt
    ()
    (return Propagate_Name (Nonterm, Tokens, 2);)
  ;

proper_body
  : package_body
  | subprogram_body
  ;

range_g
  : simple_expression DOT_DOT simple_expression
  ;

range_list
  : range_g
  | range_list COMMA range_g
  ;

relation_and_list
  : relation AND relation
  | relation_and_list AND relation
  ;

relation_or_list
  : relation OR relation
  | relation_or_list OR relation
  ;

relation_xor_list
  : relation XOR relation
  | relation_xor_list XOR relation
  ;

relation
  : simple_expression
  | simple_expression relational_operator simple_expression
  ;

relational_operator
  : EQUAL | SLASH_EQUAL | LESS | LESS_EQUAL | GREATER | GREATER_EQUAL ;
  ;;  =   | /=          | <    |  <=        | >       | >=

selected_component
  : name DOT IDENTIFIER
    ()
    (return Merge_Names (Nonterm, Tokens, 1, 3);)
  ;

sequence_of_statements
  : statement
  | sequence_of_statements statement
  ;

sequence_of_statements_opt
  : ;; empty
  | sequence_of_statements
  ;

simple_expression
  : unary_adding_operator term_list
  | term_list
  ;

simple_return_statement
  : RETURN SEMICOLON
  | RETURN expression_opt SEMICOLON
  ;

simple_statement
  : assignment_statement
  | exit_statement
  | procedure_call_statement
  | simple_return_statement
  ;

statement
  : simple_statement
  | compound_statement
  ;

subprogram_body
  : subprogram_specification aspect_specification_opt IS declarative_part_opt BEGIN
    handled_sequence_of_statements END name_opt SEMICOLON
    (Action_Count (+subprogram_body_ID) := Action_Count (+subprogram_body_ID) + 1;)
    (return Match_Names (Lexer, Tokens, 1, 8, End_Name_Optional);)
  ;

subprogram_body_stub
  : subprogram_specification IS SEPARATE SEMICOLON
  ;

subprogram_declaration
  : subprogram_specification SEMICOLON
  ;

subprogram_specification
  : procedure_specification
    ()
    (return Propagate_Name (Nonterm, Tokens, 1);)
  | function_specification
    ()
    (return Propagate_Name (Nonterm, Tokens, 1);)
  ;

subtype_indication
  : name constraint
  | name
  ;

term
  : factor
  | term multiplying_operator factor
  ;

term_list
  : term
  | term_list binary_adding_operator term
  ;

type_declaration
  : full_type_declaration
  ;

type_definition
  : enumeration_type_definition
  ;

unary_adding_operator : PLUS | MINUS ; ;; + | -

%%
;;; end of file
