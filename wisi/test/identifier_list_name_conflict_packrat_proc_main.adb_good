--  generated parser support file.
--  command line: wisi-generate.exe  --generate PACKRAT_PROC ADA ../../wisi/test/identifier_list_name_conflict.wy
--

with WisiToken.Lexer.re2c;
with identifier_list_name_conflict_re2c_c;
with Identifier_List_Name_Conflict_Actions; use Identifier_List_Name_Conflict_Actions;
with WisiToken.Parse.Packrat.Procedural;
with WisiToken.Productions;
package body Identifier_List_Name_Conflict_Packrat_Proc_Main is

   package Lexer is new WisiToken.Lexer.re2c
     (identifier_list_name_conflict_re2c_c.New_Lexer,
      identifier_list_name_conflict_re2c_c.Free_Lexer,
      identifier_list_name_conflict_re2c_c.Reset_Lexer,
      identifier_list_name_conflict_re2c_c.Next_Token);

   function Create_Parser
     (Trace     : not null access WisiToken.Trace'Class;
      User_Data : in     WisiToken.Syntax_Trees.User_Data_Access)
     return WisiToken.Parse.Base_Parser'Class
   is
      use WisiToken;
      use WisiToken.Productions;
      Grammar               : Prod_Arrays.Vector;
      Direct_Left_Recursive : constant WisiToken.Token_ID_Set (9 .. 17) :=
        (11 | 14 | 16 => True,
         others => False);
   begin
      Grammar.Set_First (9);
      Grammar.Set_Last (17);
      declare
         Prod : Instance;
      begin
         Prod.LHS := 9;
         Prod.RHSs.Set_First (0);
         Prod.RHSs.Set_Last (0);
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (2);
            To_Vector ((12, 8), RHS.Tokens);
            Prod.RHSs (0) := RHS;
         end;
         Grammar (9) := Prod;
      end;
      declare
         Prod : Instance;
      begin
         Prod.LHS := 10;
         Prod.RHSs.Set_First (0);
         Prod.RHSs.Set_Last (0);
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (3);
            To_Vector ((17, 5, 15), RHS.Tokens);
            Prod.RHSs (0) := RHS;
         end;
         Grammar (10) := Prod;
      end;
      declare
         Prod : Instance;
      begin
         Prod.LHS := 11;
         Prod.RHSs.Set_First (0);
         Prod.RHSs.Set_Last (1);
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (3);
            To_Vector ((11, 4, 10), RHS.Tokens);
            Prod.RHSs (0) := RHS;
         end;
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (1);
            To_Vector ((1 => 10), RHS.Tokens);
            Prod.RHSs (1) := RHS;
         end;
         Grammar (11) := Prod;
      end;
      declare
         Prod : Instance;
      begin
         Prod.LHS := 12;
         Prod.RHSs.Set_First (0);
         Prod.RHSs.Set_Last (0);
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (3);
            To_Vector ((13, 13, 13), RHS.Tokens);
            RHS.Action     := compilation_0'Access;
            Prod.RHSs (0) := RHS;
         end;
         Grammar (12) := Prod;
      end;
      declare
         Prod : Instance;
      begin
         Prod.LHS := 13;
         Prod.RHSs.Set_First (0);
         Prod.RHSs.Set_Last (2);
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (1);
            To_Vector ((1 => 14), RHS.Tokens);
            Prod.RHSs (0) := RHS;
         end;
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (1);
            To_Vector ((1 => 16), RHS.Tokens);
            Prod.RHSs (1) := RHS;
         end;
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (3);
            To_Vector ((2, 11, 3), RHS.Tokens);
            Prod.RHSs (2) := RHS;
         end;
         Grammar (13) := Prod;
      end;
      declare
         Prod : Instance;
      begin
         Prod.LHS := 14;
         Prod.RHSs.Set_First (0);
         Prod.RHSs.Set_Last (1);
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (3);
            To_Vector ((14, 4, 7), RHS.Tokens);
            Prod.RHSs (0) := RHS;
         end;
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (1);
            To_Vector ((1 => 7), RHS.Tokens);
            Prod.RHSs (1) := RHS;
         end;
         Grammar (14) := Prod;
      end;
      declare
         Prod : Instance;
      begin
         Prod.LHS := 15;
         Prod.RHSs.Set_First (0);
         Prod.RHSs.Set_Last (1);
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (1);
            To_Vector ((1 => 7), RHS.Tokens);
            Prod.RHSs (0) := RHS;
         end;
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (1);
            To_Vector ((1 => 6), RHS.Tokens);
            Prod.RHSs (1) := RHS;
         end;
         Grammar (15) := Prod;
      end;
      declare
         Prod : Instance;
      begin
         Prod.LHS := 16;
         Prod.RHSs.Set_First (0);
         Prod.RHSs.Set_Last (1);
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (3);
            To_Vector ((16, 4, 15), RHS.Tokens);
            Prod.RHSs (0) := RHS;
         end;
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (1);
            To_Vector ((1 => 15), RHS.Tokens);
            Prod.RHSs (1) := RHS;
         end;
         Grammar (16) := Prod;
      end;
      declare
         Prod : Instance;
      begin
         Prod.LHS := 17;
         Prod.RHSs.Set_First (0);
         Prod.RHSs.Set_Last (1);
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (1);
            To_Vector ((1 => 7), RHS.Tokens);
            Prod.RHSs (0) := RHS;
         end;
         declare
            RHS : Right_Hand_Side;
         begin
            RHS.Tokens.Set_First (1);
            RHS.Tokens.Set_Last (1);
            To_Vector ((1 => 6), RHS.Tokens);
            Prod.RHSs (1) := RHS;
         end;
         Grammar (17) := Prod;
      end;
      return WisiToken.Parse.Packrat.Procedural.Create
        (Grammar, Direct_Left_Recursive, 9, Trace, Lexer.New_Lexer (Trace), User_Data);
   end Create_Parser;

end Identifier_List_Name_Conflict_Packrat_Proc_Main;
