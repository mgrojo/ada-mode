--  generated parser support file.
--  command line: wisi-generate.exe  --generate PACKRAT_GEN ADA ../../wisi/test/warth_left_recurse_expr_1.wy
--

--  Copyright (C) 2018 Stephen Leake.  All Rights Reserved.

--  This program is free software; you can redistribute it and/or
--  modify it under the terms of the GNU General Public License as
--  published by the Free Software Foundation; either version 3, or (at
--  your option) any later version.
--
--  This software is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

with WisiToken.Lexer.re2c;
with warth_left_recurse_expr_1_re2c_c;
with Warth_Left_Recurse_Expr_1_Actions; use Warth_Left_Recurse_Expr_1_Actions;
with WisiToken.Parse.Packrat.Generated;
package body Warth_Left_Recurse_Expr_1_Packrat_Gen_Main is

   package Lexer is new WisiToken.Lexer.re2c
     (warth_left_recurse_expr_1_re2c_c.New_Lexer,
      warth_left_recurse_expr_1_re2c_c.Free_Lexer,
      warth_left_recurse_expr_1_re2c_c.Reset_Lexer,
      warth_left_recurse_expr_1_re2c_c.Next_Token);

   use WisiToken;
   use WisiToken.Parse.Packrat;
   use WisiToken.Parse.Packrat.Generated;
   function Parse_wisitoken_accept
     (Parser : in out Generated.Parser; Last_Pos : in Base_Token_Index) return Result_Type;
   function Parse_expr
     (Parser : in out Generated.Parser; Last_Pos : in Base_Token_Index) return Result_Type;

   function Parse_wisitoken_accept
     (Parser : in out Generated.Parser; Last_Pos : in Base_Token_Index) return Result_Type
   is
      Descriptor : WisiToken.Descriptor renames Parser.Trace.Descriptor.all;
      Start_Pos  : constant Token_Index := Last_Pos + 1; --  first token in current nonterm
      Pos        : Base_Token_Index := Last_Pos; --  last token parsed.
      Memo_0_1 : Memo_Entry;
      Pos_0_2  : Token_Index;
   begin
      if Pos = Parser.Terminals.Last_Index then
         return (State => Failure);
      end if;
      declare
         Memo : Memo_Entry renames Parser.Derivs (5)(Start_Pos);
      begin
         case Memo.State is
         when Success =>
            return Parser.Derivs (5)(Start_Pos);
         when Failure =>
            goto RHS_0_Fail;
         when No_Result =>
            if Memo.Recursive then
               raise Recursive with Image (5, Descriptor) & Token_Index'Image (Start_Pos) & ": recursive";
            end if;
            Memo.Recursive := True;
         end case;
      end;

      --  5.0: wisitoken_accept <= expr Wisi_EOI
      Pos := Last_Pos;
      Memo_0_1 := Parse_expr (Parser, Pos);
      case Result_States'(Memo_0_1.State) is
      when Success =>
         Pos := Memo_0_1.Last_Token;
      when Failure =>
         goto RHS_0_Fail;
      end case;
      if Parser.Terminals (Pos + 1).ID = 4 then
         Pos := Pos + 1;
         Pos_0_2 := Pos;
         Parser.Derivs (5).Replace_Element
           (Start_Pos,
            (State              => Success,
             Result             => Parser.Tree.Add_Nonterm
               (Production      => (5, 0),
                Action          => null,
                Children        =>
                 (Memo_0_1.Result,
                  Tree_Index (Pos_0_2)),
                Default_Virtual => False),
             Last_Token      => Pos));
         goto Succeed;
      else
         goto RHS_0_Fail;
      end if;
      <<RHS_0_Fail>>

      Parser.Derivs (5).Replace_Element (Start_Pos, (State => Failure));
      return Parser.Derivs (5)(Start_Pos);

      <<Succeed>>
      if WisiToken.Trace_Parse > Detail then
         Parser.Trace.Put_Line
           (Parser.Tree.Image
             (Parser.Derivs (5)(Start_Pos).Result, Descriptor, Include_Children => True));
      end if;
      return Parser.Derivs (5)(Start_Pos);
   end Parse_wisitoken_accept;

   function Parse_expr
     (Parser : in out Generated.Parser; Last_Pos : in Base_Token_Index) return Result_Type
   is
      Descriptor : WisiToken.Descriptor renames Parser.Trace.Descriptor.all;
      Start_Pos  : constant Token_Index := Last_Pos + 1; --  first token in current nonterm
      Pos        : Base_Token_Index := Last_Pos; --  last token parsed.
      Memo_0_1 : Memo_Entry;
      Pos_0_2  : Token_Index;
      Pos_0_3  : Token_Index;
      Pos_1_1  : Token_Index;
      Pos_Recurse_Last : Base_Token_Index := Last_Pos;
      Result_Recurse   : Memo_Entry;
   begin
      if Pos = Parser.Terminals.Last_Index then
         return (State => Failure);
      end if;
      declare
         Memo : Memo_Entry renames Parser.Derivs (6)(Start_Pos);
      begin
         case Memo.State is
         when Success =>
            return Parser.Derivs (6)(Start_Pos);
         when Failure =>
            goto RHS_1_Fail;
         when No_Result =>
            if Memo.Recursive then
               raise Recursive with Image (6, Descriptor) & Token_Index'Image (Start_Pos) & ": recursive";
            end if;
            Memo.Recursive := True;
         end case;
      end;

      Parser.Derivs (6).Replace_Element (Start_Pos, (State => Failure));
      <<Recurse_Start>>
      --  6.0: expr <= expr MINUS NUMERIC_LITERAL
      Pos := Last_Pos;
      Memo_0_1 := Parse_expr (Parser, Pos);
      case Result_States'(Memo_0_1.State) is
      when Success =>
         Pos := Memo_0_1.Last_Token;
      when Failure =>
         goto RHS_0_Fail;
      end case;
      if Parser.Terminals (Pos + 1).ID = 2 then
         Pos := Pos + 1;
         Pos_0_2 := Pos;
      else
         goto RHS_0_Fail;
      end if;
      if Parser.Terminals (Pos + 1).ID = 3 then
         Pos := Pos + 1;
         Pos_0_3 := Pos;
         Result_Recurse :=
           (State              => Success,
            Result             => Parser.Tree.Add_Nonterm
              (Production      => (6, 0),
               Action          => expr_0'Access,
               Children        =>
                (Memo_0_1.Result,
                 Tree_Index (Pos_0_2),
                 Tree_Index (Pos_0_3)),
               Default_Virtual => False),
            Last_Token      => Pos);
         goto Finish;
      else
         goto RHS_0_Fail;
      end if;
      <<RHS_0_Fail>>

      --  6.1: expr <= NUMERIC_LITERAL
      Pos := Last_Pos;
      if Parser.Terminals (Pos + 1).ID = 3 then
         Pos := Pos + 1;
         Pos_1_1 := Pos;
         Result_Recurse :=
           (State              => Success,
            Result             => Parser.Tree.Add_Nonterm
              (Production      => (6, 1),
               Action          => expr_1'Access,
               Children        => (1 => Tree_Index (Pos_1_1)),
               Default_Virtual => False),
            Last_Token      => Pos);
         goto Finish;
      else
         goto RHS_1_Fail;
      end if;
      <<RHS_1_Fail>>

      Result_Recurse := (State => Failure);
      <<Finish>>
      if Result_Recurse.State = Success then
         if Pos > Pos_Recurse_Last then
            Parser.Derivs (6).Replace_Element (Start_Pos, Result_Recurse);
            Pos_Recurse_Last := Pos;
            if WisiToken.Trace_Parse > Detail then
               Parser.Trace.Put_Line
                 (Parser.Tree.Image (Result_Recurse.Result, Descriptor, Include_Children => True));
            end if;
            goto Recurse_Start;
         elsif Pos = Pos_Recurse_Last and then Parser.Tree.Is_Empty (Result_Recurse.Result) then
            Parser.Derivs (8).Replace_Element (Start_Pos, Result_Recurse);
         end if;
      end if;

      return Parser.Derivs (6)(Start_Pos);
   end Parse_expr;

   function Parse_wisitoken_accept_1
     (Parser : in out WisiToken.Parse.Base_Parser'Class; Last_Pos : in Base_Token_Index) return Result_Type
   is begin
      return Parse_wisitoken_accept (Generated.Parser (Parser), Last_Pos);
   end Parse_wisitoken_accept_1;

   function Create_Parser
     (Trace     : not null access WisiToken.Trace'Class;
      User_Data : in     WisiToken.Syntax_Trees.User_Data_Access)
     return WisiToken.Parse.Base_Parser'Class
   is begin
      return Parser : WisiToken.Parse.Packrat.Generated.Parser do
         Parser.Trace := Trace;
         Parser.Lexer := Lexer.New_Lexer (Trace);
         Parser.User_Data := User_Data;
         Parser.Parse_WisiToken_Accept := Parse_wisitoken_accept_1'Access;
      end return;
   end Create_Parser;

end Warth_Left_Recurse_Expr_1_Packrat_Gen_Main;
