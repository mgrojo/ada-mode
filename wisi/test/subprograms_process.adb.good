--  generated by WisiToken Wisi from ../wisi/test/subprograms.wy
--  with command line: wisi-generate.exe -v 1 --output_language Ada_Emacs --lexer re2c --interface process
--  ../wisi/test/subprograms.wy
--
--  Copyright (C) 2013, 2017 Stephen Leake.  All Rights Reserved.

--  This program is free software; you can redistribute it and/or
--  modify it under the terms of the GNU General Public License as
--  published by the Free Software Foundation; either version 3, or (at
--  your option) any later version.
--
--  This software is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

with WisiToken.Lexer.re2c;
with WisiToken.Semantic_Checks; use WisiToken.Semantic_Checks;
with WisiToken.Semantic_State;
with WisiToken.Syntax_Trees.Branched;
with WisiToken.Wisi_Runtime; use WisiToken.Wisi_Runtime;
with WisiToken.Wisi_Runtime.Subprograms; use WisiToken.Wisi_Runtime.Subprograms;
with subprograms_re2c_c;
package body Subprograms_Process is

   use all type Motion_Param_Array;

   package Lexer is new WisiToken.Lexer.re2c
     (subprograms_re2c_c.New_Lexer,
      subprograms_re2c_c.Free_Lexer,
      subprograms_re2c_c.Reset_Lexer,
      subprograms_re2c_c.Next_Token);

   procedure block_1
    (User_Data    : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     State        : in out WisiToken.Semantic_State.Semantic_State;
     Tree         : in out WisiToken.Syntax_Trees.Branched.Tree;
     Tree_Nonterm : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tree_Tokens  : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : WisiToken.Wisi_Runtime.Parse_Data_Type renames WisiToken.Wisi_Runtime.Parse_Data_Type (User_Data);
   begin
      case Parse_Data.Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, State, Tree, Tree_Nonterm, Tree_Tokens, ((3, Motion), (4, Motion)));
      when Face =>
         null;
      when Indent =>
         Indent_Action_0 (Parse_Data, State, Tree, Tree_Nonterm, Tree_Tokens, ((False, (Simple, (Int, 0))), (False, (Simple, (Int, Subp_Indent))), (False, (Simple, (Int, 0))), (False, (Simple, (Int, Subp_Indent))), (False, (Simple, (Int, 0))), (False, (Simple, (Int, 0)))));
      end case;
   end block_1;

   procedure loop_statement_0
    (User_Data    : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     State        : in out WisiToken.Semantic_State.Semantic_State;
     Tree         : in out WisiToken.Syntax_Trees.Branched.Tree;
     Tree_Nonterm : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tree_Tokens  : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : WisiToken.Wisi_Runtime.Parse_Data_Type renames WisiToken.Wisi_Runtime.Parse_Data_Type (User_Data);
   begin
      case Parse_Data.Parse_Action is
      when Navigate =>
         null;
      when Face =>
         Face_Remove_Action (Parse_Data, State, Tree, Tree_Nonterm, Tree_Tokens, (1 => 4));
      when Indent =>
         Indent_Action_0 (Parse_Data, State, Tree, Tree_Nonterm, Tree_Tokens, ((False, (Simple, (Int, -Subp_Indent))), (False, (Simple, (Int, 0))), (False, (Simple, (Int, Subp_Indent - Subp_Indent_Broken))), (False, (Simple, (Int, Subp_Indent))), (False, (Simple, (Int, 0))), (False, (Simple, (Int, 0)))));
      end case;
   end loop_statement_0;

   procedure name_0
    (User_Data    : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     State        : in out WisiToken.Semantic_State.Semantic_State;
     Tree         : in out WisiToken.Syntax_Trees.Branched.Tree;
     Tree_Nonterm : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tree_Tokens  : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : WisiToken.Wisi_Runtime.Parse_Data_Type renames WisiToken.Wisi_Runtime.Parse_Data_Type (User_Data);
   begin
      case Parse_Data.Parse_Action is
      when Navigate =>
         null;
      when Face =>
         Face_Mark_Action (Parse_Data, State, Tree, Tree_Nonterm, Tree_Tokens, (1 => (1, Suffix)));
      when Indent =>
         null;
      end case;
   end name_0;

   function name_0_check
    (Lexer   : in     WisiToken.Lexer.Handle;
     Nonterm : in out WisiToken.Recover_Token;
     Tokens  : in     WisiToken.Recover_Token_Array)
    return WisiToken.Semantic_Checks.Check_Status
   is
      pragma Unreferenced (Lexer);
   begin
      return Propagate_Name (Nonterm, Tokens, 1);
   end name_0_check;

   procedure name_1
    (User_Data    : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     State        : in out WisiToken.Semantic_State.Semantic_State;
     Tree         : in out WisiToken.Syntax_Trees.Branched.Tree;
     Tree_Nonterm : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tree_Tokens  : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : WisiToken.Wisi_Runtime.Parse_Data_Type renames WisiToken.Wisi_Runtime.Parse_Data_Type (User_Data);
   begin
      case Parse_Data.Parse_Action is
      when Navigate =>
         null;
      when Face =>
         Face_Mark_Action (Parse_Data, State, Tree, Tree_Nonterm, Tree_Tokens, ((1, Prefix), (3, Suffix)));
      when Indent =>
         null;
      end case;
   end name_1;

   function name_1_check
    (Lexer   : in     WisiToken.Lexer.Handle;
     Nonterm : in out WisiToken.Recover_Token;
     Tokens  : in     WisiToken.Recover_Token_Array)
    return WisiToken.Semantic_Checks.Check_Status
   is
      pragma Unreferenced (Lexer);
   begin
      return Merge_Names (Nonterm, Tokens, 1, 3);
   end name_1_check;

   procedure parameter_list_0
    (User_Data    : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     State        : in out WisiToken.Semantic_State.Semantic_State;
     Tree         : in out WisiToken.Syntax_Trees.Branched.Tree;
     Tree_Nonterm : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tree_Tokens  : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : WisiToken.Wisi_Runtime.Parse_Data_Type renames WisiToken.Wisi_Runtime.Parse_Data_Type (User_Data);
   begin
      case Parse_Data.Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, State, Tree, Tree_Nonterm, Tree_Tokens, ((1, Misc), (2, Misc)));
      when Face =>
         null;
      when Indent =>
         null;
      end case;
   end parameter_list_0;

   procedure parameter_list_2
    (User_Data    : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     State        : in out WisiToken.Semantic_State.Semantic_State;
     Tree         : in out WisiToken.Syntax_Trees.Branched.Tree;
     Tree_Nonterm : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tree_Tokens  : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : WisiToken.Wisi_Runtime.Parse_Data_Type renames WisiToken.Wisi_Runtime.Parse_Data_Type (User_Data);
   begin
      case Parse_Data.Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, State, Tree, Tree_Nonterm, Tree_Tokens, (1 => (2, Misc)));
      when Face =>
         null;
      when Indent =>
         Indent_Action_0 (Parse_Data, State, Tree, Tree_Nonterm, Tree_Tokens, ((False, (Simple, (Int, 0))), (False, (Simple, (Anchored_0, 1, 1))), (False, (Simple, (Anchored_0, 1, 0)))));
      end case;
   end parameter_list_2;

   procedure subprogram_0
    (User_Data    : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     State        : in out WisiToken.Semantic_State.Semantic_State;
     Tree         : in out WisiToken.Syntax_Trees.Branched.Tree;
     Tree_Nonterm : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tree_Tokens  : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : WisiToken.Wisi_Runtime.Parse_Data_Type renames WisiToken.Wisi_Runtime.Parse_Data_Type (User_Data);
   begin
      case Parse_Data.Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, State, Tree, Tree_Nonterm, Tree_Tokens, ((1, Statement_Start), (2, Name), (3, Misc), (4, Motion), (5, Statement_End)));
         Containing_Action (Parse_Data, State, Tree, Tree_Nonterm, Tree_Tokens, 1, 2);
         Containing_Action (Parse_Data, State, Tree, Tree_Nonterm, Tree_Tokens, 1, 4);
         Motion_Action (Parse_Data, State, Tree, Tree_Nonterm, Tree_Tokens, ((1, Empty_IDs) & (4, 5 & 11) & (5, Empty_IDs)));
      when Face =>
         Face_Apply_Action (Parse_Data, State, Tree, Tree_Nonterm, Tree_Tokens, ((1, 3, 0), (2, 1, 2)));
      when Indent =>
         Indent_Action_0 (Parse_Data, State, Tree, Tree_Nonterm, Tree_Tokens, ((False, (Simple, (Int, 0))), (True, (Simple, (Int, Subp_Indent_Broken)), (Simple, (Int, Subp_Indent_Broken))), (False, (Simple, (Language, Function_1'Access, +2 * Subp_Indent_Broken))), (False, (Simple, (Int, 0))), (False, (Simple, (Int, 0)))));
      end case;
   end subprogram_0;

   procedure subprogram_1
    (User_Data    : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     State        : in out WisiToken.Semantic_State.Semantic_State;
     Tree         : in out WisiToken.Syntax_Trees.Branched.Tree;
     Tree_Nonterm : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tree_Tokens  : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : WisiToken.Wisi_Runtime.Parse_Data_Type renames WisiToken.Wisi_Runtime.Parse_Data_Type (User_Data);
   begin
      case Parse_Data.Parse_Action is
      when Navigate =>
         Statement_Action (Parse_Data, State, Tree, Tree_Nonterm, Tree_Tokens, ((1, Statement_Start), (2, Name), (6, Statement_End)));
         Containing_Action (Parse_Data, State, Tree, Tree_Nonterm, Tree_Tokens, 1, 2);
      when Face =>
         Face_Apply_Action (Parse_Data, State, Tree, Tree_Nonterm, Tree_Tokens, ((1, 3, 0), (2, 1, 2)));
      when Indent =>
         Indent_Action_0 (Parse_Data, State, Tree, Tree_Nonterm, Tree_Tokens, ((False, (Simple, (Int, 0))), (False, (Simple, (Int, Subp_Indent_Broken))), (False, (Simple, (Int, Subp_Indent_Broken))), (False, (Simple, (Int, 0))), (False, (Simple, (Int, 0))), (False, (Simple, (Int, 0)))));
      end case;
   end subprogram_1;

   function subprogram_1_check
    (Lexer   : in     WisiToken.Lexer.Handle;
     Nonterm : in out WisiToken.Recover_Token;
     Tokens  : in     WisiToken.Recover_Token_Array)
    return WisiToken.Semantic_Checks.Check_Status
   is
      pragma Unreferenced (Nonterm);
   begin
      return Match_Names (Lexer, Tokens, 2, 5 nil, False);
   end subprogram_1_check;

   procedure subtype_0
    (User_Data    : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     State        : in out WisiToken.Semantic_State.Semantic_State;
     Tree         : in out WisiToken.Syntax_Trees.Branched.Tree;
     Tree_Nonterm : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tree_Tokens  : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : WisiToken.Wisi_Runtime.Parse_Data_Type renames WisiToken.Wisi_Runtime.Parse_Data_Type (User_Data);
   begin
      case Parse_Data.Parse_Action is
      when Navigate =>
         null;
      when Face =>
         Face_Apply_Action (Parse_Data, State, Tree, Tree_Nonterm, Tree_Tokens, (1 => (1, 1, 2)));
      when Indent =>
         null;
      end case;
   end subtype_0;

   procedure use_clause_0
    (User_Data    : in out WisiToken.Syntax_Trees.User_Data_Type'Class;
     State        : in out WisiToken.Semantic_State.Semantic_State;
     Tree         : in out WisiToken.Syntax_Trees.Branched.Tree;
     Tree_Nonterm : in     WisiToken.Syntax_Trees.Valid_Node_Index;
     Tree_Tokens  : in     WisiToken.Syntax_Trees.Valid_Node_Index_Array)
   is
      Parse_Data : WisiToken.Wisi_Runtime.Parse_Data_Type renames WisiToken.Wisi_Runtime.Parse_Data_Type (User_Data);
   begin
      case Parse_Data.Parse_Action is
      when Navigate =>
         null;
      when Face =>
         Face_Apply_List_Action (Parse_Data, State, Tree, Tree_Nonterm, Tree_Tokens, (1 => (2, 1, 2)));
      when Indent =>
         Indent_Action_0 (Parse_Data, State, Tree, Tree_Nonterm, Tree_Tokens, ((False, (Simple, (Int, 0))), (False, (Simple, (Int, Subp_Indent_Broken))), (False, (Simple, (Int, 0)))));
      end case;
   end use_clause_0;

   procedure Create_Parser
     (Parser               :    out WisiToken.LR.Parser.Parser;
      Algorithm            : in     WisiToken.Parser_Algorithm_Type;
      Trace                : not null access WisiToken.Trace'Class;
      Semantic_Check_Fixes : in     WisiToken.LR.Semantic_Check_Fixes_Access)
   is
      use WisiToken.LR;
      use all type WisiToken.Parser_Algorithm_Type;
      Table : constant Parse_Table_Ptr := new Parse_Table
        (State_First       => 0,
         State_Last        => 44,
         First_Terminal    => Descriptor.First_Terminal,
         Last_Terminal     => Descriptor.Last_Terminal,
         First_Nonterminal => Descriptor.First_Nonterminal,
         Last_Nonterminal  => Descriptor.Last_Nonterminal);
      pragma Unreferenced (Algorithm);
   begin
      Table.McKenzie_Param :=
        (First_Terminal    => 3,
         Last_Terminal     => 19,
         First_Nonterminal => 20,
         Last_Nonterminal  => 31,
         Insert =>
           (0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0),
         Delete =>
           (0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0),
         Push_Back =>
           (0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0),
         Undo_Reduce =>
           (0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0),
         Cost_Limit  => 2147483647,
         Check_Limit => 2147483647);


      Table.Productions.Set_Length (20);
      Set_Token_Sequence (Table.Productions (1), (22, 19));
      Set_Token_Sequence (Table.Productions (2), (3, 4));
      Set_Token_Sequence (Table.Productions (3), (3, 25, 5, 11, 26, 4));
      Set_Token_Sequence (Table.Productions (4), (1 => 23));
      Set_Token_Sequence (Table.Productions (5), (1 => 24));
      Set_Token_Sequence (Table.Productions (6), (23, 24));
      Set_Token_Sequence (Table.Productions (7), (1 => 29));
      Set_Token_Sequence (Table.Productions (8), (1 => 31));
      Set_Token_Sequence (Table.Productions (9), (6, 18, 8, 30, 9, 17));
      Set_Token_Sequence (Table.Productions (10), (1 => 18));
      Set_Token_Sequence (Table.Productions (11), (26, 16, 18));
      Set_Token_Sequence (Table.Productions (12), (1 => 26));
      Set_Token_Sequence (Table.Productions (13), (27, 15, 26));
      Set_Token_Sequence (Table.Productions (14), (13, 14));
      Set_Token_Sequence (Table.Productions (15), (1 .. 0 => <>));
      Set_Token_Sequence (Table.Productions (16), (13, 18, 14));
      Set_Token_Sequence (Table.Productions (17), (7, 26, 28, 21, 17));
      Set_Token_Sequence (Table.Productions (18), (10, 26, 28, 4, 26, 17));
      Set_Token_Sequence (Table.Productions (19), (1 => 26));
      Set_Token_Sequence (Table.Productions (20), (12, 27, 17));

      Table.Terminal_Sequences.Set_First (20);
      Table.Terminal_Sequences.Set_Last (31);
      Set_Token_Sequence (Table.Terminal_Sequences (20), (12, 18, 17, 19));
      Set_Token_Sequence (Table.Terminal_Sequences (21), (3, 4));
      Set_Token_Sequence (Table.Terminal_Sequences (22), (12, 18, 17));
      Set_Token_Sequence (Table.Terminal_Sequences (23), (12, 18, 17));
      Set_Token_Sequence (Table.Terminal_Sequences (24), (12, 18, 17));
      Set_Token_Sequence (Table.Terminal_Sequences (25), (6, 18, 8, 18, 9, 17));
      Set_Token_Sequence (Table.Terminal_Sequences (26), (1 => 18));
      Set_Token_Sequence (Table.Terminal_Sequences (27), (1 => 18));
      Set_Token_Sequence (Table.Terminal_Sequences (28), (1 .. 0 => <>));
      Set_Token_Sequence (Table.Terminal_Sequences (29), (10, 18, 4, 18, 17));
      Set_Token_Sequence (Table.Terminal_Sequences (30), (1 => 18));
      Set_Token_Sequence (Table.Terminal_Sequences (31), (12, 18, 17));

      Add_Action (Table.States (0), 7, 1);
      Add_Action (Table.States (0), 10, 2);
      Add_Action (Table.States (0), 12, 3);
      Add_Error (Table.States (0));
      Add_Goto (Table.States (0), 22, 4);
      Add_Goto (Table.States (0), 23, 5);
      Add_Goto (Table.States (0), 24, 6);
      Add_Goto (Table.States (0), 29, 7);
      Add_Goto (Table.States (0), 31, 8);
      Add_Action (Table.States (1), 18, 10);
      Add_Error (Table.States (1));
      Add_Goto (Table.States (1), 26, 14);
      Add_Action (Table.States (2), 18, 10);
      Add_Error (Table.States (2));
      Add_Goto (Table.States (2), 26, 13);
      Add_Action (Table.States (3), 18, 10);
      Add_Error (Table.States (3));
      Add_Goto (Table.States (3), 26, 11);
      Add_Goto (Table.States (3), 27, 12);
      Add_Action (Table.States (4), 19, Accept_It, 1, 20, 1, 0, null, null);
      Add_Error (Table.States (4));
      Add_Action (Table.States (5), 7, 1);
      Add_Action (Table.States (5), 10, 2);
      Add_Action (Table.States (5), 12, 3);
      Add_Action (Table.States (5), 19, Reduce, 4, 22, 1, 0, null, null);
      Add_Error (Table.States (5));
      Add_Goto (Table.States (5), 24, 9);
      Add_Goto (Table.States (5), 29, 7);
      Add_Goto (Table.States (5), 31, 8);
      Add_Action (Table.States (6), 7, Reduce, 5, 23, 1, 0, null, null);
      Add_Action (Table.States (6), 10, Reduce, 5, 23, 1, 0, null, null);
      Add_Action (Table.States (6), 12, Reduce, 5, 23, 1, 0, null, null);
      Add_Action (Table.States (6), 19, Reduce, 5, 23, 1, 0, null, null);
      Add_Error (Table.States (6));
      Add_Action (Table.States (7), 7, Reduce, 7, 24, 1, 0, null, null);
      Add_Action (Table.States (7), 10, Reduce, 7, 24, 1, 0, null, null);
      Add_Action (Table.States (7), 12, Reduce, 7, 24, 1, 0, null, null);
      Add_Action (Table.States (7), 19, Reduce, 7, 24, 1, 0, null, null);
      Add_Error (Table.States (7));
      Add_Action (Table.States (8), 7, Reduce, 8, 24, 1, 1, null, null);
      Add_Action (Table.States (8), 10, Reduce, 8, 24, 1, 1, null, null);
      Add_Action (Table.States (8), 12, Reduce, 8, 24, 1, 1, null, null);
      Add_Action (Table.States (8), 19, Reduce, 8, 24, 1, 1, null, null);
      Add_Error (Table.States (8));
      Add_Action (Table.States (9), 7, Reduce, 6, 23, 2, 1, null, null);
      Add_Action (Table.States (9), 10, Reduce, 6, 23, 2, 1, null, null);
      Add_Action (Table.States (9), 12, Reduce, 6, 23, 2, 1, null, null);
      Add_Action (Table.States (9), 19, Reduce, 6, 23, 2, 1, null, null);
      Add_Error (Table.States (9));
      Add_Action (Table.States (10), 3, Reduce, 10, 26, 1, 0, name_0'Access, name_0_check'Access);
      Add_Action (Table.States (10), 4, Reduce, 10, 26, 1, 0, name_0'Access, name_0_check'Access);
      Add_Action (Table.States (10), 9, Reduce, 10, 26, 1, 0, name_0'Access, name_0_check'Access);
      Add_Action (Table.States (10), 13, Reduce, 10, 26, 1, 0, name_0'Access, name_0_check'Access);
      Add_Action (Table.States (10), 15, Reduce, 10, 26, 1, 0, name_0'Access, name_0_check'Access);
      Add_Action (Table.States (10), 16, Reduce, 10, 26, 1, 0, name_0'Access, name_0_check'Access);
      Add_Action (Table.States (10), 17, Reduce, 10, 26, 1, 0, name_0'Access, name_0_check'Access);
      Add_Error (Table.States (10));
      Add_Action (Table.States (11), 15, Reduce, 12, 27, 1, 0, null, null);
      Add_Action (Table.States (11), 16, 16);
      Add_Action (Table.States (11), 17, Reduce, 12, 27, 1, 0, null, null);
      Add_Error (Table.States (11));
      Add_Action (Table.States (12), 15, 19);
      Add_Action (Table.States (12), 17, 20);
      Add_Error (Table.States (12));
      Add_Action (Table.States (13), 4, Reduce, 15, 28, 0, 1, null, null);
      Add_Action (Table.States (13), 13, 15);
      Add_Action (Table.States (13), 16, 16);
      Add_Error (Table.States (13));
      Add_Goto (Table.States (13), 28, 18);
      Add_Action (Table.States (14), 3, Reduce, 15, 28, 0, 1, null, null);
      Add_Action (Table.States (14), 13, 15);
      Add_Action (Table.States (14), 16, 16);
      Add_Error (Table.States (14));
      Add_Goto (Table.States (14), 28, 17);
      Add_Action (Table.States (15), 14, 26);
      Add_Action (Table.States (15), 18, 27);
      Add_Error (Table.States (15));
      Add_Action (Table.States (16), 18, 25);
      Add_Error (Table.States (16));
      Add_Action (Table.States (17), 3, 23);
      Add_Error (Table.States (17));
      Add_Goto (Table.States (17), 21, 24);
      Add_Action (Table.States (18), 4, 22);
      Add_Error (Table.States (18));
      Add_Action (Table.States (19), 18, 10);
      Add_Error (Table.States (19));
      Add_Goto (Table.States (19), 26, 21);
      Add_Action (Table.States (20), 7, Reduce, 20, 31, 3, 0, use_clause_0'Access, null);
      Add_Action (Table.States (20), 10, Reduce, 20, 31, 3, 0, use_clause_0'Access, null);
      Add_Action (Table.States (20), 12, Reduce, 20, 31, 3, 0, use_clause_0'Access, null);
      Add_Action (Table.States (20), 19, Reduce, 20, 31, 3, 0, use_clause_0'Access, null);
      Add_Error (Table.States (20));
      Add_Action (Table.States (21), 15, Reduce, 13, 27, 3, 1, null, null);
      Add_Action (Table.States (21), 16, 16);
      Add_Action (Table.States (21), 17, Reduce, 13, 27, 3, 1, null, null);
      Add_Error (Table.States (21));
      Add_Action (Table.States (22), 18, 10);
      Add_Error (Table.States (22));
      Add_Goto (Table.States (22), 26, 33);
      Add_Action (Table.States (23), 4, 30);
      Add_Action (Table.States (23), 6, 31);
      Add_Error (Table.States (23));
      Add_Goto (Table.States (23), 25, 32);
      Add_Action (Table.States (24), 17, 29);
      Add_Error (Table.States (24));
      Add_Action (Table.States (25), 3, Reduce, 11, 26, 3, 1, name_1'Access, name_1_check'Access);
      Add_Action (Table.States (25), 4, Reduce, 11, 26, 3, 1, name_1'Access, name_1_check'Access);
      Add_Action (Table.States (25), 9, Reduce, 11, 26, 3, 1, name_1'Access, name_1_check'Access);
      Add_Action (Table.States (25), 13, Reduce, 11, 26, 3, 1, name_1'Access, name_1_check'Access);
      Add_Action (Table.States (25), 15, Reduce, 11, 26, 3, 1, name_1'Access, name_1_check'Access);
      Add_Action (Table.States (25), 16, Reduce, 11, 26, 3, 1, name_1'Access, name_1_check'Access);
      Add_Action (Table.States (25), 17, Reduce, 11, 26, 3, 1, name_1'Access, name_1_check'Access);
      Add_Error (Table.States (25));
      Add_Action (Table.States (26), 3, Reduce, 14, 28, 2, 0, parameter_list_0'Access, null);
      Add_Action (Table.States (26), 4, Reduce, 14, 28, 2, 0, parameter_list_0'Access, null);
      Add_Error (Table.States (26));
      Add_Action (Table.States (27), 14, 28);
      Add_Error (Table.States (27));
      Add_Action (Table.States (28), 3, Reduce, 16, 28, 3, 2, parameter_list_2'Access, null);
      Add_Action (Table.States (28), 4, Reduce, 16, 28, 3, 2, parameter_list_2'Access, null);
      Add_Error (Table.States (28));
      Add_Action (Table.States (29), 7, Reduce, 17, 29, 5, 0, subprogram_0'Access, null);
      Add_Action (Table.States (29), 10, Reduce, 17, 29, 5, 0, subprogram_0'Access, null);
      Add_Action (Table.States (29), 12, Reduce, 17, 29, 5, 0, subprogram_0'Access, null);
      Add_Action (Table.States (29), 19, Reduce, 17, 29, 5, 0, subprogram_0'Access, null);
      Add_Error (Table.States (29));
      Add_Action (Table.States (30), 17, Reduce, 2, 21, 2, 0, null, null);
      Add_Error (Table.States (30));
      Add_Action (Table.States (31), 18, 36);
      Add_Error (Table.States (31));
      Add_Action (Table.States (32), 5, 35);
      Add_Error (Table.States (32));
      Add_Action (Table.States (33), 16, 16);
      Add_Action (Table.States (33), 17, 34);
      Add_Error (Table.States (33));
      Add_Action (Table.States (34), 7, Reduce, 18, 29, 6, 1, subprogram_1'Access, subprogram_1_check'Access);
      Add_Action (Table.States (34), 10, Reduce, 18, 29, 6, 1, subprogram_1'Access, subprogram_1_check'Access);
      Add_Action (Table.States (34), 12, Reduce, 18, 29, 6, 1, subprogram_1'Access, subprogram_1_check'Access);
      Add_Action (Table.States (34), 19, Reduce, 18, 29, 6, 1, subprogram_1'Access, subprogram_1_check'Access);
      Add_Error (Table.States (34));
      Add_Action (Table.States (35), 11, 38);
      Add_Error (Table.States (35));
      Add_Action (Table.States (36), 8, 37);
      Add_Error (Table.States (36));
      Add_Action (Table.States (37), 18, 10);
      Add_Error (Table.States (37));
      Add_Goto (Table.States (37), 26, 40);
      Add_Goto (Table.States (37), 30, 41);
      Add_Action (Table.States (38), 18, 10);
      Add_Error (Table.States (38));
      Add_Goto (Table.States (38), 26, 39);
      Add_Action (Table.States (39), 4, 43);
      Add_Action (Table.States (39), 16, 16);
      Add_Error (Table.States (39));
      Add_Action (Table.States (40), 9, Reduce, 19, 30, 1, 0, subtype_0'Access, null);
      Add_Action (Table.States (40), 16, 16);
      Add_Error (Table.States (40));
      Add_Action (Table.States (41), 9, 42);
      Add_Error (Table.States (41));
      Add_Action (Table.States (42), 17, 44);
      Add_Error (Table.States (42));
      Add_Action (Table.States (43), 17, Reduce, 3, 21, 6, 1, block_1'Access, null);
      Add_Error (Table.States (43));
      Add_Action (Table.States (44), 5, Reduce, 9, 25, 6, 0, loop_statement_0'Access, null);
      Add_Error (Table.States (44));

      WisiToken.LR.Parser.New_Parser
        (Parser,
         Trace,
         Lexer.New_Lexer (Trace),
         Table,
         Semantic_Check_Fixes,
         Max_Parallel         => 15,
         First_Parser_Label   => 0,
         Terminate_Same_State => True);
   end Create_Parser;
end Subprograms_Process;
