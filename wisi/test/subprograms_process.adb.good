--  generated by WisiToken Wisi from ../wisi/test/subprograms.wy
--  with command line: wisi-generate.exe -v 1 --output_language Ada_Emacs --lexer re2c --interface process
--  ../wisi/test/subprograms.wy
--
with WisiToken.Lexer.re2c;
with WisiToken.Wisi_Runtime; use WisiToken.Wisi_Runtime;
with WisiToken.Token;
with subprograms_re2c_c;
package body Subprograms_Process is

   use all type Motion_Param_Array;

   package Lexer is new WisiToken.Lexer.re2c
     (subprograms_re2c_c.New_Lexer,
      subprograms_re2c_c.Free_Lexer,
      subprograms_re2c_c.Reset_Lexer,
      subprograms_re2c_c.Next_Token);

   procedure subprogram_0
    (Nonterm : in WisiToken.Augmented_Token'Class;
     Index   : in Natural;
     Source  : in WisiToken.Augmented_Token_Array)
   is
      pragma Unreferenced (Index);
   begin
      case Buffer_Data.Parse_Action is
      when Navigate =>
         Statement_Action (Buffer_Data, Nonterm, Source, ((1, Name), (2, Misc)));
         Containing_Action (Buffer_Data, Nonterm, Source, 1, 2);
         Motion_Action (Buffer_Data, Nonterm, Source, ((0, 1, Empty_IDs) & (2, 4, (6, 11)) & (0, 5, Empty_IDs)));
      when Face =>
         Face_Apply_Action (Buffer_Data, Nonterm, Source, ((1, 3, 1), (3, 3, 2)));
      when Indent =>
         Indent_Action (Buffer_Data, Nonterm, Source, ((False, 0), (False, Ada_Indent_Broken), (True, 2, Ada_Indent_Broken)));
      end case;
   end subprogram_0;

   procedure subprogram_1
    (Nonterm : in WisiToken.Augmented_Token'Class;
     Index   : in Natural;
     Source  : in WisiToken.Augmented_Token_Array)
   is
      pragma Unreferenced (Index);
   begin
      case Buffer_Data.Parse_Action is
      when Navigate =>
         Statement_Action (Buffer_Data, Nonterm, Source, ((1, Name), (2, Misc)));
      when Face =>
         Face_Apply_Action (Buffer_Data, Nonterm, Source, (1 => (3, 3, 2)));
      when Indent =>
         Indent_Action (Buffer_Data, Nonterm, Source, ((False, 0), (False, Ada_Indent_Broken), (False, Anchored_0 (3, Ada_Indent_Broken))));
      end case;
   end subprogram_1;

   procedure parameter_list_0
    (Nonterm : in WisiToken.Augmented_Token'Class;
     Index   : in Natural;
     Source  : in WisiToken.Augmented_Token_Array)
   is
      pragma Unreferenced (Index);
   begin
      case Buffer_Data.Parse_Action is
      when Navigate =>
         Statement_Action (Buffer_Data, Nonterm, Source, ((1, Open_Paren), (2, Close_Paren)));
      when Face =>
         null;
      when Indent =>
         null;
      end case;
   end parameter_list_0;

   procedure parameter_list_2
    (Nonterm : in WisiToken.Augmented_Token'Class;
     Index   : in Natural;
     Source  : in WisiToken.Augmented_Token_Array)
   is
      pragma Unreferenced (Index);
   begin
      case Buffer_Data.Parse_Action is
      when Navigate =>
         Statement_Action (Buffer_Data, Nonterm, Source, ((1, Open_Paren), (3, Close_Paren)));
      when Face =>
         null;
      when Indent =>
         null;
      end case;
   end parameter_list_2;

   procedure Create_Parser
     (Parser    :    out WisiToken.Parser.LR.Parser.Instance;
      Algorithm : in     WisiToken.Parser_Algorithm_Type)
   is
      use WisiToken.Parser.LR;
      use all type WisiToken.Parser_Algorithm_Type;
      Table : constant Parse_Table_Ptr := new Parse_Table
        (State_First       => 0,
         State_Last        => 23,
         First_Terminal    => Descriptor.First_Terminal,
         Last_Terminal     => Descriptor.Last_Terminal,
         First_Nonterminal => Descriptor.First_Nonterminal,
         Last_Nonterminal  => Descriptor.Last_Nonterminal);
      pragma Unreferenced (Algorithm);
   begin
      Table.McKenzie :=
        (First_Terminal    => 4,
         Last_Terminal     => 14,
         First_Nonterminal => 15,
         Last_Nonterminal  => 21,
         Insert =>
           (0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0),
         Delete =>
           (0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0),
         Cost_Limit  => 2147483647,
         Check_Limit => 2147483647,
         Patterns    => WisiToken.Parser.LR.Patterns.Empty_List);

      Table.Follow :=
        (16 =>
           (12 => True,
             others => False),
         17 =>
           (14 => True,
             others => False),
         18 =>
           (7 |
             9 |
             14 => True,
             others => False),
         19 =>
           (7 |
             9 |
             14 => True,
             others => False),
         20 =>
           (7 |
             9 |
             14 => True,
             others => False),
         21 =>
           (13 => True,
             others => False),
         others => (others => False));

      Add_Action (Table.States (0), 7, 1);
      Add_Action (Table.States (0), 9, 2);
      Add_Error (Table.States (0));
      Add_Goto (Table.States (0), 17, 3);
      Add_Goto (Table.States (0), 18, 4);
      Add_Goto (Table.States (0), 19, 5);
      Add_Goto (Table.States (0), 20, 6);
      Add_Action (Table.States (1), 8, 8);
      Add_Action (Table.States (1), 13, Reduce, 21, 1,  0, null);
      Add_Error (Table.States (1));
      Add_Goto (Table.States (1), 21, 10);
      Add_Action (Table.States (2), 8, 8);
      Add_Action (Table.States (2), 13, Reduce, 21, 1,  0, null);
      Add_Error (Table.States (2));
      Add_Goto (Table.States (2), 21, 9);
      Add_Action (Table.States (3), 14, Accept_It, 15, 0,  1, null);
      Add_Error (Table.States (3));
      Add_Action (Table.States (4), 7, 1);
      Add_Action (Table.States (4), 9, 2);
      Add_Action (Table.States (4), 14, Reduce, 17, 0,  1, null);
      Add_Error (Table.States (4));
      Add_Goto (Table.States (4), 19, 7);
      Add_Goto (Table.States (4), 20, 6);
      Add_Action (Table.States (5), 7, Reduce, 18, 0,  1, null);
      Add_Action (Table.States (5), 9, Reduce, 18, 0,  1, null);
      Add_Action (Table.States (5), 14, Reduce, 18, 0,  1, null);
      Add_Error (Table.States (5));
      Add_Action (Table.States (6), 7, Reduce, 19, 0,  1, null);
      Add_Action (Table.States (6), 9, Reduce, 19, 0,  1, null);
      Add_Action (Table.States (6), 14, Reduce, 19, 0,  1, null);
      Add_Error (Table.States (6));
      Add_Action (Table.States (7), 7, Reduce, 18, 1,  2, null);
      Add_Action (Table.States (7), 9, Reduce, 18, 1,  2, null);
      Add_Action (Table.States (7), 14, Reduce, 18, 1,  2, null);
      Add_Error (Table.States (7));
      Add_Action (Table.States (8), 10, 13);
      Add_Action (Table.States (8), 13, 14);
      Add_Error (Table.States (8));
      Add_Action (Table.States (9), 13, 12);
      Add_Error (Table.States (9));
      Add_Action (Table.States (10), 13, 11);
      Add_Error (Table.States (10));
      Add_Action (Table.States (11), 4, 16);
      Add_Error (Table.States (11));
      Add_Goto (Table.States (11), 16, 17);
      Add_Action (Table.States (12), 7, Reduce, 20, 1,  3, subprogram_1'Access);
      Add_Action (Table.States (12), 9, Reduce, 20, 1,  3, subprogram_1'Access);
      Add_Action (Table.States (12), 14, Reduce, 20, 1,  3, subprogram_1'Access);
      Add_Error (Table.States (12));
      Add_Action (Table.States (13), 13, Reduce, 21, 0,  2, parameter_list_0'Access);
      Add_Error (Table.States (13));
      Add_Action (Table.States (14), 10, 15);
      Add_Error (Table.States (14));
      Add_Action (Table.States (15), 13, Reduce, 21, 2,  3, parameter_list_2'Access);
      Add_Error (Table.States (15));
      Add_Action (Table.States (16), 5, 19);
      Add_Action (Table.States (16), 6, 20);
      Add_Error (Table.States (16));
      Add_Action (Table.States (17), 12, 18);
      Add_Error (Table.States (17));
      Add_Action (Table.States (18), 7, Reduce, 20, 0,  5, subprogram_0'Access);
      Add_Action (Table.States (18), 9, Reduce, 20, 0,  5, subprogram_0'Access);
      Add_Action (Table.States (18), 14, Reduce, 20, 0,  5, subprogram_0'Access);
      Add_Error (Table.States (18));
      Add_Action (Table.States (19), 12, Reduce, 16, 0,  2, null);
      Add_Error (Table.States (19));
      Add_Action (Table.States (20), 11, 21);
      Add_Error (Table.States (20));
      Add_Action (Table.States (21), 13, 22);
      Add_Error (Table.States (21));
      Add_Action (Table.States (22), 5, 23);
      Add_Error (Table.States (22));
      Add_Action (Table.States (23), 12, Reduce, 16, 1,  5, null);
      Add_Error (Table.States (23));

      WisiToken.Parser.LR.Parser.New_Parser
        (Parser,
         Lexer.New_Lexer (Trace'Access, 2),
         Table,
         WisiToken.Token.Semantic_State'Class (State)'Access,
         Max_Parallel            => 15,
         First_Parser_Label      => 0,
         Terminate_Same_State    => True);
   end Create_Parser;

end Subprograms_Process;
