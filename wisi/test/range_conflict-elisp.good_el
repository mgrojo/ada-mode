;;; range_conflict-elisp.el --- Generated parser support file  -*- lexical-binding:t -*-

;; Copyright (C) 2013 Stephen Leake.  All Rights Reserved.

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3, or (at
;; your option) any later version.
;;
;; This software is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

(require 'wisi)
(require 'semantic/lex)
(require 'wisi-compile)

(defconst range_conflict-elisp-keyword-table
  (semantic-lex-make-keyword-table
   '(
    ("in" . IN)
    ("(" . LEFT_PAREN)
    ("range" . RANGE)
    (")" . RIGHT_PAREN)
    )
   nil)
  "Table of language keywords.")

(defconst range_conflict-elisp-token-table
  (semantic-lex-make-type-table
   '(
     ("punctuation"
      (DOT_DOT . "..")
      (TICK . "'")
     )
     ("symbol"
      (IDENTIFIER)
     )
     ("string"
      (STRING_LITERAL)
     )
    )
   nil)
  "Table of language tokens.")

(defconst range_conflict-elisp-parse-table
   (wisi-compile-grammar
   '((DOT_DOT TICK IDENTIFIER STRING_LITERAL IN LEFT_PAREN RANGE RIGHT_PAREN )
     ((compilation_unit
       ((membership_choice range )
        (setq wisi-test-success t)))
      (membership_choice
       ((primary ))
       ((range )))
      (primary
       ((IDENTIFIER ))
       ((STRING_LITERAL ))
       ((LEFT_PAREN relation RIGHT_PAREN )))
      (range
       ((IDENTIFIER TICK RANGE LEFT_PAREN relation RIGHT_PAREN ))
       ((IDENTIFIER TICK RANGE ))
       ((primary DOT_DOT primary )))
      (relation
       ((primary IN membership_choice ))))
     [((default . error) (IDENTIFIER .  2) (STRING_LITERAL .  3) (LEFT_PAREN .  1))
      ((default . error) (IDENTIFIER .  13) (STRING_LITERAL .  3) (LEFT_PAREN .  1))
      ((default . error) (TICK .  12) (RIGHT_PAREN . (primary . 0)) (STRING_LITERAL . (primary . 0)) (IDENTIFIER . (primary . 0)) (LEFT_PAREN . (primary . 0)) (DOT_DOT . (primary . 0)))
      ((default . error) (EOF . (primary . 1)) (RIGHT_PAREN . (primary . 1)) (STRING_LITERAL . (primary . 1)) (IDENTIFIER . (primary . 1)) (LEFT_PAREN . (primary . 1)) (DOT_DOT . (primary . 1)) (IN . (primary . 1)))
      ((default . error) (EOF .  11))
      ((default . error) (IDENTIFIER .  2) (STRING_LITERAL .  3) (LEFT_PAREN .  1))
      ((default . error) (DOT_DOT .  8) (RIGHT_PAREN . (membership_choice . 0)) (LEFT_PAREN . (membership_choice . 0)) (IDENTIFIER . (membership_choice . 0)) (STRING_LITERAL . (membership_choice . 0)))
      ((default . error) (RIGHT_PAREN . (membership_choice . 1)) (LEFT_PAREN . (membership_choice . 1)) (IDENTIFIER . (membership_choice . 1)) (STRING_LITERAL . (membership_choice . 1)))
      ((default . error) (IDENTIFIER .  13) (STRING_LITERAL .  3) (LEFT_PAREN .  1))
      ((default . error) (DOT_DOT .  8))
      ((default . error) (EOF . (compilation_unit . 0)))
      ((default . error) (EOF . accept) (STRING_LITERAL . accept) (IDENTIFIER . accept) (TICK . accept) (DOT_DOT . accept) (RIGHT_PAREN . accept) (RANGE . accept) (LEFT_PAREN . accept) (IN . accept))
      ((default . error) (RANGE .  18))
      ((default . error) (EOF . (primary . 0)) (RIGHT_PAREN . (primary . 0)) (STRING_LITERAL . (primary . 0)) (IDENTIFIER . (primary . 0)) (LEFT_PAREN . (primary . 0)) (IN . (primary . 0)))
      ((default . error) (IN .  17))
      ((default . error) (RIGHT_PAREN .  16))
      ((default . error) (EOF . (primary . 2)) (RIGHT_PAREN . (primary . 2)) (STRING_LITERAL . (primary . 2)) (IDENTIFIER . (primary . 2)) (LEFT_PAREN . (primary . 2)) (DOT_DOT . (primary . 2)) (IN . (primary . 2)))
      ((default . error) (IDENTIFIER .  2) (STRING_LITERAL .  3) (LEFT_PAREN .  1))
      ((default . error) (RIGHT_PAREN . (range . 1)) (EOF . (range . 1)) (STRING_LITERAL . (range . 1)) (IDENTIFIER . (range . 1)) (LEFT_PAREN . ( 20 (range . 1))))
      ((default . error) (EOF . (range . 2)) (RIGHT_PAREN . (range . 2)) (STRING_LITERAL . (range . 2)) (IDENTIFIER . (range . 2)) (LEFT_PAREN . (range . 2)))
      ((default . error) (IDENTIFIER .  13) (STRING_LITERAL .  3) (LEFT_PAREN .  1))
      ((default . error) (RIGHT_PAREN . (relation . 0)))
      ((default . error) (RIGHT_PAREN .  23))
      ((default . error) (EOF . (range . 0)) (RIGHT_PAREN . (range . 0)) (LEFT_PAREN . (range . 0)) (IDENTIFIER . (range . 0)) (STRING_LITERAL . (range . 0)))]
     [((compilation_unit . 4)(membership_choice . 5)(primary . 6)(range . 7))
      ((primary . 14)(relation . 15))
      nil
      nil
      nil
      ((primary . 9)(range . 10))
      nil
      nil
      ((primary . 19))
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      nil
      ((membership_choice . 21)(primary . 6)(range . 7))
      nil
      nil
      ((primary . 14)(relation . 22))
      nil
      nil
      nil]))
  "Parser table.")

(provide 'range_conflict-elisp)

;; end of file
