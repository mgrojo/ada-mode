--  generated parser support file.
--  command line: wisi-generate.exe  --generate LALR ADA_EMACS re2c PROCESS ../../wisi/test/subprograms.wy
--

--  Copyright (C) 2013, 2017, 2018 Stephen Leake.  All Rights Reserved.

--  This program is free software; you can redistribute it and/or
--  modify it under the terms of the GNU General Public License as
--  published by the Free Software Foundation; either version 3, or (at
--  your option) any later version.
--
--  This software is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

with Subprograms_Process_Actions; use Subprograms_Process_Actions;
with WisiToken.Lexer.re2c;
with subprograms_re2c_c;
package body Subprograms_Process_LALR_Main is

   package Lexer is new WisiToken.Lexer.re2c
     (subprograms_re2c_c.New_Lexer,
      subprograms_re2c_c.Free_Lexer,
      subprograms_re2c_c.Reset_Lexer,
      subprograms_re2c_c.Next_Token);

   procedure Create_Parser
     (Parser                       :    out WisiToken.LR.Parser.Parser;
      Language_Fixes               : in     WisiToken.LR.Parser.Language_Fixes_Access;
      Language_Constrain_Terminals : in     WisiToken.LR.Parser.Language_Constrain_Terminals_Access;
      Language_String_ID_Set       : in     WisiToken.LR.Parser.Language_String_ID_Set_Access;
      Trace                        : not null access WisiToken.Trace'Class;
      User_Data                    : in     WisiToken.Syntax_Trees.User_Data_Access)
   is
      use WisiToken.LR;
      Table : constant Parse_Table_Ptr := new Parse_Table
        (State_First       => 0,
         State_Last        => 44,
         First_Terminal    => Trace.Descriptor.First_Terminal,
         Last_Terminal     => Trace.Descriptor.Last_Terminal,
         First_Nonterminal => Trace.Descriptor.First_Nonterminal,
         Last_Nonterminal  => Trace.Descriptor.Last_Nonterminal);
   begin
      Table.McKenzie_Param :=
        (First_Terminal    => 3,
         Last_Terminal     => 19,
         First_Nonterminal => 20,
         Last_Nonterminal  => 31,
         Insert =>
           (4, 4, 4, 4, 4, 4, 4, 4,
            4, 4, 4, 4, 4, 4, 4, 4,
            4, 4, 4, 4, 4, 4, 4, 4,
            4, 4, 4, 4, 4),
         Delete =>
           (4, 4, 4, 4, 4, 4, 4, 4,
            4, 4, 4, 4, 4, 4, 4, 4,
            4, 8, 8, 8, 8, 8, 8, 8,
            8, 8, 8, 8, 8),
         Push_Back =>
           (2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2),
         Task_Count  => 0,
         Cost_Limit  => 10,
         Check_Limit => 3,
         Check_Delta_Limit => 200,
         Enqueue_Limit => 10000);


      Table.Productions.Set_First (20);
      Table.Productions.Set_Last (31);
      Set_Production (Table.Productions (20), 20, 0);
      Set_RHS (Table.Productions (20), 0, (22, 19));
      Set_Production (Table.Productions (21), 21, 1);
      Set_RHS (Table.Productions (21), 0, (3, 25, 5, 11, 26, 4));
      Set_RHS (Table.Productions (21), 1, (3, 4));
      Set_Production (Table.Productions (22), 22, 0);
      Set_RHS (Table.Productions (22), 0, (1 => 23));
      Set_Production (Table.Productions (23), 23, 1);
      Set_RHS (Table.Productions (23), 0, (23, 24));
      Set_RHS (Table.Productions (23), 1, (1 => 24));
      Set_Production (Table.Productions (24), 24, 1);
      Set_RHS (Table.Productions (24), 0, (1 => 29));
      Set_RHS (Table.Productions (24), 1, (1 => 31));
      Set_Production (Table.Productions (25), 25, 0);
      Set_RHS (Table.Productions (25), 0, (6, 18, 8, 30, 9, 17));
      Set_Production (Table.Productions (26), 26, 1);
      Set_RHS (Table.Productions (26), 0, (26, 16, 18));
      Set_RHS (Table.Productions (26), 1, (1 => 18));
      Set_Production (Table.Productions (27), 27, 1);
      Set_RHS (Table.Productions (27), 0, (27, 15, 26));
      Set_RHS (Table.Productions (27), 1, (1 => 26));
      Set_Production (Table.Productions (28), 28, 2);
      Set_RHS (Table.Productions (28), 0, (13, 18, 14));
      Set_RHS (Table.Productions (28), 1, (13, 14));
      Set_RHS (Table.Productions (28), 2, (1 .. 0 => <>));
      Set_Production (Table.Productions (29), 29, 1);
      Set_RHS (Table.Productions (29), 0, (7, 26, 28, 21, 17));
      Set_RHS (Table.Productions (29), 1, (10, 26, 28, 4, 26, 17));
      Set_Production (Table.Productions (30), 30, 0);
      Set_RHS (Table.Productions (30), 0, (1 => 26));
      Set_Production (Table.Productions (31), 31, 0);
      Set_RHS (Table.Productions (31), 0, (12, 27, 17));

      Table.Minimal_Terminal_Sequences.Set_First (20);
      Table.Minimal_Terminal_Sequences.Set_Last (31);
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (20), (12, 18, 17, 19));
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (21), (3, 4));
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (22), (12, 18, 17));
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (23), (12, 18, 17));
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (24), (12, 18, 17));
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (25), (6, 18, 8, 18, 9, 17));
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (26), (1 => 18));
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (27), (1 => 18));
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (28), (1 .. 0 => <>));
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (29), (10, 18, 4, 18, 17));
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (30), (1 => 18));
      Set_Token_Sequence (Table.Minimal_Terminal_Sequences (31), (12, 18, 17));

      declare
         procedure Build_State_0 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (20, 0)));
            Add_Action (State, (1 => (29, 0)), 7, 1);
            Add_Action (State, (1 => (29, 1)), 10, 2);
            Add_Action (State, (1 => (31, 0)), 12, 3);
            Add_Error (State);
            Add_Goto (State, 22, 4);
            Add_Goto (State, 23, 5);
            Add_Goto (State, 24, 6);
            Add_Goto (State, 29, 7);
            Add_Goto (State, 31, 8);
         end Build_State_0;
         procedure Build_State_1 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (29, 0)));
            Add_Action (State, (1 => (26, 1)), 18, 10);
            Add_Error (State);
            Add_Goto (State, 26, 14);
         end Build_State_1;
         procedure Build_State_2 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (29, 1)));
            Add_Action (State, (1 => (26, 1)), 18, 10);
            Add_Error (State);
            Add_Goto (State, 26, 13);
         end Build_State_2;
         procedure Build_State_3 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (31, 0)));
            Add_Action (State, (1 => (26, 1)), 18, 10);
            Add_Error (State);
            Add_Goto (State, 26, 11);
            Add_Goto (State, 27, 12);
         end Build_State_3;
         procedure Build_State_4 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (20, 0)));
            Add_Action (State, 19, Accept_It, (20, 0), 1, null, null);
            Add_Error (State);
         end Build_State_4;
         procedure Build_State_5 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector (((22, 0), (23, 0)));
            Add_Action (State, (1 => (29, 0)), 7, 1);
            Add_Action (State, (1 => (29, 1)), 10, 2);
            Add_Action (State, (1 => (31, 0)), 12, 3);
            Add_Action (State, 19, Reduce, (22, 0), 1, null, null);
            Add_Error (State);
            Add_Goto (State, 24, 9);
            Add_Goto (State, 29, 7);
            Add_Goto (State, 31, 8);
         end Build_State_5;
         procedure Build_State_6 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (23, 1)));
            Add_Action (State, (7, 10, 12, 19), (23, 1), 1, null, null);
         end Build_State_6;
         procedure Build_State_7 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (24, 0)));
            Add_Action (State, (7, 10, 12, 19), (24, 0), 1, null, null);
         end Build_State_7;
         procedure Build_State_8 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (24, 1)));
            Add_Action (State, (7, 10, 12, 19), (24, 1), 1, null, null);
         end Build_State_8;
         procedure Build_State_9 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (23, 0)));
            Add_Action (State, (7, 10, 12, 19), (23, 0), 2, null, null);
         end Build_State_9;
         procedure Build_State_10 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (26, 1)));
            Add_Action (State, (3, 4, 9, 13, 15, 16, 17), (26, 1), 1, name_1'Access, name_1_check'Access);
         end Build_State_10;
         procedure Build_State_11 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector (((26, 0), (27, 1)));
            Add_Action (State, 15, Reduce, (27, 1), 1, null, null);
            Add_Action (State, (1 => (26, 0)), 16, 16);
            Add_Action (State, 17, Reduce, (27, 1), 1, null, null);
            Add_Error (State);
         end Build_State_11;
         procedure Build_State_12 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector (((27, 0), (31, 0)));
            Add_Action (State, (1 => (27, 0)), 15, 19);
            Add_Action (State, (1 => (31, 0)), 17, 20);
            Add_Error (State);
         end Build_State_12;
         procedure Build_State_13 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector (((26, 0), (29, 1)));
            Add_Action (State, 4, Reduce, (28, 2), 0, null, null);
            Add_Action (State, ((28, 0), (28, 1)), 13, 15);
            Add_Action (State, (1 => (26, 0)), 16, 16);
            Add_Error (State);
            Add_Goto (State, 28, 18);
         end Build_State_13;
         procedure Build_State_14 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector (((26, 0), (29, 0)));
            Add_Action (State, 3, Reduce, (28, 2), 0, null, null);
            Add_Action (State, ((28, 0), (28, 1)), 13, 15);
            Add_Action (State, (1 => (26, 0)), 16, 16);
            Add_Error (State);
            Add_Goto (State, 28, 17);
         end Build_State_14;
         procedure Build_State_15 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector (((28, 0), (28, 1)));
            Add_Action (State, (1 => (28, 1)), 14, 26);
            Add_Action (State, (1 => (28, 0)), 18, 27);
            Add_Error (State);
         end Build_State_15;
         procedure Build_State_16 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (26, 0)));
            Add_Action (State, (1 => (26, 0)), 18, 25);
            Add_Error (State);
         end Build_State_16;
         procedure Build_State_17 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (29, 0)));
            Add_Action (State, ((21, 0), (21, 1)), 3, 23);
            Add_Error (State);
            Add_Goto (State, 21, 24);
         end Build_State_17;
         procedure Build_State_18 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (29, 1)));
            Add_Action (State, (1 => (29, 1)), 4, 22);
            Add_Error (State);
         end Build_State_18;
         procedure Build_State_19 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (27, 0)));
            Add_Action (State, (1 => (26, 1)), 18, 10);
            Add_Error (State);
            Add_Goto (State, 26, 21);
         end Build_State_19;
         procedure Build_State_20 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (31, 0)));
            Add_Action (State, (7, 10, 12, 19), (31, 0), 3, use_clause_0'Access, null);
         end Build_State_20;
         procedure Build_State_21 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector (((26, 0), (27, 0)));
            Add_Action (State, 15, Reduce, (27, 0), 3, null, null);
            Add_Action (State, (1 => (26, 0)), 16, 16);
            Add_Action (State, 17, Reduce, (27, 0), 3, null, null);
            Add_Error (State);
         end Build_State_21;
         procedure Build_State_22 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (29, 1)));
            Add_Action (State, (1 => (26, 1)), 18, 10);
            Add_Error (State);
            Add_Goto (State, 26, 33);
         end Build_State_22;
         procedure Build_State_23 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector (((21, 0), (21, 1)));
            Add_Action (State, (1 => (21, 1)), 4, 30);
            Add_Action (State, (1 => (25, 0)), 6, 31);
            Add_Error (State);
            Add_Goto (State, 25, 32);
         end Build_State_23;
         procedure Build_State_24 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (29, 0)));
            Add_Action (State, (1 => (29, 0)), 17, 29);
            Add_Error (State);
         end Build_State_24;
         procedure Build_State_25 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (26, 0)));
            Add_Action (State, (3, 4, 9, 13, 15, 16, 17), (26, 0), 3, name_0'Access, name_0_check'Access);
         end Build_State_25;
         procedure Build_State_26 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (28, 1)));
            Add_Action (State, (3, 4), (28, 1), 2, parameter_list_1'Access, null);
         end Build_State_26;
         procedure Build_State_27 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (28, 0)));
            Add_Action (State, (1 => (28, 0)), 14, 28);
            Add_Error (State);
         end Build_State_27;
         procedure Build_State_28 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (28, 0)));
            Add_Action (State, (3, 4), (28, 0), 3, parameter_list_0'Access, null);
         end Build_State_28;
         procedure Build_State_29 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (29, 0)));
            Add_Action (State, (7, 10, 12, 19), (29, 0), 5, subprogram_0'Access, null);
         end Build_State_29;
         procedure Build_State_30 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (21, 1)));
            Add_Action (State, (1 =>  17), (21, 1), 2, null, null);
         end Build_State_30;
         procedure Build_State_31 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (25, 0)));
            Add_Action (State, (1 => (25, 0)), 18, 36);
            Add_Error (State);
         end Build_State_31;
         procedure Build_State_32 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (21, 0)));
            Add_Action (State, (1 => (21, 0)), 5, 35);
            Add_Error (State);
         end Build_State_32;
         procedure Build_State_33 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector (((26, 0), (29, 1)));
            Add_Action (State, (1 => (26, 0)), 16, 16);
            Add_Action (State, (1 => (29, 1)), 17, 34);
            Add_Error (State);
         end Build_State_33;
         procedure Build_State_34 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (29, 1)));
            Add_Action (State, (7, 10, 12, 19), (29, 1), 6, subprogram_1'Access, null);
         end Build_State_34;
         procedure Build_State_35 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (21, 0)));
            Add_Action (State, (1 => (21, 0)), 11, 38);
            Add_Error (State);
         end Build_State_35;
         procedure Build_State_36 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (25, 0)));
            Add_Action (State, (1 => (25, 0)), 8, 37);
            Add_Error (State);
         end Build_State_36;
         procedure Build_State_37 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (25, 0)));
            Add_Action (State, (1 => (26, 1)), 18, 10);
            Add_Error (State);
            Add_Goto (State, 26, 40);
            Add_Goto (State, 30, 41);
         end Build_State_37;
         procedure Build_State_38 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (21, 0)));
            Add_Action (State, (1 => (26, 1)), 18, 10);
            Add_Error (State);
            Add_Goto (State, 26, 39);
         end Build_State_38;
         procedure Build_State_39 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector (((21, 0), (26, 0)));
            Add_Action (State, (1 => (21, 0)), 4, 43);
            Add_Action (State, (1 => (26, 0)), 16, 16);
            Add_Error (State);
         end Build_State_39;
         procedure Build_State_40 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector (((26, 0), (30, 0)));
            Add_Action (State, 9, Reduce, (30, 0), 1, subtype_0'Access, null);
            Add_Action (State, (1 => (26, 0)), 16, 16);
            Add_Error (State);
         end Build_State_40;
         procedure Build_State_41 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (25, 0)));
            Add_Action (State, (1 => (25, 0)), 9, 42);
            Add_Error (State);
         end Build_State_41;
         procedure Build_State_42 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (25, 0)));
            Add_Action (State, (1 => (25, 0)), 17, 44);
            Add_Error (State);
         end Build_State_42;
         procedure Build_State_43 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (21, 0)));
            Add_Action (State, (1 =>  17), (21, 0), 6, block_0'Access, null);
         end Build_State_43;
         procedure Build_State_44 (State : in out Parse_State)
         is begin
            State.Productions := WisiToken.To_Vector ((1 => (25, 0)));
            Add_Action (State, (1 =>  5), (25, 0), 6, loop_statement_0'Access, null);
         end Build_State_44;
      begin
         Build_State_0 (Table.States (0));
         Build_State_1 (Table.States (1));
         Build_State_2 (Table.States (2));
         Build_State_3 (Table.States (3));
         Build_State_4 (Table.States (4));
         Build_State_5 (Table.States (5));
         Build_State_6 (Table.States (6));
         Build_State_7 (Table.States (7));
         Build_State_8 (Table.States (8));
         Build_State_9 (Table.States (9));
         Build_State_10 (Table.States (10));
         Build_State_11 (Table.States (11));
         Build_State_12 (Table.States (12));
         Build_State_13 (Table.States (13));
         Build_State_14 (Table.States (14));
         Build_State_15 (Table.States (15));
         Build_State_16 (Table.States (16));
         Build_State_17 (Table.States (17));
         Build_State_18 (Table.States (18));
         Build_State_19 (Table.States (19));
         Build_State_20 (Table.States (20));
         Build_State_21 (Table.States (21));
         Build_State_22 (Table.States (22));
         Build_State_23 (Table.States (23));
         Build_State_24 (Table.States (24));
         Build_State_25 (Table.States (25));
         Build_State_26 (Table.States (26));
         Build_State_27 (Table.States (27));
         Build_State_28 (Table.States (28));
         Build_State_29 (Table.States (29));
         Build_State_30 (Table.States (30));
         Build_State_31 (Table.States (31));
         Build_State_32 (Table.States (32));
         Build_State_33 (Table.States (33));
         Build_State_34 (Table.States (34));
         Build_State_35 (Table.States (35));
         Build_State_36 (Table.States (36));
         Build_State_37 (Table.States (37));
         Build_State_38 (Table.States (38));
         Build_State_39 (Table.States (39));
         Build_State_40 (Table.States (40));
         Build_State_41 (Table.States (41));
         Build_State_42 (Table.States (42));
         Build_State_43 (Table.States (43));
         Build_State_44 (Table.States (44));
      end;

      WisiToken.LR.Parser.New_Parser
        (Parser,
         Trace,
         Lexer.New_Lexer (Trace),
         Table,
         Language_Fixes,
         Language_Constrain_Terminals,
         Language_String_ID_Set,
         User_Data,
         Max_Parallel         => 15,
         Terminate_Same_State => True);
   end Create_Parser;
end Subprograms_Process_LALR_Main;
