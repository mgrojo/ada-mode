;; generated by WisiToken Wisi from gpr_grammar.wy
;; with command line: wisi-generate.exe -v 1 --output_language Ada_Emacs --lexer Elisp --interface process
;; gpr_grammar.wy
;;
;;  Copyright (C) 2013 - 2015 Free Software Foundation, Inc.

;;  This program is free software; you can redistribute it and/or
;;  modify it under the terms of the GNU General Public License as
;;  published by the Free Software Foundation; either version 3, or (at
;;  your option) any later version.
;;
;;  This software is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;  General Public License for more details.
;;
;;  You should have received a copy of the GNU General Public License
;;  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

(require 'semantic/lex)
(require 'wisi-process-parse)

(defconst gpr_grammar-elisp-keyword-table-raw
  '(
   ("abstract" . ABSTRACT)
   ("aggregate" . AGGREGATE)
   ("case" . CASE)
   ("configuration" . CONFIGURATION)
   ("end" . END)
   ("extends" . EXTENDS)
   ("external" . EXTERNAL)
   ("external_as_list" . EXTERNAL_AS_LIST)
   ("for" . FOR)
   ("is" . IS)
   ("(" . LEFT_PAREN)
   ("library" . LIBRARY)
   ("null" . NULL)
   ("others" . OTHERS)
   ("package" . PACKAGE)
   ("project" . PROJECT)
   ("renames" . RENAMES)
   (")" . RIGHT_PAREN)
   ("standard" . STANDARD)
   ("type" . TYPE)
   ("use" . USE)
   ("when" . WHEN)
   ("with" . WITH)
   ))
(defconst gpr_grammar-elisp-token-table-raw
  '(
   ("punctuation"
    (AMPERSAND . "&")
    (COLON . ":")
    (COLON_EQUALS . ":=")
    (COMMA . ",")
    (DOT . ".")
    (EQUAL_GREATER . "=>")
    (QUOTE . "'")
    (SEMICOLON . ";")
    (VERTICAL_BAR . "|")
    )
   ("symbol"
    (IDENTIFIER . "")
    )
   ("string-double"
    (STRING_LITERAL . "")
    )
   ))
(defconst gpr_grammar-process-token-table
  (wisi-process-compile-tokens
   [WHITESPACE
    COMMENT
    ABSTRACT
    AGGREGATE
    CASE
    CONFIGURATION
    END
    EXTENDS
    EXTERNAL
    EXTERNAL_AS_LIST
    FOR
    IS
    LEFT_PAREN
    LIBRARY
    NULL
    OTHERS
    PACKAGE
    PROJECT
    RENAMES
    RIGHT_PAREN
    STANDARD
    TYPE
    USE
    WHEN
    WITH
    AMPERSAND
    COLON
    COLON_EQUALS
    COMMA
    DOT
    EQUAL_GREATER
    QUOTE
    SEMICOLON
    VERTICAL_BAR
    IDENTIFIER
    STRING_LITERAL
    Wisi_EOI
    wisitoken_accept
    aggregate_g
    attribute_declaration
    attribute_prefix
    attribute_reference
    case_statement
    case_item
    case_items
    compilation_unit
    context_clause
    context_clause_opt
    declarative_item
    declarative_items
    declarative_items_opt
    discrete_choice
    discrete_choice_list
    expression
    external_value
    identifier_opt
    name
    package_declaration
    package_spec
    package_extension
    package_renaming
    project_declaration_opt
    project_extension
    project_qualifier_opt
    simple_declarative_item
    simple_project_declaration
    string_primary
    string_list
    term
    typed_string_declaration
    with_clause
    ]))

(defconst gpr_grammar-process-action-table
  (wisi-process-compile-actions
   '(nil
     (("aggregate_g:0"
       (wisi-indent-action [0 (wisi-anchored 1 1) (wisi-anchored 1 0)]))
      )
     (("attribute_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 5 statement-end])
       (wisi-face-apply-action [2 nil font-lock-function-name-face])
       (wisi-indent-action [0 gpr-indent-broken 0 gpr-indent-broken 0])))
      ("attribute_declaration:1"
       (progn
       (wisi-statement-action [1 statement-start 8 statement-end])
       (wisi-face-apply-action [2 nil font-lock-function-name-face])
       (wisi-indent-action [0 gpr-indent-broken (1- gpr-indent-broken) gpr-indent-broken (1- gpr-indent-broken) 0
       gpr-indent-broken 0])))
      ("attribute_declaration:2"
       (progn
       (wisi-statement-action [1 statement-start 8 statement-end])
       (wisi-indent-action [0 gpr-indent-broken (1- gpr-indent-broken) gpr-indent-broken (1- gpr-indent-broken) 0
       gpr-indent-broken 0])))
      )
     nil
     nil
     (("case_statement:0"
       (progn
       (wisi-statement-action [1 statement-start 7 statement-end])
       (wisi-containing-action 1 4)
       (wisi-indent-action [0 gpr-indent-broken 0 [gpr-indent-when gpr-indent-when] 0 0 0])))
      )
     (("case_item:0"
       (progn
       (wisi-statement-action [1 motion])
       (wisi-indent-action [0 gpr-indent-broken gpr-indent gpr-indent])))
      )
     nil
     nil
     nil
     nil
     nil
     nil
     nil
     nil
     nil
     nil
     nil
     nil
     nil
     nil
     (("package_spec:0"
       (progn
       (wisi-statement-action [1 statement-start 7 statement-end])
       (wisi-containing-action 1 4)
       (wisi-face-apply-action [2 nil font-lock-function-name-face 6 nil font-lock-function-name-face])
       (wisi-indent-action [0 gpr-indent-broken 0 [gpr-indent gpr-indent] 0 0 0])))
      )
     (("package_extension:0"
       (progn
       (wisi-statement-action [1 statement-start 9 statement-end])
       (wisi-containing-action 1 6)
       (wisi-face-apply-action [2 nil font-lock-function-name-face 8 nil font-lock-function-name-face])
       (wisi-indent-action [0 gpr-indent-broken 0 gpr-indent-broken 0 [gpr-indent gpr-indent] 0 0 0])))
      )
     (("package_renaming:0"
       (progn
       (wisi-statement-action [1 statement-start 5 statement-end])
       (wisi-face-apply-action [2 nil font-lock-function-name-face 4 nil font-lock-function-name-face])))
      )
     nil
     (("project_extension:0"
       (progn
       (wisi-statement-action [1 statement-start 9 statement-end])
       (wisi-containing-action 1 6)
       (wisi-face-apply-action [2 nil font-lock-function-name-face 8 nil font-lock-function-name-face])
       (wisi-indent-action [0 gpr-indent-broken 0 gpr-indent-broken 0 [gpr-indent gpr-indent] 0 0 0])))
      )
     nil
     (("simple_declarative_item:0"
       (progn
       (wisi-statement-action [1 statement-start 4 statement-end])
       (wisi-indent-action [0 gpr-indent-broken gpr-indent-broken 0])))
      ("simple_declarative_item:1"
       (progn
       (wisi-statement-action [1 statement-start 6 statement-end])
       (wisi-indent-action [0 gpr-indent-broken gpr-indent-broken gpr-indent-broken gpr-indent-broken 0])))
      nil
      nil
      ("simple_declarative_item:4"
       (wisi-statement-action [1 statement-start 2 statement-end]))
      )
     (("simple_project_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 7 statement-end])
       (wisi-containing-action 1 4)
       (wisi-face-apply-action [2 nil font-lock-function-name-face 6 nil font-lock-function-name-face])
       (wisi-indent-action [0 gpr-indent-broken 0 [gpr-indent gpr-indent] 0 0 0])))
      )
     nil
     nil
     nil
     (("typed_string_declaration:0"
       (progn
       (wisi-statement-action [1 statement-start 5 statement-end])
       (wisi-indent-action [0 gpr-indent-broken gpr-indent-broken gpr-indent-broken 0])))
      )
     nil
     )))

(provide 'gpr_grammar-process)
