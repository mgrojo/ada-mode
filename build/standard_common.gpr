--  Abstract :
--
--  Standard settings for all of Stephe's Alire projects.
--  For non-Alire builds, use org.stephe-leake.makerules/standard_common.gpr.
--
--  Alire provides a mechanism to set custom values for
--  [build-switches] in alire.toml. That is harder to maintain than
--  this file.
--
--  Copyright (C) 2018 - 2022 Free Software Foundation, Inc.
--
--  This program is free software; you can redistribute it and/or
--  modify it under terms of the GNU General Public License as
--  published by the Free Software Foundation; either version 3, or (at
--  your option) any later version. This program is distributed in the
--  hope that it will be useful, but WITHOUT ANY WARRANTY; without even
--  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
--  PURPOSE. See the GNU General Public License for more details. You
--  should have received a copy of the GNU General Public License
--  distributed with this program; see file COPYING. If not, write to
--  the Free Software Foundation, 51 Franklin Street, Suite 500, Boston,
--  MA 02110-1335, USA.

project Standard_Common is
   for Source_Dirs use ();
   for Create_Missing_Dirs use "True";

   -- Switches for gcc

   -- "-gnatd*" generates compiler debug info; see compiler source
   -- debug.adb, in Archive/GNAT/*
   --
   --   From 20.2:
   --   -gnatdO - Output immediate error messages

   Base_Style_Checks := "-gnaty3abcefhiklnOprtx";
   Line_Length := "-gnatyM120";

   Style_Checks := (Base_Style_Checks, Line_Length);

   Common_Switches :=
     ("-gnat2022",
      "-fstack-check",
      "-g",
      "-gnatfqQ", -- f = all error messages, qQ = process semantics, generate .ali if syntax errors
      "-gnatw.d", -- warnings about tags
      "-gnatwaBCeJL"
     -- wa = most warnings
     -- wB = no warn on bad fixed values
     -- wC = no warn on conditionals
     -- we = error on warning
     -- wJ = no warn on obsolescent (including () for array indices!)
     -- wL = no warn on elaboration
     );

   --  -gnatVa causes some inline procedures to be non-inlineable;
   --  suppress that warning with -gnatwP.
   Debug_Switches := Common_Switches &
     (
      "-O0", --  we don't use -Og because that causes gdb to report incorrect results in some cases in Ada.
      "-gnatVa", -- validity checks
      "-gnateE", -- extra info in exceptions
      "-gnatwP", -- no warn on Inline
      "-gnata"  -- assertions, pre/post-conditions
     );

   --  -O3 is measurably faster than -O2 for wisitoken generate
   --  LR1. We include -fstack-check because it catches
   --  hard-to-find bugs, and the processors are so fast.
   --  -fno-var-tracking-assignments speeds compiling of large
   --  files; var tracking is only useful for debugging.
   Base_Release_Switches := Common_Switches &
     (
      "-O3",
      "-fno-var-tracking-assignments"
     );

   Inlining := ("-gnatn");

   Release_Switches := Base_Release_Switches & Inlining;

   -- No -ansi; GNAT 7.1 compiler C header files are mingw 64, which don't support -ansi
   Debug_Switches_C := ("-Wall", "-Wstrict-prototypes", "-pedantic", "-Werror", "-g", "-O0", "-funwind-tables");
   Debug_Switches_C_Non_Pedantic := ("-Wall", "-Wstrict-prototypes", "-Werror", "-g", "-O0", "-funwind-tables");
   Release_Switches_C := ("-Wall", "-Wstrict-prototypes", "-pedantic", "-Werror", "-g", "-O2", "-funwind-tables");
   Release_Switches_C_Non_Pedantic := ("-Wall", "-Wstrict-prototypes", "-Werror", "-g", "-O2", "-funwind-tables");

   --  In project files, normally use this:
   --  package Compiler is
   --  for Default_Switches ("Ada") use
   --     Standard_Common.Compiler.Release_Switches &
   --     Standard_Common.Compiler.Style_Checks;
   --  end Compiler;

end Standard_Common;
