;;; Wisent grammar for Ada
;;
;; Copyright (C) 2012 Free Software Foundation, Inc.
;;
;; Author: Stephen Leake <stephe-leake@stephe-leake.org>
;; Maintainer: Stephen Leake <stephe-leake@stephe-leake.org>
;; Created: Sept 2012
;; Keywords: syntax
;;
;; This file is part of GNU Emacs.
;;
;; GNU Emacs is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; GNU Emacs is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
;;
;;; Commentary:
;;
;; This is a Wisent grammar file for an extremely small subset of Ada,
;; just enough to let us play with indentation engine design.
;;
;; "wisent" is the European bison
;; (http://en.wikipedia.org/wiki/Wisent); the 'wisent' parser
;; generator is the Gnu parser generator implemented in Emacs elisp.
;; The input file syntax is the same as Gnu bison
;; (http://www.gnu.org/software/bison/manual/), with some additions
;; (apparently not documented anywhere). There is a semantic mailing
;; list at https://lists.sourceforge.net/lists/listinfo/cedet-semantic

%{
(require 'wisi)
%}

;; Declarations

%package ada-grammar-wy

;; token declarations

;; Ada keywords (ARM 2.9) and operators (info "(aarm2012)2.9" "*info AARM*")

%keyword ABS "abs"
%keyword ABSTRACT "abstract"
%keyword ACCESS "access"
%keyword ALIASED "aliased"
%keyword ALL "all"
%keyword AMPERSAND "&"
%keyword AND "and"
%keyword ARRAY "array"
%keyword BAR "|"
%keyword BEGIN "begin"
%keyword BODY "body"
%keyword BOX "<>"
%keyword CASE "case"
%keyword COLON ":"
%keyword COLON_EQUAL ":="
%keyword COMMA ","
%keyword CONSTANT "constant"
%keyword DELTA "delta"
%keyword DIGITS "digits"
%keyword DOT "."
%keyword DOT_DOT ".."
%keyword ELSE "else"
%keyword END "end"
%keyword EQUAL "="
%keyword EQUAL_GREATER "=>"
%keyword FUNCTION "function"
%keyword GENERIC "generic"
%keyword GREATER ">"
%keyword GREATER_EQUAL ">="
%keyword IN "in"
%keyword INTERFACE "interface"
%keyword IS "is"
%keyword LEFT_PAREN "left_paren"
%keyword LESS "<"
%keyword LESS_EQUAL "<="
%keyword LIMITED "limited"
%keyword MINUS "-"
%keyword MOD "mod"
%keyword NEW "new"
%keyword NOT "not"
%keyword NULL "null"
%keyword OF "of"
%keyword OR "or"
%keyword OTHERS "others"
%keyword OUT "out"
%keyword OVERRIDING "overriding"
%keyword PACKAGE "package"
%keyword PAREN_BOX "(<>)"
%keyword PLUS "+"
%keyword PRIVATE "private"
%keyword PROCEDURE "procedure"
%keyword PROTECTED "protected"
%keyword RANGE "range"
%keyword RECORD "record"
%keyword REM "rem"
%keyword RETURN "return"
%keyword RIGHT_PAREN "right_paren"
%keyword SEMICOLON ";"
%keyword SLASH "/"
%keyword SLASH_EQUAL "/="
%keyword STAR "*"
%keyword STAR_STAR "**"
%keyword SYNCHRONIZED "synchronized"
%keyword TAGGED "tagged"
%keyword TASK "task"
%keyword THEN "then"
%keyword TICK "'"
%keyword TYPE "type"
%keyword USE "use"
%keyword WHEN "when"
%keyword WITH "with"
%keyword XOR "xor"

%token <symbol> IDENTIFIER
%token <string> STRING_LITERAL
%token <character_literal> CHARACTER_LITERAL
%token <numeric_literal> NUMERIC_LITERAL

%start compilation_unit

%%
;;;; grammar rules
;;
;; The actions cache information in keywords that are significant for
;; indentation and motion.
;;
;; BNF copied from:
;;
;; (info "(aarm2012)Annex P" "*info Annex P*")
;; file:///C:/Projects/arm_info/org.adaic.arm_form/build/html/aarm2012/AA-P.html
;;
;; but listed in alphabetical order. Repeating constructs are
;; implemented with extra productions. Optional constructs are
;; implemented by repeated productions. Most names are simplified to
;; just "name".
;;
;; FIXME: BNF not copied until part of it is encountered in a test,
;; part not needed left commented out.

access_definition
  : NOT NULL ACCESS CONSTANT name
  | ACCESS CONSTANT name
  | ACCESS name
  | NOT NULL ACCESS PROTECTED PROCEDURE parameter_profile
  | NOT NULL ACCESS PROCEDURE parameter_profile
  | NOT NULL ACCESS PROTECTED FUNCTION parameter_and_result_profile
  | NOT NULL ACCESS FUNCTION parameter_and_result_profile
  ;

access_type_definition
  : NOT NULL ACCESS general_access_modifier subtype_indication
  | ACCESS subtype_indication ;; access_to_object_definition
  | NOT NULL ACCESS PROTECTED PROCEDURE parameter_profile;; access_to_subprogram_definition
  | NOT NULL ACCESS PROCEDURE parameter_profile
  | NOT NULL ACCESS PROTECTED FUNCTION  parameter_and_result_profile
  | NOT NULL ACCESS FUNCTION  parameter_and_result_profile
  | ACCESS PROTECTED PROCEDURE parameter_profile
  | ACCESS PROCEDURE parameter_profile
  | ACCESS PROTECTED FUNCTION  parameter_and_result_profile
  | ACCESS FUNCTION  parameter_and_result_profile
  ;

array_type_definition
  : ARRAY LEFT_PAREN index_subtype_definition_list RIGHT_PAREN OF component_definition
 ;; unconstrained_array_definition
  | ARRAY LEFT_PAREN discrete_subtype_definition_list RIGHT_PAREN OF component_definition
 ;; constrained_array_definition
  ;

association
  : name EQUAL_GREATER name
  | name EQUAL_GREATER BOX
  | OTHERS EQUAL_GREATER BOX
  ;

association_list
  : association
  | association_list COMMA association
  ;

;; basic_declarative_item merged into declaration
;; basic_declaration merged into declaration

binary_adding_operator : PLUS | MINUS | AMPERSAND ; ;; + | - | &

choice_expression
  : choice_relation
  | choice_relation_and_list
  | choice_relation_or_list
  | choice_relation_xor_list
  | choice_relation_and_then_list
  | choice_relation_or_else_list
  ;

choice_relation_and_list
  : choice_relation AND choice_relation
  | choice_relation_and_list AND choice_relation
  ;

choice_relation_or_list
  : choice_relation OR choice_relation
  | choice_relation_or_list OR choice_relation
  ;

choice_relation_xor_list
  : choice_relation XOR choice_relation
  | choice_relation_xor_list XOR choice_relation
  ;

choice_relation_and_then_list
  : choice_relation AND THEN choice_relation
  | choice_relation_and_then_list AND THEN choice_relation
  ;

choice_relation_or_else_list
  : choice_relation OR ELSE choice_relation
  | choice_relation_or_else_list OR ELSE choice_relation
  ;

choice_relation
  : simple_expression relational_operator simple_expression
  | simple_expression
  ;

compilation_unit
  : context_clause library_item
 ;;  | context_clause subunit
  ;

component_declaration
 ;; leaving out [aspect_specification]
  : identifier_list COLON component_definition COLON_EQUAL expression SEMICOLON
  | identifier_list COLON component_definition SEMICOLON
  ;

component_definition
  : ALIASED subtype_indication
  | subtype_indication
  | ALIASED access_definition
  | access_definition
  ;

component_item
  : component_declaration
 ;;  | aspect_clause
  ;

component_list
  : component_item
  | component_list component_item
  | component_list variant_part
  | NULL SEMICOLON
  ;

constraint
  : RANGE range ;; range_constraint
  ;; | digits_constraint
  ;; | delta_constraint
  ;; | index_constraint
  ;; | discriminant_constraint
  ;

context_clause
  : context_item
  | context_clause context_item
  ;

context_item : with_clause | use_clause;

;; direct_name replaced by selector_name

declaration
  ;; | abstract_subprogram_declaration
  ;; | aspect_clause
  ;; | entry_declaration
  ;; | exception_declaration
  ;; | expression_function_declaration
  : generic_declaration
  ;; | generic_instantiation
  ;; | null_procedure_declaration
  ;; | number_declaration
  | object_declaration
  ;; | package_declaration
  ;; | renaming_declaration
  | subprogram_declaration
  ;; | subtype_declaration
  | type_declaration
  ;; | use_clause
  ;

declarations
  : declaration
  | declarations declaration
  ;

derived_type_definition
  : ABSTRACT LIMITED NEW name AND interface_list WITH record_definition
  | ABSTRACT LIMITED NEW name WITH record_definition
  | ABSTRACT LIMITED NEW name
  | ABSTRACT NEW name
  | NEW name
  ;

discrete_choice_list
  : discrete_choice
  | discrete_choice_list BAR discrete_choice
  ;

discrete_choice
  : choice_expression
  | subtype_indication
  | range
  | OTHERS
  ;

discrete_subtype_definition : subtype_indication | range ;

discrete_subtype_definition_list
  : discrete_subtype_definition
  | discrete_subtype_definition_list COMMA discrete_subtype_definition
    `(wisi-cache-action 2 'list-break)
  ;

discriminant_part
  : PAREN_BOX ;; (<>) unknown_discriminant_part
  | LEFT_PAREN discriminant_specification_list RIGHT_PAREN;; known_discriminant_part
    `(wisi-cache-action 1 'open-paren 3 'close-paren)
  ;

discriminant_specification
  : identifier_list COLON NOT NULL name COLON_EQUAL expression
  | identifier_list COLON NOT NULL name
  | identifier_list COLON name
  | identifier_list COLON access_definition COLON_EQUAL expression
  | identifier_list COLON access_definition
  ;

discriminant_specification_list
  : discriminant_specification
  | discriminant_specification_list SEMICOLON discriminant_specification
    `(wisi-cache-action 2 'list-break)
  ;

enumeration_type_definition
  : LEFT_PAREN enumeration_literal_list RIGHT_PAREN
    `(wisi-cache-action 1 'open-paren 3 'close-paren)
  ;

enumeration_literal ;; enumeration_literal_specification
  : IDENTIFIER
  | CHARACTER_LITERAL
  ;

enumeration_literal_list
  : enumeration_literal
  | enumeration_literal COMMA enumeration_literal
  ;

expression
  : relation
  | relation_and_list
  | relation_and_then_list
  | relation_or_list
  | relation_or_else_list
  | relation_xor_list
  ;

factor
  : primary STAR_STAR primary
  | primary
  | ABS primary
  | NOT primary
  ;

formal_object_declaration
 ;; leaving out [aspect_specification]
  : identifier_list COLON mode NOT NULL name COLON_EQUAL expression SEMICOLON
    `(wisi-cache-action 1 'statement-start 9 'statement-end)
  | identifier_list COLON mode name COLON_EQUAL expression SEMICOLON
    `(wisi-cache-action 1 'statement-start 7 'statement-end)
  | identifier_list COLON mode name SEMICOLON
    `(wisi-cache-action 1 'statement-start 5 'statement-end)
  | identifier_list COLON mode access_definition COLON_EQUAL expression SEMICOLON
    `(wisi-cache-action 1 'statement-start 7 'statement-end)
  | identifier_list COLON mode access_definition SEMICOLON
    `(wisi-cache-action 1 'statement-start 5 'statement-end)
  ;

formal_part
  : LEFT_PAREN parameter_specification_list RIGHT_PAREN
    `(wisi-cache-action 1 'open-paren 3 'close-paren)
  ;

formal_subprogram_declaration
 ;; leaving out [aspect_specification]
  : WITH subprogram_specification IS subprogram_default SEMICOLON ;; formal_concrete_subprogram_declaration
  | WITH subprogram_specification SEMICOLON ;; formal_concrete_subprogram_declaration
  | WITH subprogram_specification IS ABSTRACT subprogram_default SEMICOLON ;; formal_abstract_subprogram_declaration
  | WITH subprogram_specification IS ABSTRACT SEMICOLON ;; formal_abstract_subprogram_declaration
  ;

formal_type_declaration
 ;; leaving out [aspect_specification]
  : TYPE IDENTIFIER discriminant_part IS formal_type_definition SEMICOLON ;; formal_complete_type_declaration
    `(wisi-cache-action 1 'open-paren 6 'close-paren)
  | TYPE IDENTIFIER IS formal_type_definition SEMICOLON
    `(wisi-cache-action 1 'open-paren 5 'close-paren)
  | TYPE IDENTIFIER discriminant_part IS TAGGED SEMICOLON ;; formal_incomplete_type_declaration
    `(wisi-cache-action 1 'open-paren 6 'close-paren)
  | TYPE IDENTIFIER discriminant_part SEMICOLON
    `(wisi-cache-action 1 'open-paren 4 'close-paren)
  | TYPE IDENTIFIER SEMICOLON
    `(wisi-cache-action 1 'open-paren 3 'close-paren)
  ;

formal_type_definition
  : formal_private_type_definition
  | formal_derived_type_definition
  | PAREN_BOX ;; formal_discrete_type_definition
  | RANGE BOX ;; formal_signed_integer_type_definition
  | MOD BOX ;; formal_modular_type_definition
  | DIGITS BOX ;; formal_floating_point_definition
  | DELTA BOX ;; formal_ordinary_fixed_point_definition
  | DIGITS BOX DELTA BOX ;; formal_decimal_fixed_point_definition
  | array_type_definition ;; formal_array_type_definition
  | access_type_definition ;; formal_access_type_definition
  | interface_type_definition ;; formal_interface_type_definition
  ;

formal_derived_type_definition
  : ABSTRACT LIMITED NEW name AND interface_list WITH PRIVATE
  | ABSTRACT SYNCHRONIZED NEW name AND interface_list WITH PRIVATE
  | ABSTRACT LIMITED NEW name AND interface_list
  | ABSTRACT SYNCHRONIZED NEW name AND interface_list
  | ABSTRACT LIMITED NEW name WITH PRIVATE
  | ABSTRACT SYNCHRONIZED NEW name WITH PRIVATE
  | ABSTRACT NEW name
  | NEW name
  ;

formal_package_declaration
 ;; leaving out [aspect_specification]
  : WITH PACKAGE name IS NEW name formal_package_actual_part SEMICOLON
  ;

formal_package_actual_part
  : LEFT_PAREN OTHERS EQUAL_GREATER BOX RIGHT_PAREN ;; (others => <>)
  | PAREN_BOX ;; (<>)
  | LEFT_PAREN association_list RIGHT_PAREN
 ;; generic_actual_part, formal_package_association_list is association_list
    `(wisi-cache-action 1 'open-paren 3 'close-paren)
  | ;; null generic actual part
  ;

formal_private_type_definition
  : ABSTRACT TAGGED LIMITED PRIVATE
  | ABSTRACT TAGGED PRIVATE
  | PRIVATE
  | ABSTRACT PRIVATE
  ;

full_type_declaration
 ;; leaving out [aspect_specification]
  : TYPE IDENTIFIER discriminant_part IS type_definition SEMICOLON
  | TYPE IDENTIFIER IS type_definition SEMICOLON
  | task_type_declaration
  | protected_type_declaration
  ;

general_access_modifier : ALL | CONSTANT ;

generic_declaration
  ;; : generic_subprogram_declaration
  : generic_package_declaration
  ;

generic_formal_part
  : GENERIC generic_formal_parameter_declarations ;; leaving out use_clause
  ;

generic_formal_parameter_declarations
  : generic_formal_parameter_declaration
  | generic_formal_parameter_declarations generic_formal_parameter_declaration
  ;

generic_formal_parameter_declaration
  : formal_object_declaration
  | formal_type_declaration
  | formal_subprogram_declaration
  | formal_package_declaration
  ;

generic_package_declaration
  : generic_formal_part package_specification SEMICOLON
    `(wisi-cache-action 1 'statement-start 3 'statement-end)
  ;

identifier_list
  : IDENTIFIER
  | identifier_list COMMA IDENTIFIER
  ;

index_subtype_definition : name RANGE BOX ;

index_subtype_definition_list
  : index_subtype_definition
  | index_subtype_definition_list COMMA index_subtype_definition
    `(wisi-cache-action 1 'list-break)
  ;

interface_list
  : name
  | interface_list AND name
  ;

interface_type_definition
  : LIMITED INTERFACE AND interface_list
  | TASK INTERFACE AND interface_list
  | PROTECTED INTERFACE AND interface_list
  | SYNCHRONIZED INTERFACE AND interface_list
  | LIMITED INTERFACE
  | TASK INTERFACE
  | PROTECTED INTERFACE
  | SYNCHRONIZED INTERFACE
  | INTERFACE
;

library_item
  : PRIVATE library_unit_declaration
  | library_unit_declaration
 ;; | library_unit_body
 ;; | PRIVATE library_unit_renaming_declaration
 ;; | library_unit_renaming_declaration
  ;

library_unit_declaration
  ;; : subprogram_declaration
  ;; | package_declaration
  : generic_declaration
  ;; | generic_instantiation
  ;

membership_choice_list
  : membership_choice
  | membership_choice_list BAR membership_choice
  ;

membership_choice
  : simple_expression
 ;; ARM has 'choice_expression' here, but that leads to a shift/reduce conflict, because of the following productions:
 ;; membership_choice_list => membership_choice => choice_expression => choice_relation_and_list
 ;; relation => simple_expression IN choice_relation_and_list
 ;; thus 'choice_relation_and_list AND' could be followed by relation (=> reduce) or choice_relation (=> shift)
 ;; This only occurs in legal Ada in expressions such as 'True in 1 and 3'; not useful, so we leave it out.
  | range
 ;;  | name ;; subtype_mark - also covered by choice_expression; avoid reduce/reduce conflict
  ;

mode
  :
  | IN
  | IN OUT
  | OUT
  ;

multiplying_operator : STAR | SLASH | MOD | REM ; ;; * | / | mod | rem

name_list
  : name
  | name_list COMMA name
  ;

name
  : IDENTIFIER
  ;; | explicit_dereference
  ;; | indexed_component
  ;; | slice
  | selected_component
  ;; | attribute_reference
  ;; | type_conversion
  ;; | function_call
  ;; | CHARACTER_LITERAL
  ;; | qualified_expression
  ;; | generalized_reference
  ;; | generalized_indexing
  ;

;; null_exclusion replaced by 'not null'

object_declaration
 ;; leaving out [aspect_specification]
  : identifier_list COLON ALIASED CONSTANT name COLON_EQUAL expression SEMICOLON
  | identifier_list COLON ALIASED CONSTANT name SEMICOLON
  | identifier_list COLON ALIASED name SEMICOLON
  | identifier_list COLON name SEMICOLON
  ;; | identifier_list COLON [ALIASED] [CONSTANT] access_definition [COLON_EQUAL expression] SEMICOLON
  ;; | identifier_list COLON [ALIASED] [CONSTANT] array_type_definition [COLON_EQUAL expression] SEMICOLON
  ;; | single_task_declaration
  ;; | single_protected_declaration
  ;

overriding_indicator
  : NOT OVERRIDING
  | OVERRIDING
  ;

package_specification
 ;; leaving out [aspect_specification]
  : PACKAGE name IS declarations PRIVATE declarations END name
    `(wisi-cache-action
      1 'statement-start
      3 'block-start
      5 'block-middle
      7 'block-end)

  | PACKAGE name IS declarations END name
    `(wisi-cache-action
      1 'statement-start
      3 'block-start
      5 'block-end)
  ;

parameter_and_result_profile
  : formal_part RETURN NOT NULL name
  | formal_part RETURN name
  | RETURN name
  | formal_part RETURN access_definition
  | RETURN access_definition
  ;

parameter_profile : | formal_part ;

parameter_specification
  : identifier_list COLON ALIASED mode NOT NULL name COLON_EQUAL expression
  | identifier_list COLON ALIASED mode NOT NULL name
  | identifier_list COLON ALIASED mode name
  | identifier_list COLON mode name
  | identifier_list COLON access_definition COLON_EQUAL expression
  | identifier_list COLON access_definition
  ;

parameter_specification_list
  : parameter_specification
  | parameter_specification_list SEMICOLON parameter_specification
    `(wisi-cache-action 2 'list-break)
  ;

;; prefix is name

primary
  : NUMERIC_LITERAL
  | NULL
  | STRING_LITERAL
  ;; | aggregate
  | name
  | NEW name ;; allocator, leaving out subpool_specification
  | LEFT_PAREN expression RIGHT_PAREN
  ;; | LEFT_PAREN conditional_expression RIGHT_PAREN
  ;; | LEFT_PAREN quantified_expression RIGHT_PAREN
  ;

protected_definition
  : declarations PRIVATE declarations END IDENTIFIER
    `(wisi-cache-action 2 'block-middle 4 'block-end)
  | declarations PRIVATE declarations END
    `(wisi-cache-action 2 'block-middle 4 'block-end)
  | declarations END
    `(wisi-cache-action 2 'block-end)
  ;

protected_type_declaration
 ;; leaving out [aspect_specification]
  : PROTECTED TYPE IDENTIFIER discriminant_part IS NEW interface_list WITH protected_definition SEMICOLON
    `(wisi-cache-action 1 'statement-start 8 'block-start 10 'statement-end)
  | PROTECTED TYPE IDENTIFIER discriminant_part IS protected_definition SEMICOLON
    `(wisi-cache-action 1 'statement-start 5 'block-start 7 'statement-end)
  | PROTECTED TYPE IDENTIFIER IS protected_definition SEMICOLON
    `(wisi-cache-action 1 'statement-start 4 'block-start 6 'statement-end)
  ;

;; protected_operation_declaration merged into declaration

range
  : name TICK RANGE LEFT_PAREN expression RIGHT_PAREN ;; range_attribute_reference
  | name TICK RANGE ;; range_attribute_reference
  | simple_expression DOT_DOT simple_expression
  ;

real_range_specification : RANGE simple_expression DOT_DOT simple_expression ;

record_type_definition
  : ABSTRACT TAGGED LIMITED record_definition
  | ABSTRACT TAGGED record_definition
  | TAGGED record_definition
  | record_definition
  ;

record_definition
  : RECORD component_list END RECORD
  | NULL RECORD
  ;

relation_and_list
  : relation AND relation
  | relation_and_list AND relation
  ;

relation_and_then_list
  : relation AND THEN relation
  | relation_and_then_list AND THEN relation
  ;

relation_or_list
  : relation OR relation
  | relation_or_list OR relation
  ;

relation_or_else_list
  : relation OR ELSE relation
  | relation_or_else_list OR ELSE relation
  ;

relation_xor_list
  : relation XOR relation
  | relation_xor_list XOR relation
  ;

relation
  : simple_expression
  | simple_expression relational_operator simple_expression
  | simple_expression NOT IN membership_choice_list
  | simple_expression IN membership_choice_list
  ;

relational_operator
  : EQUAL | SLASH_EQUAL | LESS | LESS_EQUAL | GREATER | GREATER_EQUAL ;
  ;;  =   | /=          | <    |  <=        | >       | >=

selected_component
  : name DOT IDENTIFIER
  | name DOT CHARACTER_LITERAL
  | name DOT STRING_LITERAL ;; operator_symbol
  ;

simple_expression
  : unary_adding_operator term_list
  | term_list
  ;

subprogram_declaration
 ;; leaving out [aspect_specification]
  : overriding_indicator subprogram_specification SEMICOLON
  | subprogram_specification SEMICOLON
  ;

subprogram_default : name | BOX | NULL ;

subprogram_specification
  : PROCEDURE name parameter_profile ;; procedure_specification
  | FUNCTION name parameter_and_result_profile ;; function_specification
  | FUNCTION STRING_LITERAL parameter_and_result_profile ;; operator_symbol
  ;

subtype_indication
  : NOT NULL name constraint
  | NOT NULL name
  | name
  ;

;; subtype_mark replaced by name

task_definition
  : declarations PRIVATE declarations END IDENTIFIER
  | declarations PRIVATE declarations END
  | declarations END
  ;

task_type_declaration
 ;; leaving out [aspect_specification]
  : TASK TYPE IDENTIFIER discriminant_part IS NEW interface_list WITH task_definition SEMICOLON
    `(wisi-cache-action 1 'statement-start 10 'statement-end)
  | TASK TYPE IDENTIFIER discriminant_part IS task_definition SEMICOLON
    `(wisi-cache-action 1 'statement-start 7 'statement-end)
  | TASK TYPE IDENTIFIER discriminant_part SEMICOLON
    `(wisi-cache-action 1 'statement-start 5 'statement-end)
  | TASK TYPE IDENTIFIER SEMICOLON
    `(wisi-cache-action 1 'statement-start 4 'statement-end)
  ;

term
  : factor
  | term multiplying_operator factor
  ;

term_list
  : term binary_adding_operator term
  | term_list binary_adding_operator term
  ;

type_declaration
  : full_type_declaration
  ;; | incomplete_type_declaration
  ;; | private_type_declaration
  ;; | private_extension_declaration
  ;

type_definition
  : enumeration_type_definition
  | RANGE RANGE simple_expression DOT_DOT simple_expression ;; integer_type_definition
  | MOD expression
  | DIGITS expression real_range_specification ;; real_type_definition
  | DIGITS expression ;; floating_point_type_definition
  | DELTA expression real_range_specification ;; ordinary_fixed_point_definition
  | DELTA expression DIGITS expression real_range_specification ;; decimal_fixed_point_definition
  | array_type_definition
  | record_type_definition
  | access_type_definition
  | derived_type_definition
  | interface_type_definition
  ;

variant_part
  : CASE name IS variant_list END CASE SEMICOLON
  ;

variant_list
  : variant
  | variant_list variant
  ;

variant : WHEN discrete_choice_list EQUAL_GREATER component_list ;

unary_adding_operator : PLUS | MINUS ; ;; + | -

use_clause
  : USE name_list SEMICOLON
    `(wisi-cache-action 1 'statement-start 3 'statement-end)
  | USE ALL TYPE name_list SEMICOLON
    `(wisi-cache-action 1 'statement-start 5 'statement-end)
  | USE TYPE name_list SEMICOLON
    `(wisi-cache-action 1 'statement-start 4 'statement-end)
  ;

with_clause
  : LIMITED PRIVATE WITH name_list SEMICOLON
    `(wisi-cache-action 1 'statement-start 5 'statement-end)
  | LIMITED WITH name_list SEMICOLON
    `(wisi-cache-action 1 'statement-start 4 'statement-end)
  | PRIVATE WITH name_list SEMICOLON
    `(wisi-cache-action 1 'statement-start 4 'statement-end)
  | WITH name_list SEMICOLON
    `(wisi-cache-action 1 'statement-start 3 'statement-end)
  ;

%%

;; Local Variables:
;; eval: (add-hook 'before-save-hook 'delete-trailing-whitespace nil t)
;; End:
;;; end of file
